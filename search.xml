<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ASP.NET 知识收集与问题解决</title>
    <url>/archives/51745.html</url>
    <content><![CDATA[<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="ASP-NET-MVC部署报错"><a href="#ASP-NET-MVC部署报错" class="headerlink" title="ASP.NET MVC部署报错"></a>ASP.NET MVC部署报错</h3><ol>
<li>部署时提示：<strong>模块 DirectoryListingModule 通知 ExecuteRequestHandler 处理程序 StaticFile</strong><br>解决办法：在 <strong>webconfig</strong> 里 <strong>system.webServer</strong> 下的 <strong>modules</strong> 节点加一个属性为：<strong>runAllManagedModulesForAllRequests=”true”</strong><br>如果仍未解决，可查看.net版本是否过低（4.7的程序放在4.5上就不行）</li>
<li>部署时提示：<strong><strong>配置错误</strong></strong>不能在此路径中使用此配置节。如果在父级别上锁定了该节，便会出现这种情况。锁定是默认设置的<strong><strong>(overrideModeDefault=”Deny”)</strong></strong>，或者是通过包含<strong><strong> overrideMode=”Deny” </strong></strong>或旧有的<strong><strong>allowOverride=”false” </strong></strong>的位置标记明确设置的。<em>**</em><br>解决办法：安装iis的时候还要安装 <code>asp.net</code></li>
</ol>
<hr>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 安装 GitLab</title>
    <url>/archives/30939.html</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/wenwei-blog/p/5861450.html" target="_blank" rel="noopener">教程</a> | <a href="https://www.cnblogs.com/cheng95/p/8037865.html" target="_blank" rel="noopener">汉化</a> | <a href="http://www.souvc.com/?p=2733#gitlab" target="_blank" rel="noopener">参考</a></p>
<h4 id="1-安装gitlab所需要的依赖"><a href="#1-安装gitlab所需要的依赖" class="headerlink" title="1.安装gitlab所需要的依赖"></a>1.安装gitlab所需要的依赖</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install curl policycoreutils openssh-server openssh-clients</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="2-使sshd服务自动启动"><a href="#2-使sshd服务自动启动" class="headerlink" title="2.使sshd服务自动启动"></a>2.使sshd服务自动启动</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable sshd</span><br></pre></td></tr></table></figure>
<h4 id="3-启动sshd服务"><a href="#3-启动sshd服务" class="headerlink" title="3.启动sshd服务"></a>3.启动sshd服务</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl start sshd</span><br></pre></td></tr></table></figure>
<h4 id="４-安装邮件服务器"><a href="#４-安装邮件服务器" class="headerlink" title="４.安装邮件服务器"></a>４.安装邮件服务器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install postfix</span><br></pre></td></tr></table></figure>
<h4 id="5-使邮件服务器postfix自启动"><a href="#5-使邮件服务器postfix自启动" class="headerlink" title="5.使邮件服务器postfix自启动"></a>5.使邮件服务器postfix自启动</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable postfix</span><br></pre></td></tr></table></figure>
<h4 id="6-启动邮件服务器postfix"><a href="#6-启动邮件服务器postfix" class="headerlink" title="6. 启动邮件服务器postfix"></a>6. 启动邮件服务器postfix</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl start postfix</span><br></pre></td></tr></table></figure>
<h4 id="7-添加GitLab仓库-并安装到服务器上"><a href="#7-添加GitLab仓库-并安装到服务器上" class="headerlink" title="7.添加GitLab仓库,并安装到服务器上"></a>7.添加GitLab仓库,并安装到服务器上</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl  -sS http://packages.gitlab.cc/install/gitlab-ce/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure>
<h4 id="8-安装gitlab"><a href="#8-安装gitlab" class="headerlink" title="8.安装gitlab"></a>8.安装gitlab</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install gitlab-ce</span><br></pre></td></tr></table></figure>
<h4 id="9-启动，配置"><a href="#9-启动，配置" class="headerlink" title="9.启动，配置"></a>9.启动，配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>
<h4 id="10-修改gitlab配置文件指定服务器ip和自定义端口"><a href="#10-修改gitlab配置文件指定服务器ip和自定义端口" class="headerlink" title="10.修改gitlab配置文件指定服务器ip和自定义端口"></a>10.修改gitlab配置文件指定服务器ip和自定义端口</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi  /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pages_external_url &quot;&quot;</span><br><span class="line">unicorn[&apos;listen&apos;] = &apos;127.0.0.1&apos;</span><br><span class="line">unicorn[&apos;port&apos;] = 9000</span><br></pre></td></tr></table></figure>
<p>在防火墙开放指定端口</p>
<h4 id="11-重新配置"><a href="#11-重新配置" class="headerlink" title="11.重新配置"></a>11.重新配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>
<h4 id="12-重启"><a href="#12-重启" class="headerlink" title="12.重启"></a>12.重启</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure>
<h3 id="配置发送邮件"><a href="#配置发送邮件" class="headerlink" title="配置发送邮件"></a>配置发送邮件</h3><p><a href="https://docs.gitlab.com/omnibus/settings/smtp.html#amazon-ses" target="_blank" rel="noopener">参考地址</a><br>QQMail<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlab_rails[&apos;smtp_enable&apos;] = true</span><br><span class="line">gitlab_rails[&apos;smtp_address&apos;] = &quot;smtp.exmail.qq.com&quot;</span><br><span class="line">gitlab_rails[&apos;smtp_port&apos;] = 465</span><br><span class="line">gitlab_rails[&apos;smtp_user_name&apos;] = &quot;xxxx@xx.com&quot;</span><br><span class="line">gitlab_rails[&apos;smtp_password&apos;] = &quot;password&quot;</span><br><span class="line">gitlab_rails[&apos;smtp_authentication&apos;] = &quot;login&quot;</span><br><span class="line">gitlab_rails[&apos;smtp_enable_starttls_auto&apos;] = true</span><br><span class="line">gitlab_rails[&apos;smtp_tls&apos;] = true</span><br><span class="line">gitlab_rails[&apos;gitlab_email_from&apos;] = &apos;xxxx@xx.com&apos;</span><br></pre></td></tr></table></figure></p>
<p>更新配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure></p>
<p>备份<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure></p>
<p>还原备份<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp 140623891_gitlab_backup.tar  /var/opt/gitlab/backups/   </span><br><span class="line">sudo gitlab-ctl stop unicorn  </span><br><span class="line">sudo gitlab-ctl stop sidekiq  </span><br><span class="line">sudo gitlab-rake gitlab:backup:restore BACKUP=140623891   -- 备份文件名的时间戳前缀  </span><br><span class="line">sudo gitlab-ctl start  </span><br><span class="line">sudo gitlab-rake gitlab:check SANITIZE=true</span><br></pre></td></tr></table></figure></p>
<h2 id="定时备份"><a href="#定时备份" class="headerlink" title="定时备份"></a>定时备份</h2><p>执行<code>crontab -e</code>命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure></p>
<p>输入以下内容，设置每天凌晨2:00定时自动备份<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 2 * * * gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure></p>
<h2 id="Centos-7-防火墙操作"><a href="#Centos-7-防火墙操作" class="headerlink" title="Centos 7 防火墙操作"></a>Centos 7 防火墙操作</h2><p>查看已经开放的端口：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure></p>
<p>开启端口<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure></p>
<p>重启防火墙<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload #重启firewall</span><br><span class="line">systemctl stop firewalld.service #停止firewall</span><br><span class="line">systemctl disable firewalld.service #禁止firewall开机启动</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 修改yum源</title>
    <url>/archives/61758.html</url>
    <content><![CDATA[<p>备份本地yum源<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo_bak</span><br></pre></td></tr></table></figure></p>
<p>获取阿里yum源配置文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure></p>
<p>更新cache<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure></p>
<p>查看<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular CLI 命令行收集</title>
    <url>/archives/27930.html</url>
    <content><![CDATA[<h3 id="安装-Angular-CLI"><a href="#安装-Angular-CLI" class="headerlink" title="安装 Angular CLI"></a>安装 Angular CLI</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g @angular/cli</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="创建新应用"><a href="#创建新应用" class="headerlink" title="创建新应用"></a>创建新应用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng new angular-tour-of-heroes</span><br></pre></td></tr></table></figure>
<h3 id="启动应用服务器"><a href="#启动应用服务器" class="headerlink" title="启动应用服务器"></a>启动应用服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng serve --open</span><br></pre></td></tr></table></figure>
<h3 id="创建新组建"><a href="#创建新组建" class="headerlink" title="创建新组建"></a>创建新组建</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng generate component heroes</span><br></pre></td></tr></table></figure>
<p>或者<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng g c heroes</span><br></pre></td></tr></table></figure></p>
<h3 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng generate service hero</span><br></pre></td></tr></table></figure>
<h3 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng generate class hero</span><br></pre></td></tr></table></figure>
<h2 id="创建特性模块"><a href="#创建特性模块" class="headerlink" title="创建特性模块"></a>创建特性模块</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng generate module CustomerDashboard</span><br></pre></td></tr></table></figure>
<h3 id="添加-AppRoutingModule-路由器"><a href="#添加-AppRoutingModule-路由器" class="headerlink" title="添加 AppRoutingModule 路由器"></a>添加 AppRoutingModule 路由器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng generate module app-routing --flat --module=app</span><br></pre></td></tr></table></figure>
<h3 id="添加模拟数据服务器模块"><a href="#添加模拟数据服务器模块" class="headerlink" title="添加模拟数据服务器模块"></a>添加模拟数据服务器模块</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install angular-in-memory-web-api --save</span><br></pre></td></tr></table></figure>
<h2 id="添加-Ant-Desinger-of-Angular"><a href="#添加-Ant-Desinger-of-Angular" class="headerlink" title="添加 Ant Desinger of Angular"></a>添加 Ant Desinger of Angular</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng add ng-zorro-antd</span><br></pre></td></tr></table></figure>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="build-后引用路径错误"><a href="#build-后引用路径错误" class="headerlink" title="build 后引用路径错误"></a>build 后引用路径错误</h3><p>解决方案：<br>在文件 <code>package.json</code> 文件的 <code>script</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;build&quot;:&quot;ng build --base-href ./&quot;</span><br></pre></td></tr></table></figure></p>
<h3 id="使用-ngx-echart-报错"><a href="#使用-ngx-echart-报错" class="headerlink" title="使用 ngx-echart 报错"></a>使用 <code>ngx-echart</code> 报错</h3><p>解决方案：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save rxjs-compat</span><br></pre></td></tr></table></figure></p>
<h3 id="使用formGroup报错"><a href="#使用formGroup报错" class="headerlink" title="使用formGroup报错"></a>使用<code>formGroup</code>报错</h3><p>解决方案：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; FormsModule,ReactiveFormsModule &#125; from &apos;@angular/forms&apos;;</span><br><span class="line">...</span><br><span class="line">imports: [</span><br><span class="line">	// 其他引用</span><br><span class="line">	FormsModule,</span><br><span class="line">	ReactiveFormsModule</span><br><span class="line">],</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 安装mongodb</title>
    <url>/archives/3512.html</url>
    <content><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>假设存放的目录为<code>/usr/software</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/software</span><br><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz  // 下载</span><br><span class="line">tar -zxvf mongodb-linux-x86_64-3.0.6.tgz  // 解压</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure>
<p>在文档末尾添加(目录要以node下载的目录为准)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:/usr/software/mongodb-linux-x86_64-3.0.6/bin</span><br></pre></td></tr></table></figure></p>
<p>配置生效<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p>
<h3 id="配置并运行"><a href="#配置并运行" class="headerlink" title="配置并运行"></a>配置并运行</h3><p>接着在usr/software/mongodb目录下新建一个名为mongodb.conf的配置文件，写入如下配置内容<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">port=27017</span><br><span class="line">dbpath=/usr/software/mongodb/data/db</span><br><span class="line">logappend=true</span><br><span class="line">fork=true</span><br><span class="line">logpath=/usr/software/mongodb/data/logs</span><br></pre></td></tr></table></figure></p>
<p>保存。然后输入命令启动mongod –config /usr/software/mongodb/mongodb.conf</p>
<h3 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /lib/systemd/system/</span><br><span class="line">vi mongodb.service</span><br></pre></td></tr></table></figure>
<p>添加内容<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=mongodb</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/software/mongodb-linux-x86_64-3.0.6/bin/mongod --config /usr/software/mongodb/mongodb.conf</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">ExecStop=/usr/software/mongodb-linux-x86_64-3.0.6/bin/mongod --shutdown --config /usr/software/mongodb/mongodb.conf</span><br><span class="line">PrivateTmp=true</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p>
<p>配置生效<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure></p>
<p>可用命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#启动服务</span><br><span class="line">systemctl start mongodb.service</span><br><span class="line">#关闭服务</span><br><span class="line">systemctl stop mongodb.service</span><br><span class="line">#开机启动</span><br><span class="line">systemctl enable mongodb.service</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 安装shadowsocks服务</title>
    <url>/archives/17613.html</url>
    <content><![CDATA[<h3 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h3><p><code>Pip</code>是<code>Python</code>的包管理工具，下载<code>ss</code>十分方便，但是<code>centos</code>是没有<code>pip</code>的，我们需要安装安装一个。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install python-setuptools &amp; easy_install pip</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="安装Shadowsocks-客户端"><a href="#安装Shadowsocks-客户端" class="headerlink" title="安装Shadowsocks 客户端"></a>安装Shadowsocks 客户端</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure>
<p>修改配置文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure></p>
<p>进入编辑模式，粘贴以下内容<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">  &quot;port_password&quot;: &#123;</span><br><span class="line">    &quot;此处填写端口号&quot;: &quot;此处填写密码&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;timeout&quot;: 300,</span><br><span class="line">  &quot;method&quot;: &quot;aes-256-cfb&quot;,</span><br><span class="line">  &quot;fast_open&quot;: false,</span><br><span class="line">  &quot;workers&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="启动-shadowsocks"><a href="#启动-shadowsocks" class="headerlink" title="启动 shadowsocks"></a>启动 shadowsocks</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动</span><br><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line"># 停止</span><br><span class="line">ssserver -c /etc/shadowsocks.json -d stop</span><br><span class="line"># 重新启动</span><br><span class="line">ssserver -c /etc/shadowsocks.json -d restart</span><br></pre></td></tr></table></figure>
<p>查看是否正常启动<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -aux | grep ssserver</span><br></pre></td></tr></table></figure></p>
<h3 id="设置自启动"><a href="#设置自启动" class="headerlink" title="设置自启动"></a>设置自启动</h3><p>编辑<code>rc.local</code>文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.local</span><br></pre></td></tr></table></figure></p>
<p>添加<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ssserver -c /etc/shadowsocks/config.json -d start</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 安装配置Apache</title>
    <url>/archives/13790.html</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install httpd</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="添加网站"><a href="#添加网站" class="headerlink" title="添加网站"></a>添加网站</h2><p>新建目录<code>/var/www/demo</code><br>将发布好的网站粘贴到该目录</p>
<h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure>
<p>假设网站的端口为8100,<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Listen 8100</span><br><span class="line"></span><br><span class="line">NameVirtualHost *:8100</span><br><span class="line">&lt;VirtualHost *:8100&gt;</span><br><span class="line">ServerName demo</span><br><span class="line">DocumentRoot /var/www/demo</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="配置semanage"><a href="#配置semanage" class="headerlink" title="配置semanage"></a>配置semanage</h2><p>安装 <code>semanage</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install policycoreutils-python</span><br></pre></td></tr></table></figure></p>
<p>查看现在的支持http的端口有哪些<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">semanage port -l|grep http</span><br></pre></td></tr></table></figure></p>
<p>为http服务添加新的端8100<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">semanage port -a -t http_port_t -p tcp 8100</span><br></pre></td></tr></table></figure></p>
<h2 id="防火墙开通8100端口"><a href="#防火墙开通8100端口" class="headerlink" title="防火墙开通8100端口"></a>防火墙开通8100端口</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8100/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开机自启</span><br><span class="line">sudo systemctl enable httpd</span><br><span class="line"># 启动</span><br><span class="line">sudo systemctl start httpd</span><br><span class="line"># 停止</span><br><span class="line">sudo systemctl stop httpd</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 安装node环境</title>
    <url>/archives/5588.html</url>
    <content><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>假设存放的目录为<code>/usr/software</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/software</span><br><span class="line">wget https://nodejs.org/dist/v10.9.0/node-v10.9.0-linux-x64.tar.xz  // 下载</span><br><span class="line">tar xf  node-v10.9.0-linux-x64.tar.xz  // 解压</span><br><span class="line">cd node-v10.9.0-linux-x64/bin  // 进入解压目录</span><br><span class="line">node -v //查看node版本号</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure>
<p>在文档末尾添加(目录要以node下载的目录为准)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:/usr/software/node-v10.9.0-linux-x64/bin</span><br></pre></td></tr></table></figure></p>
<p>配置生效<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 防火墙操作</title>
    <url>/archives/26003.html</url>
    <content><![CDATA[<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ul>
<li>启动： <code>systemctl start firewalld</code></li>
<li>关闭： <code>systemctl stop firewalld</code></li>
<li>查看状态： <code>systemctl status firewalld</code></li>
<li>开机禁用  ： <code>systemctl disable firewalld</code></li>
<li>开机启用  ： <code>systemctl enable firewalld</code><a id="more"></a>
</li>
</ul>
<h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent    （--permanent永久生效，没有此参数重启后失效）</span><br></pre></td></tr></table></figure>
<h3 id="重新载入"><a href="#重新载入" class="headerlink" title="重新载入"></a>重新载入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone= public --query-port=80/tcp</span><br></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone= public --remove-port=80/tcp --permanent</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7一键安装Seafile搭建私有云存储</title>
    <url>/archives/21644.html</url>
    <content><![CDATA[<p><a href="https://manual-cn-origin.seafile.com" target="_blank" rel="noopener">参考手册</a></p>
<h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul>
<li>CentOS 7 64位</li>
<li>Python &gt;= 2.7</li>
<li>SqLite 3</li>
</ul>
<a id="more"></a>
<h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>复制下面的命令，依次输入，然后按照提示进行安装即可<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line">wget https://raw.githubusercontent.com/helloxz/seafile/master/install_seafile.sh</span><br><span class="line">chmod +x install_seafile.sh &amp;&amp; ./install_seafile.sh</span><br></pre></td></tr></table></figure></p>
<h2 id="配置邮件发送"><a href="#配置邮件发送" class="headerlink" title="配置邮件发送"></a>配置邮件发送</h2><p>邮件提醒会使某些功能有更好的用户体验, 比如发送邮件提醒用户新消息到达. 请在seahub_settings.py中加入以下语句以开启邮件提醒功能 (同时需要对你的邮箱进行设置).<br>Gmail 邮箱示例:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EMAIL_USE_TLS = True</span><br><span class="line">EMAIL_HOST = &apos;smtp.gmail.com&apos;</span><br><span class="line">EMAIL_HOST_USER = &apos;username@gmail.com&apos;</span><br><span class="line">EMAIL_HOST_PASSWORD = &apos;password&apos;</span><br><span class="line">EMAIL_PORT = &apos;587&apos;</span><br><span class="line">DEFAULT_FROM_EMAIL = EMAIL_HOST_USER</span><br><span class="line">SERVER_EMAIL = EMAIL_HOST_USER</span><br></pre></td></tr></table></figure></p>
<p>QQ 邮箱示例：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EMAIL_USE_SSL = True</span><br><span class="line">EMAIL_HOST = &apos;smtp.qq.com&apos;</span><br><span class="line">EMAIL_HOST_USER = &apos;username@domain.com&apos;</span><br><span class="line">EMAIL_HOST_PASSWORD = &apos;Auth_Code&apos;</span><br><span class="line">EMAIL_PORT = &apos;465&apos;</span><br><span class="line">DEFAULT_FROM_EMAIL = EMAIL_HOST_USER</span><br><span class="line">SERVER_EMAIL = EMAIL_HOST_USER</span><br></pre></td></tr></table></figure></p>
<h2 id="其它说明"><a href="#其它说明" class="headerlink" title="其它说明"></a>其它说明</h2><p>安装目录和服务如下，如果您还需要配置更多的功能或扩展，请访问官方帮助文档：<a href="https://manual-cn.seafile.com/" target="_blank" rel="noopener">https://manual-cn.seafile.com/</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#安装目录</span><br><span class="line">/home/MyCloud</span><br><span class="line">#启动服务</span><br><span class="line">/home/MyCloud/seafile-server/seafile.sh start</span><br><span class="line">/home/MyCloud/seafile-server/seahub.sh start</span><br><span class="line">#停止服务</span><br><span class="line">/home/MyCloud/seafile-server/seafile.sh stop</span><br><span class="line">/home/MyCloud/seafile-server/seahub.sh stop</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>EF 知识收集与问题解决</title>
    <url>/archives/25896.html</url>
    <content><![CDATA[<h2 id="语法学习"><a href="#语法学习" class="headerlink" title="语法学习"></a>语法学习</h2><p><a href="https://www.cnblogs.com/li-peng/p/3441729.html" target="_blank" rel="noopener">用linqPad帮助你快速学习LINQ</a></p>
<h3 id="GroupBy"><a href="#GroupBy" class="headerlink" title="GroupBy"></a>GroupBy</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var re = db.InvoiceDetail.WhereDynamic(Request.Form).GroupBy(a =&gt; new &#123; a.IvdMatCode, a.IvdMatName &#125;).Select(a =&gt; new</span><br><span class="line">&#123;</span><br><span class="line">    IvdMatCode = a.Key.IvdMatCode,</span><br><span class="line">    IvdMatName = a.Key.IvdMatName,</span><br><span class="line">    num = a.Sum(x =&gt; x.IvdScanNum)</span><br><span class="line">&#125;).ToList();</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<h2 id="知识收集"><a href="#知识收集" class="headerlink" title="知识收集"></a>知识收集</h2><h3 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h3><p>打开迁移：<code>Enable-Migrations</code><br>增加迁移的节点：<code>Add-Migration PaperTest</code></p>
<h2 id="将修改升级到数据库-Update-Database"><a href="#将修改升级到数据库-Update-Database" class="headerlink" title="将修改升级到数据库:Update-Database"></a>将修改升级到数据库:<code>Update-Database</code></h2><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="Update-Database-无法将“Update-Database”项识别为-cmdlet、函数、脚本文件或可运行程序的名称的问题"><a href="#Update-Database-无法将“Update-Database”项识别为-cmdlet、函数、脚本文件或可运行程序的名称的问题" class="headerlink" title="Update-Database : 无法将“Update-Database”项识别为 cmdlet、函数、脚本文件或可运行程序的名称的问题"></a>Update-Database : 无法将“Update-Database”项识别为 cmdlet、函数、脚本文件或可运行程序的名称的问题</h3><p>原因：<br>没有引用EntityFramework命令<br>解决：<br>在程序包管理器控制台执行如下命令:</p>
<h2 id="Import-Module-项目路径-packages-EntityFramework-6-1-3（EF版本）-tools-EntityFramework-psd1"><a href="#Import-Module-项目路径-packages-EntityFramework-6-1-3（EF版本）-tools-EntityFramework-psd1" class="headerlink" title="Import-Module 项目路径\packages\EntityFramework.6.1.3（EF版本）\tools\EntityFramework.psd1"></a>Import-Module 项目路径\packages\EntityFramework.6.1.3（EF版本）\tools\EntityFramework.psd1</h2>]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基本操作</title>
    <url>/archives/235b27fb.html</url>
    <content><![CDATA[<p>Git是目前世界上最先进的分布式版本控制系统</p>
<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><h4 id="设置全局用户名和邮箱"><a href="#设置全局用户名和邮箱" class="headerlink" title="设置全局用户名和邮箱"></a>设置全局用户名和邮箱</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &apos;langwenda&apos; </span><br><span class="line">git config --global user.email &apos;langwdalan@gmail.com&apos;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="当前项目设置用户名和邮箱"><a href="#当前项目设置用户名和邮箱" class="headerlink" title="当前项目设置用户名和邮箱"></a>当前项目设置用户名和邮箱</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config user.name &apos;langwenda&apos; </span><br><span class="line">git config user.email &apos;langwdalan@gmail.com&apos;</span><br></pre></td></tr></table></figure>
<h4 id="创建SSH-Key"><a href="#创建SSH-Key" class="headerlink" title="创建SSH Key"></a>创建SSH Key</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;langwdalan@gmail.com&quot;</span><br></pre></td></tr></table></figure>
<p>密钥类型可以用 -t 选项指定。如果没有指定则默认生成用于SSH-2的RSA密钥。这里使用的是rsa。</p>
<p>同时在密钥中有一个注释字段，用-C来指定所指定的注释，可以方便用户标识这个密钥，指出密钥的用途或其他有用的信息。所以在这里输入自己的邮箱或者其他都行。</p>
<p>输入完毕后程序同时要求输入一个密语字符串(passphrase)，空表示没有密语。接着会让输入2次口令(password)，空表示没有口令。3次回车即可完成当前步骤，此时[c盘&gt;用户&gt;自己的用户名&gt;.ssh]目录下已经生成好了。</p>
<h2 id="从GitHub-已有的项目上clone"><a href="#从GitHub-已有的项目上clone" class="headerlink" title="从GitHub 已有的项目上clone"></a>从GitHub 已有的项目上clone</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone ***</span><br></pre></td></tr></table></figure>
<h2 id="从本地新建版本库并提交至GItHub"><a href="#从本地新建版本库并提交至GItHub" class="headerlink" title="从本地新建版本库并提交至GItHub"></a>从本地新建版本库并提交至GItHub</h2><p>1.初始化项目<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></p>
<p>2.建立远程关联<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin *****</span><br></pre></td></tr></table></figure></p>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ol>
<li><p>git add</p>
<ul>
<li>git add 命令可将该文件添加到缓存</li>
<li>dit add . 添加所有文件</li>
</ul>
</li>
<li><p>git commit</p>
<ul>
<li>git commit -m ‘这里是提交的注释’</li>
<li>git commit -a 无需add 直接提交</li>
</ul>
</li>
<li><p>git push</p>
<ul>
<li>git push [alias]  [branch]</li>
</ul>
</li>
<li><p>git status 查看状态</p>
</li>
<li><p>git diff</p>
<ul>
<li>尚未缓存的改动：<strong>git diff</strong></li>
<li>查看已缓存的改动： <strong>git diff –cached</strong></li>
<li>查看已缓存的与未缓存的所有改动：<strong>git diff HEAD</strong></li>
<li>显示摘要而非整个 diff：<strong>git diff –stat</strong></li>
</ul>
</li>
<li><p>git branch</p>
<ul>
<li>git branch (branchname) 创建分支</li>
<li>git checkout (branchname) 切换分支</li>
<li>git branch -d (branchname) 删除分支</li>
<li>git merge 合并分支</li>
</ul>
</li>
<li><p>git log 查看历史</p>
<ul>
<li>git log  –oneline 简洁模式</li>
</ul>
</li>
<li><p>git tag 查看标签</p>
<ul>
<li>git tag -a v1.0 打标签</li>
<li>git tag -a v0.9  85fc7e7 对指定提交的版本打标签</li>
<li>git tag -a <tagname>  -m “w3cschool.cc标签” 指定标签信息</tagname></li>
</ul>
</li>
</ol>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="因为重置密码或密码错误导致操作失败"><a href="#因为重置密码或密码错误导致操作失败" class="headerlink" title="因为重置密码或密码错误导致操作失败"></a>因为重置密码或密码错误导致操作失败</h3><p>现象：<br>提示atal: Authentication failed for ….<br>解决：进入windows 凭据管理删除凭据<br>或<br>执行<code>git config --system --unset credential.helper</code></p>
<h2 id="emoji-指南"><a href="#emoji-指南" class="headerlink" title="emoji 指南"></a>emoji 指南</h2><table>
<thead>
<tr>
<th style="text-align:left">emoji</th>
<th style="text-align:left">emoji 代码</th>
<th style="text-align:left">commit 说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">:tada: (庆祝)</td>
<td style="text-align:left"><code>:tada:</code></td>
<td style="text-align:left">初次提交</td>
</tr>
<tr>
<td style="text-align:left">:sparkles: (火花)</td>
<td style="text-align:left"><code>:sparkles:</code></td>
<td style="text-align:left">引入新功能</td>
</tr>
<tr>
<td style="text-align:left">:bookmark: (书签)</td>
<td style="text-align:left"><code>:bookmark:</code></td>
<td style="text-align:left">发行/版本标签</td>
</tr>
<tr>
<td style="text-align:left">:bug: (bug)</td>
<td style="text-align:left"><code>:bug:</code></td>
<td style="text-align:left">修复 bug</td>
</tr>
<tr>
<td style="text-align:left">:ambulance: (急救车)</td>
<td style="text-align:left"><code>:ambulance:</code></td>
<td style="text-align:left">重要补丁</td>
</tr>
<tr>
<td style="text-align:left">:globe_with_meridians: (地球)</td>
<td style="text-align:left"><code>:globe_with_meridians:</code></td>
<td style="text-align:left">国际化与本地化</td>
</tr>
<tr>
<td style="text-align:left">:lipstick: (口红)</td>
<td style="text-align:left"><code>:lipstick:</code></td>
<td style="text-align:left">更新 UI 和样式文件</td>
</tr>
<tr>
<td style="text-align:left">:rotating_light: (警车灯)</td>
<td style="text-align:left"><code>:rotating_light:</code></td>
<td style="text-align:left">移除 linter 警告</td>
</tr>
<tr>
<td style="text-align:left">:wrench: (扳手)</td>
<td style="text-align:left"><code>:wrench:</code></td>
<td style="text-align:left">修改配置文件</td>
</tr>
<tr>
<td style="text-align:left">:heavy_plus_sign: (加号)</td>
<td style="text-align:left"><code>:heavy_plus_sign:</code></td>
<td style="text-align:left">增加一个依赖</td>
</tr>
<tr>
<td style="text-align:left">:heavy_minus_sign: (减号)</td>
<td style="text-align:left"><code>:heavy_minus_sign:</code></td>
<td style="text-align:left">减少一个依赖</td>
</tr>
<tr>
<td style="text-align:left">:arrow_up: (上升箭头)</td>
<td style="text-align:left"><code>:arrow_up:</code></td>
<td style="text-align:left">升级依赖</td>
</tr>
<tr>
<td style="text-align:left">:arrow_down: (下降箭头)</td>
<td style="text-align:left"><code>:arrow_down:</code></td>
<td style="text-align:left">降级依赖</td>
</tr>
<tr>
<td style="text-align:left">:zap: (闪电)<br>:racehorse: (赛马)</td>
<td style="text-align:left"><code>:zap:</code><br><code>:racehorse:</code></td>
<td style="text-align:left">提升性能</td>
</tr>
<tr>
<td style="text-align:left">:chart_with_upwards_trend: (上升趋势图)</td>
<td style="text-align:left"><code>:chart_with_upwards_trend:</code></td>
<td style="text-align:left">添加分析或跟踪代码</td>
</tr>
<tr>
<td style="text-align:left">:rocket: (火箭)</td>
<td style="text-align:left"><code>:rocket:</code></td>
<td style="text-align:left">部署功能</td>
</tr>
<tr>
<td style="text-align:left">:white_check_mark: (白色复选框)</td>
<td style="text-align:left"><code>:white_check_mark:</code></td>
<td style="text-align:left">增加测试</td>
</tr>
<tr>
<td style="text-align:left">:memo: (备忘录)</td>
<td style="text-align:left"><code>:memo:</code></td>
<td style="text-align:left">撰写文档</td>
</tr>
<tr>
<td style="text-align:left">:hammer: (锤子)</td>
<td style="text-align:left"><code>:hammer:</code></td>
<td style="text-align:left">重大重构</td>
</tr>
<tr>
<td style="text-align:left">:art: (调色板)</td>
<td style="text-align:left"><code>:art:</code></td>
<td style="text-align:left">改进代码结构/代码格式</td>
</tr>
<tr>
<td style="text-align:left">:fire: (火焰)</td>
<td style="text-align:left"><code>:fire:</code></td>
<td style="text-align:left">移除代码或文件</td>
</tr>
<tr>
<td style="text-align:left">:pencil2: (铅笔)</td>
<td style="text-align:left"><code>:pencil2:</code></td>
<td style="text-align:left">修复 typo</td>
</tr>
<tr>
<td style="text-align:left">:construction: (施工)</td>
<td style="text-align:left"><code>:construction:</code></td>
<td style="text-align:left">工作进行中</td>
</tr>
<tr>
<td style="text-align:left">:construction_worker: (工人)</td>
<td style="text-align:left"><code>:construction_worker:</code></td>
<td style="text-align:left">添加 CI 构建系统</td>
</tr>
<tr>
<td style="text-align:left">:green_heart: (绿心)</td>
<td style="text-align:left"><code>:green_heart:</code></td>
<td style="text-align:left">修复 CI 构建问题</td>
</tr>
<tr>
<td style="text-align:left">:lock: (锁)</td>
<td style="text-align:left"><code>:lock:</code></td>
<td style="text-align:left">修复安全问题</td>
</tr>
<tr>
<td style="text-align:left">:whale: (鲸鱼)</td>
<td style="text-align:left"><code>:whale:</code></td>
<td style="text-align:left">Docker 相关工作</td>
</tr>
<tr>
<td style="text-align:left">:apple: (苹果)</td>
<td style="text-align:left"><code>:apple:</code></td>
<td style="text-align:left">修复 macOS 下的问题</td>
</tr>
<tr>
<td style="text-align:left">:penguin: (企鹅)</td>
<td style="text-align:left"><code>:penguin:</code></td>
<td style="text-align:left">修复 Linux 下的问题</td>
</tr>
<tr>
<td style="text-align:left">:checkered_flag: (旗帜)</td>
<td style="text-align:left"><code>:checked_flag:</code></td>
<td style="text-align:left">修复 Windows 下的问题</td>
</tr>
</tbody>
</table>
<h2 id="美化-git-bash"><a href="#美化-git-bash" class="headerlink" title="美化 git bash"></a>美化 git bash</h2><p><a href="http://blog.csdn.net/weixin_37272286/article/details/78016277" target="_blank" rel="noopener">参考</a><br>vi  .minttyrc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BoldAsFont=-1</span><br><span class="line">Font=YaHei Consolas Hybrid</span><br><span class="line">FontHeight=10</span><br><span class="line"></span><br><span class="line">ForegroundColour=131,148,150</span><br><span class="line">BackgroundColour=0,43,54</span><br><span class="line">CursorColour=220,50,47</span><br><span class="line"></span><br><span class="line">Black=7,54,66</span><br><span class="line">BoldBlack=0,43,54</span><br><span class="line">Red=220,50,47</span><br><span class="line">BoldRed=203,75,22</span><br><span class="line">Green=133,153,0</span><br><span class="line">BoldGreen=88,110,117</span><br><span class="line">Yellow=181,137,0</span><br><span class="line">BoldYellow=101,123,131</span><br><span class="line">Blue=38,139,210</span><br><span class="line">BoldBlue=131,148,150</span><br><span class="line">Magenta=211,54,130</span><br><span class="line">BoldMagenta=108,113,196</span><br><span class="line">Cyan=42,161,152</span><br><span class="line">BoldCyan=147,161,161</span><br><span class="line">White=238,232,213</span><br><span class="line">BoldWhite=253,246,227</span><br></pre></td></tr></table></figure>
<h2 id="git客户端推荐"><a href="#git客户端推荐" class="headerlink" title="git客户端推荐"></a>git客户端推荐</h2><ul>
<li><a href="https://www.gitkraken.com/" target="_blank" rel="noopener">GitKraken</a></li>
<li><a href="https://git-fork.com/home" target="_blank" rel="noopener">Fork</a></li>
</ul>
<h2 id="奇淫技巧"><a href="#奇淫技巧" class="headerlink" title="奇淫技巧"></a>奇淫技巧</h2><p>以下内容转自<a href="https://github.com/521xueweihan/git-tips" target="_blank" rel="noopener">Git的奇技淫巧</a></p>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li><a href="#展示帮助信息">展示帮助信息</a></li>
<li><a href="#回到远程仓库的状态">回到远程仓库的状态</a></li>
<li><a href="#重设第一个-commit">重设第一个commit</a></li>
<li><a href="#展示工作区和暂存区的不同">展示工作区和暂存区的不同</a></li>
<li><a href="#展示暂存区和最近版本的不同">展示暂存区和最近版本的不同</a></li>
<li><a href="#展示暂存区工作区和最近版本的不同">展示暂存区、工作区和最近版本的不同</a></li>
<li><a href="#快速切换分支上一个分支">快速切换分支上一个分支</a></li>
<li><a href="#删除已经合并到-master-的分支">删除已经合并到 master 的分支</a></li>
<li><a href="#展示本地分支关联远程仓库的情况">展示本地分支关联远程仓库的情况</a></li>
<li><a href="#关联远程分支">关联远程分支</a></li>
<li><a href="#列出所有远程分支">列出所有远程分支</a></li>
<li><a href="#列出本地和远程分支">列出本地和远程分支</a></li>
<li><a href="#创建并切换到本地分支">创建并切换到本地分支</a></li>
<li><a href="#从远程分支中创建并切换到本地分支">从远程分支中创建并切换到本地分支</a></li>
<li><a href="#删除本地分支">删除本地分支</a></li>
<li><a href="#删除远程分支">删除远程分支</a></li>
<li><a href="#重命名本地分支">重命名本地分支</a></li>
<li><a href="#查看标签">查看标签</a></li>
<li><a href="#查看标签详细信息">查看标签详细信息</a></li>
<li><a href="#本地创建标签">本地创建标签</a></li>
<li><a href="#推送标签到远程仓库">推送标签到远程仓库</a></li>
<li><a href="#删除本地标签">删除本地标签</a></li>
<li><a href="#删除远程标签">删除远程标签</a></li>
<li><a href="#切回到某个标签">切回到某个标签</a></li>
<li><a href="#放弃工作区的修改">放弃工作区的修改</a></li>
<li><a href="#恢复删除的文件">恢复删除的文件</a></li>
<li><a href="#以新增一个-commit-的方式还原某一个-commit-的修改">以新增一个 commit 的方式还原某一个 commit 的修改</a></li>
<li><a href="#回到某个-commit-的状态并删除后面的-commit">回到某个 commit 的状态，并删除后面的 commit</a></li>
<li><a href="#修改上一个-commit-的描述">修改上一个 commit 的描述</a></li>
<li><a href="#查看-commit-历史">查看 commit 历史</a></li>
<li><a href="#显示本地更新过-head-的-git-命令记录">显示本地更新过 HEAD 的 git 命令记录</a></li>
<li><a href="#修改作者名">修改作者名</a></li>
<li><a href="#修改远程仓库的-url">修改远程仓库的 url</a></li>
<li><a href="#增加远程仓库">增加远程仓库</a></li>
<li><a href="#列出所有远程仓库">列出所有远程仓库</a></li>
<li><a href="#查看两个星期内的改动">查看两个星期内的改动</a></li>
<li><a href="#把-A-分支的某一个-commit-放到-B-分支上">把 A 分支的某一个 commit，放到 B 分支上</a></li>
<li><a href="#给-git-命令起别名">给 git 命令起别名</a></li>
<li><a href="#存储当前的修改但不用提交-commit">存储当前的修改，但不用提交 commit</a></li>
<li><a href="#保存当前状态包括-untracked-的文件">保存当前状态，包括 untracked 的文件</a></li>
<li><a href="#展示所有-stashes">展示所有 stashes</a></li>
<li><a href="#回到某个-stash-的状态">回到某个 stash 的状态</a></li>
<li><a href="#回到最后一个-stash-的状态并删除这个-stash">回到最后一个 stash 的状态，并删除这个 stash</a></li>
<li><a href="#删除所有的-stash">删除所有的 stash</a></li>
<li><a href="#从-stash-中拿出某个文件的修改">从 stash 中拿出某个文件的修改</a></li>
<li><a href="#展示所有-tracked-的文件">展示所有 tracked 的文件</a></li>
<li><a href="#展示所有-untracked-的文件">展示所有 untracked 的文件</a></li>
<li><a href="#展示所有忽略的文件">展示所有忽略的文件</a></li>
<li><a href="#强制删除-untracked-的文件">强制删除 untracked 的文件</a></li>
<li><a href="#强制删除-untracked-的目录">强制删除 untracked 的目录</a></li>
<li><a href="#展示简化的-commit-历史">展示简化的 commit 历史</a></li>
<li><a href="#查看某段代码是谁写的">查看某段代码是谁写的</a></li>
<li><a href="#把某一个分支到导出成一个文件">把某一个分支到导出成一个文件</a></li>
<li><a href="#从包中导入分支">从包中导入分支</a></li>
<li><a href="#执行-rebase-之前自动-stash">执行 rebase 之前自动 stash</a></li>
<li><a href="#从远程仓库根据-ID-拉下某一状态-到本地分支">从远程仓库根据 ID，拉下某一状态，到本地分支</a></li>
<li><a href="#详细展示一行中的修改">详细展示一行中的修改</a></li>
<li><a href="#清除-gitignore-文件中记录的文件">清除 <code>.gitignore</code> 文件中记录的文件</a></li>
<li><a href="#展示所有-alias-和-configs">展示所有 alias 和 configs</a></li>
<li><a href="#展示忽略的文件">展示忽略的文件</a></li>
<li><a href="#commit-历史中显示-Branch1-有的但是-Branch2-没有-commit">commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</a></li>
<li><a href="#在-commit-log-中显示-GPG-签名">在 commit log 中显示 GPG 签名</a></li>
<li><a href="#删除全局设置">删除全局设置</a></li>
<li><a href="#新建并切换到新分支上同时这个分支没有任何-commit">新建并切换到新分支上，同时这个分支没有任何 commit</a></li>
<li><a href="#展示任意分支某一文件的内容">展示任意分支某一文件的内容</a></li>
<li><a href="#clone-下来指定的单一分支">clone 下来指定的单一分支</a></li>
<li><a href="#忽略某个文件的改动">忽略某个文件的改动</a></li>
<li><a href="#忽略文件的权限变化">忽略文件的权限变化</a></li>
<li><a href="#以最后提交的顺序列出所有-Git-分支">以最后提交的顺序列出所有 Git 分支</a></li>
<li><a href="#在-commit-log-中查找相关内容">在 commit log 中查找相关内容</a></li>
<li><a href="#把暂存区的指定-file-放到工作区中">把暂存区的指定 file 放到工作区中</a></li>
<li><a href="#强制推送">强制推送</a></li>
<li><a href="#一图详解">一图详解</a></li>
<li><a href="#联系我">联系我</a></li>
</ul>
<h4 id="展示帮助信息"><a href="#展示帮助信息" class="headerlink" title="展示帮助信息"></a>展示帮助信息</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">help</span> -g</span><br></pre></td></tr></table></figure>
<p>The command output as below:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The common Git guides are:</span><br><span class="line">   attributes          Defining attributes per path</span><br><span class="line">   cli                 Git command-line interface and conventions</span><br><span class="line">   core-tutorial       A Git core tutorial for developers</span><br><span class="line">   cvs-migration       Git for CVS users</span><br><span class="line">   diffcore            Tweaking diff output</span><br><span class="line">   everyday            A useful minimum set of commands for Everyday Git</span><br><span class="line">   glossary            A Git Glossary</span><br><span class="line">   hooks               Hooks used by Git</span><br><span class="line">   ignore              Specifies intentionally untracked files to ignore</span><br><span class="line">   modules             Defining submodule properties</span><br><span class="line">   namespaces          Git namespaces</span><br><span class="line">   repository-layout    Git Repository Layout</span><br><span class="line">   revisions           Specifying revisions and ranges for Git</span><br><span class="line">   tutorial            A tutorial introduction to Git</span><br><span class="line">   tutorial-2          A tutorial introduction to Git: part two</span><br><span class="line">   workflows           An overview of recommended workflows with Git</span><br><span class="line"></span><br><span class="line">&apos;git help -a&apos; and &apos;git help -g&apos; list available subcommands and some concept guides. See &apos;git help &lt;command&gt;&apos; or &apos;git help &lt;concept&gt;&apos; to read about a specific subcommand or concept.</span><br></pre></td></tr></table></figure>
<h4 id="回到远程仓库的状态"><a href="#回到远程仓库的状态" class="headerlink" title="回到远程仓库的状态"></a>回到远程仓库的状态</h4><p>抛弃本地所有的修改，回到远程仓库的状态。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git fetch --all &amp;&amp; git reset --hard origin/master</span><br></pre></td></tr></table></figure></p>
<h4 id="重设第一个-commit"><a href="#重设第一个-commit" class="headerlink" title="重设第一个 commit"></a>重设第一个 commit</h4><p>也就是把所有的改动都重新放回工作区，并<strong>清空所有的 commit</strong>，这样就可以重新提交第一个 commit 了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git update-ref -d HEAD</span><br></pre></td></tr></table></figure>
<h4 id="展示工作区和暂存区的不同"><a href="#展示工作区和暂存区的不同" class="headerlink" title="展示工作区和暂存区的不同"></a>展示工作区和暂存区的不同</h4><p>输出<strong>工作区</strong>和<strong>暂存区</strong>的 different (不同)。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>
<p>还可以展示本地仓库中任意两个 commit 之间的文件变动：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff &lt;commit-id&gt; &lt;commit-id&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="展示暂存区和最近版本的不同"><a href="#展示暂存区和最近版本的不同" class="headerlink" title="展示暂存区和最近版本的不同"></a>展示暂存区和最近版本的不同</h4><p>输出<strong>暂存区</strong>和本地最近的版本 (commit) 的 different (不同)。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure></p>
<h4 id="展示暂存区、工作区和最近版本的不同"><a href="#展示暂存区、工作区和最近版本的不同" class="headerlink" title="展示暂存区、工作区和最近版本的不同"></a>展示暂存区、工作区和最近版本的不同</h4><p>输出<strong>工作区</strong>、<strong>暂存区</strong> 和本地最近的版本 (commit) 的 different (不同)。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure>
<h4 id="快速切换分支上一个分支"><a href="#快速切换分支上一个分支" class="headerlink" title="快速切换分支上一个分支"></a>快速切换分支上一个分支</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout -</span><br></pre></td></tr></table></figure>
<h4 id="删除已经合并到-master-的分支"><a href="#删除已经合并到-master-的分支" class="headerlink" title="删除已经合并到 master 的分支"></a>删除已经合并到 master 的分支</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch --merged master | grep -v <span class="string">'^\*\|  master'</span> | xargs -n 1 git branch -d</span><br></pre></td></tr></table></figure>
<h4 id="展示本地分支关联远程仓库的情况"><a href="#展示本地分支关联远程仓库的情况" class="headerlink" title="展示本地分支关联远程仓库的情况"></a>展示本地分支关联远程仓库的情况</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure>
<h4 id="关联远程分支"><a href="#关联远程分支" class="headerlink" title="关联远程分支"></a>关联远程分支</h4><p>关联之后，<code>git branch -vv</code> 就可以展示关联的远程分支名了，同时推送到远程仓库直接：<code>git push</code>，不需要指定远程仓库了。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -u origin/mybranch</span><br></pre></td></tr></table></figure></p>
<p>或者在 push 时加上 <code>-u</code> 参数<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push origin/mybranch -u</span><br></pre></td></tr></table></figure></p>
<h4 id="列出所有远程分支"><a href="#列出所有远程分支" class="headerlink" title="列出所有远程分支"></a>列出所有远程分支</h4><p>-r 参数相当于：remote<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure></p>
<h4 id="列出本地和远程分支"><a href="#列出本地和远程分支" class="headerlink" title="列出本地和远程分支"></a>列出本地和远程分支</h4><p>-a 参数相当于：all<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure></p>
<h4 id="创建并切换到本地分支"><a href="#创建并切换到本地分支" class="headerlink" title="创建并切换到本地分支"></a>创建并切换到本地分支</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>
<h4 id="从远程分支中创建并切换到本地分支"><a href="#从远程分支中创建并切换到本地分支" class="headerlink" title="从远程分支中创建并切换到本地分支"></a>从远程分支中创建并切换到本地分支</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt;</span><br></pre></td></tr></table></figure>
<h4 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -d &lt;<span class="built_in">local</span>-branchname&gt;</span><br></pre></td></tr></table></figure>
<h4 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push origin --delete &lt;remote-branchname&gt;</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push origin :&lt;remote-branchname&gt;</span><br></pre></td></tr></table></figure>
<h4 id="重命名本地分支"><a href="#重命名本地分支" class="headerlink" title="重命名本地分支"></a>重命名本地分支</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -m &lt;new-branch-name&gt;</span><br></pre></td></tr></table></figure>
<h4 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>
<p>展示当前分支的最近的 tag</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git describe --tags --abbrev=0</span><br></pre></td></tr></table></figure>
<h4 id="查看标签详细信息"><a href="#查看标签详细信息" class="headerlink" title="查看标签详细信息"></a>查看标签详细信息</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git tag -ln</span><br></pre></td></tr></table></figure>
<h4 id="本地创建标签"><a href="#本地创建标签" class="headerlink" title="本地创建标签"></a>本地创建标签</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git tag &lt;version-number&gt;</span><br></pre></td></tr></table></figure>
<p>默认 tag 是打在最近的一次 commit 上，如果需要指定 commit 打 tag：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git tag -a &lt;version-number&gt; -m <span class="string">"v1.0 发布(描述)"</span> &lt;commit-id&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="推送标签到远程仓库"><a href="#推送标签到远程仓库" class="headerlink" title="推送标签到远程仓库"></a>推送标签到远程仓库</h4><p>首先要保证本地创建好了标签才可以推送标签到远程仓库：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push origin &lt;<span class="built_in">local</span>-version-number&gt;</span><br></pre></td></tr></table></figure>
<p>一次性推送所有标签，同步到远程仓库：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>
<h4 id="删除本地标签"><a href="#删除本地标签" class="headerlink" title="删除本地标签"></a>删除本地标签</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git tag -d &lt;tag-name&gt;</span><br></pre></td></tr></table></figure>
<h4 id="删除远程标签"><a href="#删除远程标签" class="headerlink" title="删除远程标签"></a>删除远程标签</h4><p>删除远程标签需要<strong>先删除本地标签</strong>，再执行下面的命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push origin :refs/tags/&lt;tag-name&gt;</span><br></pre></td></tr></table></figure>
<h4 id="切回到某个标签"><a href="#切回到某个标签" class="headerlink" title="切回到某个标签"></a>切回到某个标签</h4><p>一般上线之前都会打 tag，就是为了防止上线后出现问题，方便快速回退到上一版本。下面的命令是回到某一标签下的状态：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout -b branch_name tag_name</span><br></pre></td></tr></table></figure></p>
<h4 id="放弃工作区的修改"><a href="#放弃工作区的修改" class="headerlink" title="放弃工作区的修改"></a>放弃工作区的修改</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout &lt;file-name&gt;</span><br></pre></td></tr></table></figure>
<p>放弃所有修改：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure></p>
<h4 id="恢复删除的文件"><a href="#恢复删除的文件" class="headerlink" title="恢复删除的文件"></a>恢复删除的文件</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git rev-list -n 1 HEAD -- &lt;file_path&gt; <span class="comment">#得到 deleting_commit</span></span><br><span class="line"></span><br><span class="line">git checkout &lt;deleting_commit&gt;^ -- &lt;file_path&gt; <span class="comment">#回到删除文件 deleting_commit 之前的状态</span></span><br></pre></td></tr></table></figure>
<h4 id="以新增一个-commit-的方式还原某一个-commit-的修改"><a href="#以新增一个-commit-的方式还原某一个-commit-的修改" class="headerlink" title="以新增一个 commit 的方式还原某一个 commit 的修改"></a>以新增一个 commit 的方式还原某一个 commit 的修改</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git revert &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>
<h4 id="回到某个-commit-的状态，并删除后面的-commit"><a href="#回到某个-commit-的状态，并删除后面的-commit" class="headerlink" title="回到某个 commit 的状态，并删除后面的 commit"></a>回到某个 commit 的状态，并删除后面的 commit</h4><p>和 revert 的区别：reset 命令会抹去某个 commit id 之后的所有 commit</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git reset &lt;commit-id&gt;  <span class="comment">#默认就是-mixed参数。</span></span><br><span class="line"></span><br><span class="line">git reset –mixed HEAD^  <span class="comment">#回退至上个版本，它将重置HEAD到另外一个commit,并且重置暂存区以便和HEAD相匹配，但是也到此为止。工作区不会被更改。</span></span><br><span class="line"></span><br><span class="line">git reset –soft HEAD~3  <span class="comment">#回退至三个版本之前，只回退了commit的信息，暂存区和工作区与回退之前保持一致。如果还要提交，直接commit即可  </span></span><br><span class="line"></span><br><span class="line">git reset –hard &lt;commit-id&gt;  <span class="comment">#彻底回退到指定commit-id的状态，暂存区和工作区也会变为指定commit-id版本的内容</span></span><br></pre></td></tr></table></figure>
<h4 id="修改上一个-commit-的描述"><a href="#修改上一个-commit-的描述" class="headerlink" title="修改上一个 commit 的描述"></a>修改上一个 commit 的描述</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>
<h4 id="查看-commit-历史"><a href="#查看-commit-历史" class="headerlink" title="查看 commit 历史"></a>查看 commit 历史</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<h4 id="查看某段代码是谁写的"><a href="#查看某段代码是谁写的" class="headerlink" title="查看某段代码是谁写的"></a>查看某段代码是谁写的</h4><p>blame 的意思为‘责怪’，你懂的。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git blame &lt;file-name&gt;</span><br></pre></td></tr></table></figure>
<h4 id="显示本地更新过-HEAD-的-git-命令记录"><a href="#显示本地更新过-HEAD-的-git-命令记录" class="headerlink" title="显示本地更新过 HEAD 的 git 命令记录"></a>显示本地更新过 HEAD 的 git 命令记录</h4><p>每次更新了 HEAD 的 git 命令比如 commint、amend、cherry-pick、reset、revert 等都会被记录下来（不限分支），就像 shell 的 history 一样。<br>这样你可以 reset 到任何一次更新了 HEAD 的操作之后，而不仅仅是回到当前分支下的某个 commit 之后的状态。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>
<h4 id="修改作者名"><a href="#修改作者名" class="headerlink" title="修改作者名"></a>修改作者名</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git commit --amend --author=<span class="string">'Author Name &lt;email@address.com&gt;'</span></span><br></pre></td></tr></table></figure>
<h4 id="修改远程仓库的-url"><a href="#修改远程仓库的-url" class="headerlink" title="修改远程仓库的 url"></a>修改远程仓库的 url</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">set</span>-url origin &lt;URL&gt;</span><br></pre></td></tr></table></figure>
<h4 id="增加远程仓库"><a href="#增加远程仓库" class="headerlink" title="增加远程仓库"></a>增加远程仓库</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote add origin &lt;remote-url&gt;</span><br></pre></td></tr></table></figure>
<h4 id="列出所有远程仓库"><a href="#列出所有远程仓库" class="headerlink" title="列出所有远程仓库"></a>列出所有远程仓库</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure>
<h4 id="查看两个星期内的改动"><a href="#查看两个星期内的改动" class="headerlink" title="查看两个星期内的改动"></a>查看两个星期内的改动</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git whatchanged --since=<span class="string">'2 weeks ago'</span></span><br></pre></td></tr></table></figure>
<h4 id="把-A-分支的某一个-commit，放到-B-分支上"><a href="#把-A-分支的某一个-commit，放到-B-分支上" class="headerlink" title="把 A 分支的某一个 commit，放到 B 分支上"></a>把 A 分支的某一个 commit，放到 B 分支上</h4><p>这个过程需要 <code>cherry-pick</code> 命令，<a href="http://sg552.iteye.com/blog/1300713#bc2367928" target="_blank" rel="noopener">参考</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout &lt;branch-name&gt; &amp;&amp; git cherry-pick &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>
<h4 id="给-git-命令起别名"><a href="#给-git-命令起别名" class="headerlink" title="给 git 命令起别名"></a>给 git 命令起别名</h4><p>简化命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global <span class="built_in">alias</span>.&lt;handle&gt; &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"></span><br><span class="line">比如：git status 改成 git st，这样可以简化命令</span><br><span class="line"></span><br><span class="line">git config --global alias.st status</span><br></pre></td></tr></table></figure>
<h4 id="存储当前的修改，但不用提交-commit"><a href="#存储当前的修改，但不用提交-commit" class="headerlink" title="存储当前的修改，但不用提交 commit"></a>存储当前的修改，但不用提交 commit</h4><p>详解可以参考<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000" target="_blank" rel="noopener">廖雪峰老师的 git 教程</a><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure></p>
<h4 id="保存当前状态，包括-untracked-的文件"><a href="#保存当前状态，包括-untracked-的文件" class="headerlink" title="保存当前状态，包括 untracked 的文件"></a>保存当前状态，包括 untracked 的文件</h4><p>untracked 文件：新建的文件<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash -u</span><br></pre></td></tr></table></figure></p>
<h4 id="展示所有-stashes"><a href="#展示所有-stashes" class="headerlink" title="展示所有 stashes"></a>展示所有 stashes</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure>
<h4 id="回到某个-stash-的状态"><a href="#回到某个-stash-的状态" class="headerlink" title="回到某个 stash 的状态"></a>回到某个 stash 的状态</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash apply &lt;stash@&#123;n&#125;&gt;</span><br></pre></td></tr></table></figure>
<h4 id="回到最后一个-stash-的状态，并删除这个-stash"><a href="#回到最后一个-stash-的状态，并删除这个-stash" class="headerlink" title="回到最后一个 stash 的状态，并删除这个 stash"></a>回到最后一个 stash 的状态，并删除这个 stash</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure>
<h4 id="删除所有的-stash"><a href="#删除所有的-stash" class="headerlink" title="删除所有的 stash"></a>删除所有的 stash</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash clear</span><br></pre></td></tr></table></figure>
<h4 id="从-stash-中拿出某个文件的修改"><a href="#从-stash-中拿出某个文件的修改" class="headerlink" title="从 stash 中拿出某个文件的修改"></a>从 stash 中拿出某个文件的修改</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout &lt;stash@&#123;n&#125;&gt; -- &lt;file-path&gt;</span><br></pre></td></tr></table></figure>
<h4 id="展示所有-tracked-的文件"><a href="#展示所有-tracked-的文件" class="headerlink" title="展示所有 tracked 的文件"></a>展示所有 tracked 的文件</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git ls-files -t</span><br></pre></td></tr></table></figure>
<h4 id="展示所有-untracked-的文件"><a href="#展示所有-untracked-的文件" class="headerlink" title="展示所有 untracked 的文件"></a>展示所有 untracked 的文件</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git ls-files --others</span><br></pre></td></tr></table></figure>
<h4 id="展示所有忽略的文件"><a href="#展示所有忽略的文件" class="headerlink" title="展示所有忽略的文件"></a>展示所有忽略的文件</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git ls-files --others -i --exclude-standard</span><br></pre></td></tr></table></figure>
<h4 id="强制删除-untracked-的文件"><a href="#强制删除-untracked-的文件" class="headerlink" title="强制删除 untracked 的文件"></a>强制删除 untracked 的文件</h4><p>可以用来删除新建的文件。如果不指定文件文件名，则清空所有工作的 untracked 文件。<code>clean</code> 命令，<strong>注意两点</strong>：</p>
<ol>
<li>clean 后，删除的文件无法找回</li>
<li>不会影响 tracked 的文件的改动，只会删除 untracked 的文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git clean &lt;file-name&gt; -f</span><br></pre></td></tr></table></figure>
<h4 id="强制删除-untracked-的目录"><a href="#强制删除-untracked-的目录" class="headerlink" title="强制删除 untracked 的目录"></a>强制删除 untracked 的目录</h4><p>可以用来删除新建的目录，<strong>注意</strong>:这个命令也可以用来删除 untracked 的文件。详情见上一条</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git clean &lt;directory-name&gt; -df</span><br></pre></td></tr></table></figure>
<h4 id="展示简化的-commit-历史"><a href="#展示简化的-commit-历史" class="headerlink" title="展示简化的 commit 历史"></a>展示简化的 commit 历史</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=oneline --graph --decorate --all</span><br></pre></td></tr></table></figure>
<h4 id="把某一个分支到导出成一个文件"><a href="#把某一个分支到导出成一个文件" class="headerlink" title="把某一个分支到导出成一个文件"></a>把某一个分支到导出成一个文件</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git bundle create &lt;file&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>
<h4 id="从包中导入分支"><a href="#从包中导入分支" class="headerlink" title="从包中导入分支"></a>从包中导入分支</h4><p>新建一个分支，分支内容就是上面 <code>git bundle create</code> 命令导出的内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> repo.bundle &lt;repo-dir&gt; -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>
<h4 id="执行-rebase-之前自动-stash"><a href="#执行-rebase-之前自动-stash" class="headerlink" title="执行 rebase 之前自动 stash"></a>执行 rebase 之前自动 stash</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git rebase --autostash</span><br></pre></td></tr></table></figure>
<h4 id="从远程仓库根据-ID，拉下某一状态，到本地分支"><a href="#从远程仓库根据-ID，拉下某一状态，到本地分支" class="headerlink" title="从远程仓库根据 ID，拉下某一状态，到本地分支"></a>从远程仓库根据 ID，拉下某一状态，到本地分支</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git fetch origin pull/&lt;id&gt;/head:&lt;branch-name&gt;</span><br></pre></td></tr></table></figure>
<h4 id="详细展示一行中的修改"><a href="#详细展示一行中的修改" class="headerlink" title="详细展示一行中的修改"></a>详细展示一行中的修改</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff --word-diff</span><br></pre></td></tr></table></figure>
<h4 id="清除-gitignore-文件中记录的文件"><a href="#清除-gitignore-文件中记录的文件" class="headerlink" title="清除 gitignore 文件中记录的文件"></a>清除 gitignore 文件中记录的文件</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git clean -X -f</span><br></pre></td></tr></table></figure>
<h4 id="展示所有-alias-和-configs"><a href="#展示所有-alias-和-configs" class="headerlink" title="展示所有 alias 和 configs"></a>展示所有 alias 和 configs</h4><p><strong>注意：</strong> config 分为：当前目录（local）和全局（golbal）的 config，默认为当前目录的 config</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> --list (当前目录)</span><br><span class="line">git config --global --list (全局)</span><br></pre></td></tr></table></figure>
<h4 id="展示忽略的文件"><a href="#展示忽略的文件" class="headerlink" title="展示忽略的文件"></a>展示忽略的文件</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git status --ignored</span><br></pre></td></tr></table></figure>
<h4 id="commit-历史中显示-Branch1-有的，但是-Branch2-没有-commit"><a href="#commit-历史中显示-Branch1-有的，但是-Branch2-没有-commit" class="headerlink" title="commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit"></a>commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> Branch1 ^Branch2</span><br></pre></td></tr></table></figure>
<h4 id="在-commit-log-中显示-GPG-签名"><a href="#在-commit-log-中显示-GPG-签名" class="headerlink" title="在 commit log 中显示 GPG 签名"></a>在 commit log 中显示 GPG 签名</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --show-signature</span><br></pre></td></tr></table></figure>
<h4 id="删除全局设置"><a href="#删除全局设置" class="headerlink" title="删除全局设置"></a>删除全局设置</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> &lt;entry-name&gt;</span><br></pre></td></tr></table></figure>
<h4 id="新建并切换到新分支上，同时这个分支没有任何-commit"><a href="#新建并切换到新分支上，同时这个分支没有任何-commit" class="headerlink" title="新建并切换到新分支上，同时这个分支没有任何 commit"></a>新建并切换到新分支上，同时这个分支没有任何 commit</h4><p>相当于保存修改，但是重写 commit 历史</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout --orphan &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>
<h4 id="展示任意分支某一文件的内容"><a href="#展示任意分支某一文件的内容" class="headerlink" title="展示任意分支某一文件的内容"></a>展示任意分支某一文件的内容</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git show &lt;branch-name&gt;:&lt;file-name&gt;</span><br></pre></td></tr></table></figure>
<h4 id="clone-下来指定的单一分支"><a href="#clone-下来指定的单一分支" class="headerlink" title="clone 下来指定的单一分支"></a>clone 下来指定的单一分支</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b &lt;branch-name&gt; --single-branch https://github.com/user/repo.git</span><br></pre></td></tr></table></figure>
<h4 id="忽略某个文件的改动"><a href="#忽略某个文件的改动" class="headerlink" title="忽略某个文件的改动"></a>忽略某个文件的改动</h4><p>关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git update-index --assume-unchanged path/to/file</span><br></pre></td></tr></table></figure>
<p>恢复 track 指定文件的改动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git update-index --no-assume-unchanged path/to/file</span><br></pre></td></tr></table></figure>
<h4 id="忽略文件的权限变化"><a href="#忽略文件的权限变化" class="headerlink" title="忽略文件的权限变化"></a>忽略文件的权限变化</h4><p>不再将文件的权限变化视作改动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config core.fileMode <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h4 id="以最后提交的顺序列出所有-Git-分支"><a href="#以最后提交的顺序列出所有-Git-分支" class="headerlink" title="以最后提交的顺序列出所有 Git 分支"></a>以最后提交的顺序列出所有 Git 分支</h4><p>最新的放在最上面</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">for</span>-each-ref --sort=-committerdate --format=<span class="string">'%(refname:short)'</span> refs/heads/</span><br></pre></td></tr></table></figure>
<h4 id="在-commit-log-中查找相关内容"><a href="#在-commit-log-中查找相关内容" class="headerlink" title="在 commit log 中查找相关内容"></a>在 commit log 中查找相关内容</h4><p>通过 grep 查找，given-text：所需要查找的字段</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --all --grep=<span class="string">'&lt;given-text&gt;'</span></span><br></pre></td></tr></table></figure>
<h4 id="把暂存区的指定-file-放到工作区中"><a href="#把暂存区的指定-file-放到工作区中" class="headerlink" title="把暂存区的指定 file 放到工作区中"></a>把暂存区的指定 file 放到工作区中</h4><p>不添加参数，默认是 <code>-mixed</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git reset &lt;file-name&gt;</span><br></pre></td></tr></table></figure>
<h4 id="强制推送"><a href="#强制推送" class="headerlink" title="强制推送"></a>强制推送</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push -f &lt;remote-name&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 返回目录</a></strong></p>
<h2 id="高级教程"><a href="#高级教程" class="headerlink" title="高级教程"></a>高级教程</h2><ul>
<li><a href="https://github.com/airuikun/blog/issues/5" target="_blank" rel="noopener">小蝌蚪传记：git时光穿梭机</a></li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Kodi使用技巧</title>
    <url>/archives/23494.html</url>
    <content><![CDATA[<h2 id="观看tvaddonsco"><a href="#观看tvaddonsco" class="headerlink" title="观看tvaddonsco"></a>观看tvaddonsco</h2><ol>
<li>添加媒体源：<a href="http://fusion.tvaddons.co" target="_blank" rel="noopener">http://fusion.tvaddons.co</a> 命名为fusion</li>
<li>安装插件-&gt;视频插件-&gt;从zip安装-&gt;fusion-&gt;kodi-repos-&gt;English-&gt;找到repository.xbmchub-3.3.3.zip 安装</li>
<li>安装插件-&gt;视屏插件-&gt;从仓库安装-&gt;找到Indigo安装</li>
<li>打开indigo插件，会自动安装一些东西，待安装完毕，点击Addon Installe,安装Git Browser</li>
<li>打开Git Browser 选择 Search by GitHub Username-&gt;new search-&gt;搜索tvaddonsco</li>
<li>安装kodiadult-gitbrowser.installer-1.0.0.zip 安装成功后会提示重启</li>
</ol>
<p>​                                                                                    </p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>IaaS,PaaS,SaaS 的区别</title>
    <url>/archives/8156ce4d.html</url>
    <content><![CDATA[<p>越来越多的软件，开始采用云服务。<br>云服务只是一个统称，可以分成三大类。</p>
<ul>
<li>IaaS：基础设施服务，Infrastructure-as-a-service</li>
<li>PaaS：平台服务，Platform-as-a-service</li>
<li>SaaS：软件服务，Software-as-a-service</li>
</ul>
<h2 id="IaaS"><a href="#IaaS" class="headerlink" title="IaaS"></a>IaaS</h2><p>Infrastructure as a Service 即基础设施即服务<br>提供给消费者的服务是对所有计算基础设施的利用，包括处理CPU、内存、存储、网络和其它基本的计算资源，用户能够部署和运行任意软件，包括操作系统和应用程序。消费者不管理或控制任何云计算基础设施，但能控制操作系统的选择、存储空间、部署的应用，也有可能获得有限制的网络组件（例如路由器、，防火墙，、负载均衡器等）的控制。</p>
<h2 id="PaaS"><a href="#PaaS" class="headerlink" title="PaaS"></a>PaaS</h2><p>Platform as a Service 即平台即服务<br>提供给消费者的服务是把客户采用提供的开发语言和工具（例如Java，python, .Net等）开发的或收购的应用程序部署到供应商的云计算基础设施上去。客户不需要管理或控制底层的云基础设施，包括网络、服务器、操作系统、存储等，但客户能控制部署的应用程序，也可能控制运行应用程序的托管环境配置。</p>
<h2 id="SaaS"><a href="#SaaS" class="headerlink" title="SaaS"></a>SaaS</h2><p>Software as a Service 即软件即服务<br>随着互联网技术的发展和应用软件的成熟， 在21世纪开始兴起的一种完全创新的软件应用模式。它与“on-demand software”（按需软件)，the application service provider(ASP，应用服务提供商)，hosted software(托管软件)所具有相似的含义。它是一种通过Internet提供软件的模式，厂商将应用软件统一部署在自己的服务器上，客户可以根据自己实际需求，通过互联网向厂商定购所需的应用软件服务，按定购的服务多少和时间长短向厂商支付费用，并通过互联网获得厂商提供的服务。用户不用再购买软件，而改用向提供商租用基于Web的软件，来管理企业经营活动，且无需对软件进行维护，服务提供商会全权管理和维护软件，软件厂商在向客户提供互联网应用的同时，也提供软件的离线操作和本地数据存储，让用户随时随地都可以使用其定购的软件和服务。对于许多小型企业来说，SaaS是采用先进技术的最好途径，它消除了企业购买、构建和维护基础设施和应用程序的需要。</p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 笔记</title>
    <url>/archives/13448.html</url>
    <content><![CDATA[<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><h3 id="方式1-修改profile"><a href="#方式1-修改profile" class="headerlink" title="方式1 修改profile"></a>方式1 修改<code>profile</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure>
<p>在文档末尾添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:[路径]</span><br></pre></td></tr></table></figure>
<p>配置生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="方式2-建立软链接"><a href="#方式2-建立软链接" class="headerlink" title="方式2 建立软链接"></a>方式2 建立软链接</h3><p>例如配置node的环境变量，node在<code>/usr/local/src/nodejs/bin</code>中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s /usr/local/src/nodejs/bin/node  /usr/local/bin/node</span><br></pre></td></tr></table></figure>
<h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><h2 id="配置定时任务"><a href="#配置定时任务" class="headerlink" title="配置定时任务"></a>配置定时任务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>
<h3 id="服务操作命令"><a href="#服务操作命令" class="headerlink" title="服务操作命令"></a>服务操作命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service crond start //启动服务  </span><br><span class="line">service crond stop //关闭服务  </span><br><span class="line">service crond restart //重启服务  </span><br><span class="line">service crond reload //重新载入配置</span><br></pre></td></tr></table></figure>
<h3 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/rsyslog.d/50-default.conf</span><br><span class="line">service rsyslog restart</span><br></pre></td></tr></table></figure>
<h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">more /var/log/cron.log</span><br></pre></td></tr></table></figure>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>环境变量问题</li>
<li>权限问题</li>
<li>定时执行的sh脚本的环境变量问题</li>
</ul>
<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li><code>docker exec -it centos1 bash</code> 进入指定镜像</li>
<li><code>docker ps -all</code> 展示镜像</li>
<li><code>docker commit b5926410fe60 herong/centos7-ssh</code> 将容器保存为镜像 b5926410fe60 为容器id herong/centos7-ssh为镜像名</li>
<li><code>docker run -p 9003:22 -p 9100-9150:9100-9150 --name=&quot;ububtu-alan&quot; -d alan/ubuntu /usr/sbin/sshd -D</code> 运行</li>
</ul>
<h3 id="新建镜像"><a href="#新建镜像" class="headerlink" title="新建镜像"></a>新建镜像</h3><p><code>vi Dockerfile</code></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#制定node镜像的版本</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">10.15</span>.<span class="number">3</span></span><br><span class="line"><span class="comment">#声明作者</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> alan</span><br><span class="line"><span class="comment">#移动当前目录下面的文件到app目录下</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /app/</span></span><br><span class="line"><span class="comment">#进入到app目录下面，类似cd</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="comment">#安装依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm i yarn</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yarn</span></span><br><span class="line"><span class="comment">#对外暴露的端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9100</span></span><br><span class="line"><span class="comment">#程序启动脚本</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"yarn"</span>, <span class="string">"docker"</span>]</span></span><br></pre></td></tr></table></figure>
<p><code>docker build -t [文件夹名称] .</code></p>
<h2 id="pm2"><a href="#pm2" class="headerlink" title="pm2"></a>pm2</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install pm2 -g</span><br></pre></td></tr></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pm2 start npm --name project01 -- start</span><br></pre></td></tr></table></figure>
<h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pm2 list               # 显示所有进程状态</span><br><span class="line">pm2 monit              # 监视所有进程</span><br><span class="line">pm2 logs               # 显示所有进程日志</span><br><span class="line">pm2 stop all           # 停止所有进程</span><br><span class="line">pm2 restart all        # 重启所有进程</span><br><span class="line">pm2 reload all         # 0 秒停机重载进程 (用于 NETWORKED 进程)</span><br><span class="line">pm2 stop 0             # 停止指定的进程</span><br><span class="line">pm2 restart 0          # 重启指定的进程</span><br><span class="line">pm2 startup            # 产生 init 脚本 保持进程活着</span><br><span class="line">pm2 web                # 运行健壮的 computer API endpoint (http://localhost:9615)</span><br><span class="line">pm2 delete 0           # 杀死指定的进程</span><br><span class="line">pm2 delete all         # 杀死全部进程</span><br><span class="line">pm2 startup            # 开机启动</span><br><span class="line">pm2 save               # 保存当前应用列表</span><br></pre></td></tr></table></figure>
<h2 id="后台执行程序"><a href="#后台执行程序" class="headerlink" title="后台执行程序"></a>后台执行程序</h2><p>例如执行pso<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup  ./pso &gt; pso.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看任务，返回任务编号n和进程号</span><br><span class="line">jobs -l</span><br><span class="line"></span><br><span class="line"># 挂起当前任务</span><br><span class="line">ctrl+z</span><br><span class="line"></span><br><span class="line"># 将编号为n的任务转后台运行</span><br><span class="line">bg %n</span><br><span class="line"></span><br><span class="line"># 将编号为n的任务转前台运行</span><br><span class="line"># fg %n</span><br><span class="line"></span><br><span class="line"># 结束当前任务</span><br><span class="line">ctrl+c </span><br><span class="line"></span><br><span class="line"># 设置程序父进程为1，不中断</span><br><span class="line">setsid ./test.sh &amp;</span><br><span class="line"></span><br><span class="line"># 查看指定任务详细</span><br><span class="line">ps -ef | grep test</span><br><span class="line"></span><br><span class="line"># 显示当窗口父进程ID</span><br><span class="line">echo $$</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Pthon练习题(二)</title>
    <url>/archives/ffa5ee66.html</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>做为 Apple Store App 独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用 Python 如何生成 200 个激活码（或者优惠券）<br><a id="more"></a></p>
<h3 id="UUID简介"><a href="#UUID简介" class="headerlink" title="UUID简介"></a>UUID简介</h3><p>UUID是128位的全局唯一标识符，通常由32字节的字符串表示。它可以保证时间和空间的唯一性。</p>
<ul>
<li>uuid1:基于时间戳</li>
<li>uuid2:基于分布式计算环境DCE（python中没有此函数）</li>
<li>uuid3:基于名字的MD5散列值</li>
<li>uuid4:基于随机数</li>
<li>uuid5:基于名字的SHA-1散列值<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateCode</span><span class="params">(num)</span>:</span></span><br><span class="line">    list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        list.append(uuid.uuid1())</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    codes = generateCode(<span class="number">200</span>)</span><br><span class="line">    code_file = open(<span class="string">'gencodes.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">    <span class="keyword">for</span> code <span class="keyword">in</span> codes:</span><br><span class="line">        code_file.write(str(code) + <span class="string">"\n"</span>)</span><br><span class="line">    code_file.close()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="http://oqdzx28cd.bkt.clouddn.com/18-1-8/697127.jpg" alt></p>
]]></content>
      <categories>
        <category>Pthon练习题</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pthon练习题(三)</title>
    <url>/archives/8156ce4d.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>将 0001 题生成的 200 个激活码（或者优惠券）保存到 <strong>MySQL</strong> 关系型数据库中。<br><a id="more"></a></p>
<h2 id="MySql学习"><a href="#MySql学习" class="headerlink" title="MySql学习"></a>MySql学习</h2><p><a href="http://www.runoob.com/mysql/mysql-tutorial.html" target="_blank" rel="noopener">MySql教程|菜鸟教程</a></p>
<h2 id="安装MySql"><a href="#安装MySql" class="headerlink" title="安装MySql"></a>安装MySql</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install mysql</span><br><span class="line">yum install mysql-devel</span><br><span class="line">yum install mariadb-server mariadb</span><br></pre></td></tr></table></figure>
<h3 id="启动MySql"><a href="#启动MySql" class="headerlink" title="启动MySql"></a>启动MySql</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start mariadb.service</span><br></pre></td></tr></table></figure>
<h3 id="登陆MySql"><a href="#登陆MySql" class="headerlink" title="登陆MySql"></a>登陆MySql</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<h3 id="授权远程连接"><a href="#授权远程连接" class="headerlink" title="授权远程连接"></a>授权远程连接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">Enter password:</span><br><span class="line">MariaDB [(none)]&gt;</span><br><span class="line">grant all privileges on *.* to &apos;root&apos;@&apos;192.168.*.*&apos; identified by &apos;root&apos; with grant option;</span><br></pre></td></tr></table></figure>
<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>
<h2 id="新建表"><a href="#新建表" class="headerlink" title="新建表"></a>新建表</h2><p>使用Navicat for MySql 连接数据库，并在数据库<code>text</code>新建表<code>uuid_table</code>,效果如下：<br><img src="http://oqdzx28cd.bkt.clouddn.com/18-1-9/21750120.jpg" alt></p>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h3 id="安装pymysql3"><a href="#安装pymysql3" class="headerlink" title="安装pymysql3"></a>安装pymysql3</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install pymysql3</span><br></pre></td></tr></table></figure>
<h3 id="demo-py"><a href="#demo-py" class="headerlink" title="demo.py"></a>demo.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertCode</span><span class="params">(codes)</span>:</span></span><br><span class="line">	db = pymysql.connect(host=<span class="string">'192.168.10.130'</span>, port=<span class="number">3306</span>, user=<span class="string">'root'</span>, passwd=<span class="string">'123456'</span>,db=<span class="string">'test'</span>)</span><br><span class="line">	cursor = db.cursor()</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		<span class="keyword">for</span> code <span class="keyword">in</span> codes:</span><br><span class="line">			sql = <span class="string">"INSERT INTO uuid_table(uuid,datestr) VALUES ('%s', '%s')"</span> % (code, <span class="string">'20180109'</span>)</span><br><span class="line">			cursor.execute(sql)</span><br><span class="line">			db.commit()</span><br><span class="line">	<span class="keyword">except</span>:</span><br><span class="line">		db.rollback()</span><br><span class="line">	db.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateCode</span><span class="params">(num)</span>:</span></span><br><span class="line">	list = []</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">		list.append(uuid.uuid1())</span><br><span class="line">	<span class="keyword">return</span> list</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">	codes = generateCode(<span class="number">200</span>)</span><br><span class="line">	insertCode(codes)</span><br></pre></td></tr></table></figure>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="http://oqdzx28cd.bkt.clouddn.com/18-1-9/95571570.jpg" alt></p>
]]></content>
      <categories>
        <category>Pthon练习题</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pthon练习题(四)</title>
    <url>/archives/7b152142.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>任一个英文的纯文本文件，统计其中的单词出现的个数。<br><a id="more"></a></p>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_words_byInput</span><span class="params">()</span>:</span></span><br><span class="line">    temp = open(<span class="string">"page.text"</span>)</span><br><span class="line">    myStr = temp.read()</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"请输入你想要查找的单词："</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            key_word = raw_input(<span class="string">"&gt;&gt;"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">"输入有误，请重新输入："</span>)</span><br><span class="line">    num = myStr.upper().count(key_word.upper())</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"搜索结果：\n&gt;&gt;有%d个【%s】"</span> % (num, key_word))</span><br><span class="line">    temp.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    count_words_byInput()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Pthon练习题</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pthon练习题(一)</title>
    <url>/archives/50947504.html</url>
    <content><![CDATA[<p>2018年1月3日</p>
<p>Python 版本 ：3.6.3</p>
<p><a href="https://github.com/AlanLang/show-me-the-code" target="_blank" rel="noopener">题目地址</a> | <a href="https://www.jianshu.com/p/05e3973a77ed" target="_blank" rel="noopener">参考地址</a> | <a href="https://github.com/AlanLang/show-me-the-code/tree/master/0000" target="_blank" rel="noopener">源码地址</a></p>
<a id="more"></a>
<hr>
<h3 id="使用-Python图像处理库：Pillow"><a href="#使用-Python图像处理库：Pillow" class="headerlink" title="使用 Python图像处理库：Pillow"></a>使用 Python图像处理库：Pillow</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install pillow</span><br></pre></td></tr></table></figure>
<h3 id="新建文件demo-py"><a href="#新建文件demo-py" class="headerlink" title="新建文件demo.py"></a>新建文件demo.py</h3><p>输入：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入Pillow</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont, ImageColor</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_num</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="comment"># 创建一个Draw对象</span></span><br><span class="line">    draw = ImageDraw.Draw(img)</span><br><span class="line">    <span class="comment"># 创建一个Fount</span></span><br><span class="line">    myfont = ImageFont.truetype(<span class="string">'C:/windows/fonts/Arial.ttf'</span>, size=<span class="number">40</span>)</span><br><span class="line">    fillcolor = ImageColor.colormap.get(<span class="string">'red'</span>)</span><br><span class="line">    width, height = img.size</span><br><span class="line">    draw.text((width<span class="number">-30</span>, <span class="number">0</span>), <span class="string">'4'</span>, font=myfont, fill=fillcolor)</span><br><span class="line">    img.save(<span class="string">'result.jpg'</span>, <span class="string">'jpeg'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    image = Image.open(<span class="string">'test.jpg'</span>)</span><br><span class="line">    add_num(image)</span><br></pre></td></tr></table></figure></p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="http://oqdzx28cd.bkt.clouddn.com/18-1-3/6525123.jpg" alt></p>
]]></content>
      <categories>
        <category>Pthon练习题</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>React 使用browserHistory项目访问404问题</title>
    <url>/archives/45936.html</url>
    <content><![CDATA[<blockquote>
<p>最近项目里面用到了React但是发布到iis站点之后,路由地址 刷新访问直接404错误。查阅资料之后发现是iis缺少配置URL重写 的问题导致的。下面我们来图形化配置，简单的配置下IIS</p>
</blockquote>
<a id="more"></a>
<h2 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h2><p>安装<a href="https://www.iis.net/downloads/microsoft/url-rewrite" target="_blank" rel="noopener">url-rewrite</a><br>项目根目录新建<code>web.config</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;system.webServer&gt;</span><br><span class="line">  &lt;rewrite&gt;</span><br><span class="line">    &lt;rules&gt;</span><br><span class="line">      &lt;rule name=&quot;React Routes&quot; stopProcessing=&quot;true&quot;&gt;</span><br><span class="line">        &lt;match url=&quot;.*&quot; /&gt;</span><br><span class="line">        &lt;conditions logicalGrouping=&quot;MatchAll&quot;&gt;</span><br><span class="line">          &lt;add input=&quot;&#123;REQUEST_FILENAME&#125;&quot; matchType=&quot;IsFile&quot; negate=&quot;true&quot; /&gt;</span><br><span class="line">          &lt;add input=&quot;&#123;REQUEST_FILENAME&#125;&quot; matchType=&quot;IsDirectory&quot; negate=&quot;true&quot; /&gt;</span><br><span class="line">          &lt;add input=&quot;&#123;REQUEST_URI&#125;&quot; pattern=&quot;^/(api)&quot; negate=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/conditions&gt;</span><br><span class="line">        &lt;action type=&quot;Rewrite&quot; url=&quot;/&quot; /&gt;</span><br><span class="line">      &lt;/rule&gt;</span><br><span class="line">    &lt;/rules&gt;</span><br><span class="line">  &lt;/rewrite&gt;</span><br><span class="line">&lt;/system.webServer&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>
<p>如果二级目录刷新后显示空白，手动把打包好的index.html中js引用路径 <code>./</code> 的 <code>.</code> 去掉。</p>
<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  server_name react.yahui.wang</span><br><span class="line">  listen 80;</span><br><span class="line"></span><br><span class="line">  root /wwwroot/ReactDemo/dist;</span><br><span class="line">  index index.html;</span><br><span class="line">  location / &#123;</span><br><span class="line">      try_files $uri /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>找到conf目录下的web.xml文件，然后加上一句话让他定位回来<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;error-page&gt;</span><br><span class="line">    &lt;error-code&gt;404&lt;/error-code&gt;</span><br><span class="line">    &lt;location&gt;/index.html&lt;/location&gt;</span><br><span class="line">&lt;/error-page&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><p>开启rewrite</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo a2enmod rewrite</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/apache2/sites-enabled/000-default.config</span><br></pre></td></tr></table></figure>
<p>将其中的 AllowOverride None 修改为 AllowOverride All。</p>
<p>网站根目录新建<code>.htaccess</code>文件配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">  RewriteEngine On</span><br><span class="line">  RewriteBase /</span><br><span class="line">  RewriteRule ^index\.html$ - [L]</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-l</span><br><span class="line">  RewriteRule . /index.html [L]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>SqlServer快速注释</title>
    <url>/archives/a240876f.html</url>
    <content><![CDATA[<p><code>insert-sqlserver-notes.exe</code> 是为SqlServer数据库批量添加表注释和列注释的小工具，源码请看<a href="https://github.com/AlanLang/insert-sqlserver-notes" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p>
<h2 id="1-配置yml类型的配置文件-格式如下："><a href="#1-配置yml类型的配置文件-格式如下：" class="headerlink" title="1. 配置yml类型的配置文件, 格式如下："></a>1. 配置<code>yml</code>类型的配置文件, 格式如下：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">table: </span><br><span class="line">  - name: SysUser</span><br><span class="line">    note: 系统用户</span><br><span class="line">    column:</span><br><span class="line">      - name: UserID</span><br><span class="line">        note: 用户表自增ID</span><br><span class="line">      - name: UserCode</span><br><span class="line">        note: 用户代码</span><br><span class="line">      - name: UserName</span><br><span class="line">        note: 用户名称</span><br><span class="line">      - name: UserPwd</span><br><span class="line">        note: 用户密码</span><br><span class="line">      - name: UserMail</span><br><span class="line">        note: 用户邮件</span><br><span class="line">      - name: UserCreate</span><br><span class="line">        note: 条目生成时间</span><br><span class="line">      - name: UserModified</span><br><span class="line">        note: 条目修改时间</span><br><span class="line"></span><br><span class="line">  - name: SysMenu</span><br><span class="line">    note: 系统菜单</span><br><span class="line">    column: </span><br><span class="line">      - name: MenuID</span><br><span class="line">        note: 系统菜单自增ID</span><br><span class="line">      - name: MenuName</span><br><span class="line">        note: 菜单名称</span><br><span class="line">      - name: MenuDesc</span><br><span class="line">        note: 菜单描述</span><br></pre></td></tr></table></figure>
<h2 id="2-打开-insert-sqlserver-notes-exe"><a href="#2-打开-insert-sqlserver-notes-exe" class="headerlink" title="2. 打开 insert-sqlserver-notes.exe"></a>2. 打开 <code>insert-sqlserver-notes.exe</code></h2><p>将配置的yml文件导出到系统中</p>
<h2 id="3-系统解析配置文件，生成sql语句。效果如下："><a href="#3-系统解析配置文件，生成sql语句。效果如下：" class="headerlink" title="3. 系统解析配置文件，生成sql语句。效果如下："></a>3. 系统解析配置文件，生成sql语句。效果如下：</h2><p><img src="http://oqdzx28cd.bkt.clouddn.com/18-1-18/1440409.jpg" alt></p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>URL schemes collecting</title>
    <url>/archives/a15bf862.html</url>
    <content><![CDATA[<p><strong>收集 iOS 常用 App 的 URL schemes，可用于各种启动器，或者添加到桌面。</strong><br><a id="more"></a></p>
<h4 id="1-微信"><a href="#1-微信" class="headerlink" title="1. 微信"></a>1. 微信</h4><table>
<thead>
<tr>
<th>功能</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr>
<td>扫一扫</td>
<td><del>weixin://dl/scan</del></td>
</tr>
<tr>
<td>扫一扫（免内置浏览器跳转）</td>
<td>weixin://scanqrcode </td>
</tr>
<tr>
<td>朋友圈</td>
<td>weixin://dl/moments</td>
</tr>
<tr>
<td>收藏</td>
<td>weixin://dl/favorites</td>
</tr>
<tr>
<td>我的二维码</td>
<td>weixin://dl/myQRcode</td>
</tr>
</tbody>
</table>
<h4 id="2-支付宝"><a href="#2-支付宝" class="headerlink" title="2. 支付宝"></a>2. 支付宝</h4><table>
<thead>
<tr>
<th>功能</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr>
<td>扫一扫</td>
<td>alipayqr://platformapi/startapp?saId=10000007</td>
</tr>
<tr>
<td>付款码</td>
<td>alipayqr://platformapi/startapp?saId=20000056</td>
</tr>
<tr>
<td>红包</td>
<td>alipay://platformapi/startapp?saId=88886666</td>
</tr>
<tr>
<td>转账</td>
<td>alipayqr://platformapi/startapp?sald=09999988</td>
</tr>
<tr>
<td>发起聊天</td>
<td>alipay://platformapi/startapp?appId=20000254&amp;actionType=createGroup</td>
</tr>
</tbody>
</table>
<h4 id="3-网易云音乐"><a href="#3-网易云音乐" class="headerlink" title="3. 网易云音乐"></a>3. 网易云音乐</h4><table>
<thead>
<tr>
<th>功能</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr>
<td>听歌识曲</td>
<td>orpheuswidget://recognize</td>
</tr>
</tbody>
</table>
<h4 id="4-Surge"><a href="#4-Surge" class="headerlink" title="4. Surge"></a>4. Surge</h4><table>
<thead>
<tr>
<th>功能</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr>
<td>启动</td>
<td>surge:///start[?autoclose=true]</td>
</tr>
<tr>
<td>停止</td>
<td>surge:///stop[?autoclose=true]</td>
</tr>
<tr>
<td>切换状态</td>
<td>surge:///toggle[?autoclose=true]</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title>React+Electron 从搭建到发布</title>
    <url>/archives/12273.html</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>安装<code>node</code>环境<br><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/</a><br>安装过程不做赘述。</p>
<p>安装<code>react</code>脚手架<code>create-react-app</code>和<a href="https://github.com/yarnpkg/yarn/" target="_blank" rel="noopener">yarn</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g create-react-app yarn</span><br></pre></td></tr></table></figure></p>
<p>创建<code>React</code>项目<br>脚手架安装完成后，执行以下命令，创建一个名为<code>react-electron-demo</code>的应用<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create-react-app react-electron-demo</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="引入Electron"><a href="#引入Electron" class="headerlink" title="引入Electron"></a>引入<code>Electron</code></h2><p>安装 <code>electron</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd react-electron-demo</span><br><span class="line">yarn add electron --dev</span><br><span class="line">yarn add electron-is-dev</span><br></pre></td></tr></table></figure></p>
<p>根目录新建入口文件<code>main.js</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const electron = require(&apos;electron&apos;);</span><br><span class="line">const app = electron.app;</span><br><span class="line">const BrowserWindow = electron.BrowserWindow;</span><br><span class="line"></span><br><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">const url = require(&apos;url&apos;);</span><br><span class="line">const isDev = require(&apos;electron-is-dev&apos;);</span><br><span class="line"></span><br><span class="line">let mainWindow;</span><br><span class="line"></span><br><span class="line">function createWindow() &#123;</span><br><span class="line">  mainWindow = new BrowserWindow(&#123;width: 900, height: 680&#125;);</span><br><span class="line">  mainWindow.loadURL(isDev ? &apos;http://localhost:3000&apos; : `file://$&#123;path.join(__dirname, &apos;./build/index.html&apos;)&#125;`);</span><br><span class="line">  mainWindow.on(&apos;closed&apos;, () =&gt; mainWindow = null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.on(&apos;ready&apos;, createWindow);</span><br><span class="line"></span><br><span class="line">app.on(&apos;window-all-closed&apos;, () =&gt; &#123;</span><br><span class="line">  if (process.platform !== &apos;darwin&apos;) &#123;</span><br><span class="line">    app.quit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.on(&apos;activate&apos;, () =&gt; &#123;</span><br><span class="line">  if (mainWindow === null) &#123;</span><br><span class="line">    createWindow();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>将入口文件加入到package.json中<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;main&quot;: &quot;main.js&quot;,</span><br><span class="line">&quot;homepage&quot;: &quot;.&quot;,</span><br></pre></td></tr></table></figure></p>
<p>添加 <code>npm scripts</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;electron&quot;: &quot;electron .&quot;,</span><br></pre></td></tr></table></figure></p>
<p>启动<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn start</span><br><span class="line">// 新建一个终端</span><br><span class="line">yarn electron</span><br></pre></td></tr></table></figure></p>
<p>启动后效果如图：<br><img src="http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/19-1-9/18305917.jpg" alt></p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="使用concurrently并行运行"><a href="#使用concurrently并行运行" class="headerlink" title="使用concurrently并行运行"></a>使用<code>concurrently</code>并行运行</h3><p>同时开两个终端有点繁琐，所以可以借助工具<code>concurrently</code>。<br>安装<code>concurrently</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add concurrently --dev</span><br></pre></td></tr></table></figure></p>
<p>添加 <code>npm scripts</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;concurrently \&quot;yarn start\&quot; \&quot;electron .\&quot;&quot;</span><br></pre></td></tr></table></figure></p>
<h3 id="禁止启动时在浏览器中打开"><a href="#禁止启动时在浏览器中打开" class="headerlink" title="禁止启动时在浏览器中打开"></a>禁止启动时在浏览器中打开</h3><p>根目录新建文件<code>.env</code>，输入：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BROWSER=none</span><br></pre></td></tr></table></figure></p>
<p>保存后重新启动即可</p>
<h3 id="优化启动顺序"><a href="#优化启动顺序" class="headerlink" title="优化启动顺序"></a>优化启动顺序</h3><p>由于electron启动需要先等react启动完毕，所以可以使用工具<code>wait-on</code>。<br>安装<code>wait-on</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add wait-on --dev</span><br></pre></td></tr></table></figure></p>
<p>修改<code>npm scripts</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;concurrently \&quot;yarn start\&quot; \&quot;wait-on http://localhost:3000 &amp;&amp; electron .\&quot;&quot;</span><br></pre></td></tr></table></figure></p>
<h2 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h2><p>安装<code>electron-builder</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add electron-builder --dev</span><br></pre></td></tr></table></figure></p>
<p>在<code>package.json</code>中添加<code>build</code>字段<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;build&quot;: &#123;</span><br><span class="line">  &quot;appId&quot;: &quot;com.example.electron-cra&quot;,</span><br><span class="line">  &quot;files&quot;: [</span><br><span class="line">    &quot;build/**/*&quot;,</span><br><span class="line">    &quot;node_modules/**/*&quot;,</span><br><span class="line">    &quot;public/**/*&quot;,</span><br><span class="line">    &quot;main.js&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;directories&quot;:&#123;</span><br><span class="line">    &quot;buildResources&quot;: &quot;assets&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>添加 <code>npm scripts</code><br>以windows平台为例，其他平台请参考<code>electron-builder</code>文档<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;package&quot;: &quot;yarn build &amp;&amp; electron-builder -c.extraMetadata.main=main.js --win --x64&quot;</span><br></pre></td></tr></table></figure></p>
<p>打包<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn package</span><br></pre></td></tr></table></figure></p>
<p>打包后的文件会在<code>dist</code>目录中</p>
<p><img src="http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/19-1-9/95561492.jpg" alt></p>
<p>此教程的源码已托管在github：<br><a href="https://github.com/AlanLang/react-electron-demo" target="_blank" rel="noopener">https://github.com/AlanLang/react-electron-demo</a></p>
<p>谢谢您的阅读，如发现本文有任何不妥，欢迎指正，不胜感激。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCore安装黑苹果</title>
    <url>/archives/11242.html</url>
    <content><![CDATA[<p><a href="https://github.com/AlanLang/ASRock-Z390-Phantom-Gaming-ITXac-OpenCore-Hackintosh" target="_blank" rel="noopener">EFI文件</a></p>
<h2 id="配置清单"><a href="#配置清单" class="headerlink" title="配置清单"></a>配置清单</h2><table>
<thead>
<tr>
<th>硬件配置</th>
<th>选型</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU</td>
<td>i7 9700k</td>
</tr>
<tr>
<td>主板</td>
<td>华擎 Z390 Phantom Gaming-ITX AC</td>
</tr>
<tr>
<td>显卡</td>
<td>蓝宝石RX560 + 显卡延长线</td>
</tr>
<tr>
<td>内存条</td>
<td>芝奇幻光戟16G * 1</td>
</tr>
<tr>
<td>硬盘</td>
<td>WD/西部数据 SN550系列500G SSD</td>
</tr>
<tr>
<td>电源</td>
<td>全汉MS600 铜牌全模组+定制线</td>
</tr>
<tr>
<td>无线网卡</td>
<td>博通DW1560 (可以直接替换主板上的)</td>
</tr>
<tr>
<td>散热</td>
<td>乔思伯240水冷</td>
</tr>
<tr>
<td>机箱</td>
<td>定制的A4机箱</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="BIOS设置"><a href="#BIOS设置" class="headerlink" title="BIOS设置"></a>BIOS设置</h2><p>禁用如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">英文</th>
<th style="text-align:left">中文</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Fast Boot</td>
<td style="text-align:left">快速启动</td>
</tr>
<tr>
<td style="text-align:left">CFG Lock (MSR 0xE2 write protection)</td>
<td style="text-align:left">CFG 锁 (MSR 0xE2 写入保护)</td>
</tr>
<tr>
<td style="text-align:left">vt-d</td>
<td style="text-align:left">vt-d</td>
</tr>
</tbody>
</table>
<p>启用如下:</p>
<table>
<thead>
<tr>
<th style="text-align:left">英文</th>
<th style="text-align:left">中文</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Above 4G decoding</td>
<td style="text-align:left">大于 4G 地址空间解码</td>
</tr>
<tr>
<td style="text-align:left">CSM</td>
<td style="text-align:left">兼容性支持模块</td>
</tr>
<tr>
<td style="text-align:left">IGPU</td>
<td style="text-align:left">IGPU多监视器</td>
</tr>
<tr>
<td style="text-align:left">XHCI Hand-off</td>
<td style="text-align:left">XHCI Hand-off</td>
</tr>
</tbody>
</table>
<p>注意 关于CSM看网上教程都说要关闭它，但是我关闭了之后有一定概率引导失败，所以就把它打开了</p>
<h2 id="引导盘制作"><a href="#引导盘制作" class="headerlink" title="引导盘制作"></a>引导盘制作</h2><p>下载<a href="https://github.com/corpnewt/gibMacOS" target="_blank" rel="noopener">gibMacOS</a></p>
<h3 id="下载恢复镜像"><a href="#下载恢复镜像" class="headerlink" title="下载恢复镜像"></a>下载恢复镜像</h3><p>win下运行<code>gibMacOS.bat</code>， mac下运行<code>gibMacOS.command</code>, mac下如果遇到权限问题，需要先执行一下下面命令:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x /Users/alan/Downloads/gibMacOS-master/gibMacOS.command</span><br></pre></td></tr></table></figure></p>
<p>此时会展示一个列表<br><img src="https://alan-picpack.oss-cn-hangzhou.aliyuncs.com/uPic/20210420/20210420111333@2x.png" alt="20210420111333@2x"><br>按<code>r</code>回车进入恢复模式<br>然后输入需要下载的制定版本的恢复镜像序号并回车完成下载。（需要选择后面带FULL Install的）<br>下载完成之后关闭窗口即可。</p>
<h3 id="制作U盘"><a href="#制作U盘" class="headerlink" title="制作U盘"></a>制作U盘</h3><p>win下运行<code>MakeInstall.bat</code>，mac下运行<code>BuildmacOSInstallApp.command</code><br>此时会列出当前连接的USB，输入前面的序号+O（如：1O）并回车完成OpenCore的安装。<br>选择y继续<br>输入上一步的恢复镜像的文件地址，回车开始制作。</p>
<h2 id="硬盘分区"><a href="#硬盘分区" class="headerlink" title="硬盘分区"></a>硬盘分区</h2><h3 id="删除所有分区"><a href="#删除所有分区" class="headerlink" title="删除所有分区"></a>删除所有分区</h3><p>进入PE打开磁盘工具<br>删除所有分区并保存更改</p>
<h3 id="格式化硬盘"><a href="#格式化硬盘" class="headerlink" title="格式化硬盘"></a>格式化硬盘</h3><p>进入MAC磁盘工具<br>点抹掉，选择APFS，名称随意(MacOS)<br>然后开始安装系统。</p>
<h2 id="config-plist"><a href="#config-plist" class="headerlink" title="config.plist"></a>config.plist</h2><h3 id="ACPI"><a href="#ACPI" class="headerlink" title="ACPI"></a>ACPI</h3><h4 id="ACPI—–Add"><a href="#ACPI—–Add" class="headerlink" title="ACPI—–Add"></a>ACPI—–Add</h4><p>根据ACPI目录下所用的SSDT填写</p>
<h4 id="ACPI—–Block"><a href="#ACPI—–Block" class="headerlink" title="ACPI—–Block"></a>ACPI—–Block</h4><p>不用填</p>
<h4 id="ACPI—–Patch"><a href="#ACPI—–Patch" class="headerlink" title="ACPI—–Patch"></a>ACPI—–Patch</h4><p>一些热补丁</p>
<h4 id="ACPI—–Quirks"><a href="#ACPI—–Quirks" class="headerlink" title="ACPI—–Quirks"></a>ACPI—–Quirks</h4><table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">值</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">FadtEnableReset</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">一些旧的主板需要对FADT进行标记来激活电脑的开机和关机功能，这里我们不许要启动它（如果你遇到关机变重启，可以打开试试，我们之后也会在nvram中将这个问题修复）</td>
</tr>
<tr>
<td style="text-align:left">NormalizeHeaders</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">清理ACPI头，一些主板的ACPI表需要打开这个修复启动。但如果补丁点亮系统，请试试NO</td>
</tr>
<tr>
<td style="text-align:left">RebaseRegions</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">换硬件、升级BIOS等对硬件的操作会对ACPI表产生影响，一般不需要打开，若发现卡PCI Configuraion Begin，请尝试打开</td>
</tr>
<tr>
<td style="text-align:left">ResetHwSig</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">休眠相关项，台式机不需要</td>
</tr>
<tr>
<td style="text-align:left">ResetLogoStatus</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">重置登录状态</td>
</tr>
</tbody>
</table>
<h3 id="Booter"><a href="#Booter" class="headerlink" title="Booter"></a>Booter</h3><p>内存相关选项设置。</p>
<h4 id="Booter–MmioWhitelist"><a href="#Booter–MmioWhitelist" class="headerlink" title="Booter–MmioWhitelist"></a>Booter–MmioWhitelist</h4><p>默认的第一项是为Haswell芯片提供的内存寻址修复，如果此类芯片碰到内存相关问题，请开启它(enable选择yes)。<br>默认第二项是开机卡PCI Configuration这里。ACPI、PCI device同时释放到内存时发生0x1000内存地址被占用而卡在PCI Configration.如果碰到此类问题，请开启它。</p>
<h4 id="Boot—Quirks"><a href="#Boot—Quirks" class="headerlink" title="Boot—Quirks"></a>Boot—Quirks</h4><table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">值</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">AvoidRuntimeDefrag</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">true</td>
<td style="text-align:left">修复UEFI运行时服务，例如日期，时间，NVRAM，电源控制等</td>
</tr>
<tr>
<td style="text-align:left">DevirtualiseMmio</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">减少被盗的内存占用空间，扩展值的选项</td>
</tr>
<tr>
<td style="text-align:left">DisableSingleUser</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">禁止单用户模式</td>
</tr>
<tr>
<td style="text-align:left">DisableVariableWrite</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">非原生NVRAM主板需要模拟nvram.plist进而写入variable值，因此要禁止此项来防止其他程序对nvram进行写入, 如果你的主板支持原生nvram，请选择NO</td>
</tr>
<tr>
<td style="text-align:left">DiscardHibernateMap</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">重用原始的休眠内存映射</td>
</tr>
<tr>
<td style="text-align:left">EnableSafeModeSlide</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">true</td>
<td style="text-align:left">允许在安全模式下使用Slide 值</td>
</tr>
<tr>
<td style="text-align:left">EnableWriteUnprotector</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">true</td>
<td style="text-align:left">在执行期间从CR0寄存器中删除写保护</td>
</tr>
<tr>
<td style="text-align:left">ForceExitBootServices</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">这个选项是让那些非常老旧的主板也能使用内存寻址</td>
</tr>
<tr>
<td style="text-align:left">ProtectMemoryRegions</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">官方对此项目的解释与AvoidRuntimeDefrag类似，除非你明白这是什么，不然选择NO，其实我也不明白。</td>
</tr>
<tr>
<td style="text-align:left">ProtectSecureBoot</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">fasle</td>
<td style="text-align:left">保护uefi安全启动被写入</td>
</tr>
<tr>
<td style="text-align:left">ProtectUefiServices</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">fasle</td>
<td style="text-align:left">保护UEFI服务不被固件覆盖，主要与VM，Icelake和较新的Coffeelake系统有关， 一般Z490的主板需要</td>
</tr>
<tr>
<td style="text-align:left">ProvideCustomSlide</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">true</td>
<td style="text-align:left">如果Slide 值存在冲突，则此选项将强制macOS使用伪随机值。接收调试消息的人需要Only N/256 slide values are usable!</td>
</tr>
<tr>
<td style="text-align:left">RebuildAppleMemoryMap</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">生成与macOS兼容的内存映射</td>
</tr>
<tr>
<td style="text-align:left">SetupVirtualMap</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">true</td>
<td style="text-align:left">将SetVirtualAddresses调用修复为虚拟地址，在Skylake和更高版本上不需要</td>
</tr>
<tr>
<td style="text-align:left">SignalAppleOS</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">促使硬件始终启动macOS，主要是对带有dGPU的MacBook Pro有利，因为启动Windows不允许使用iGPU</td>
</tr>
<tr>
<td style="text-align:left">SyncRuntimePermissions</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">true</td>
<td style="text-align:left">修正硬件在注入内存时无法注入权限的问题</td>
</tr>
</tbody>
</table>
<h3 id="DeviceProperties"><a href="#DeviceProperties" class="headerlink" title="DeviceProperties"></a>DeviceProperties</h3><p>此项是用来注入你的设备的，主要是显卡和声卡两部分。</p>
<h4 id="DeviceProperties–Add"><a href="#DeviceProperties–Add" class="headerlink" title="DeviceProperties–Add"></a>DeviceProperties–Add</h4><p>根据实际情况填写声卡和显卡的信息</p>
<h4 id="DeviceProperties–Block"><a href="#DeviceProperties–Block" class="headerlink" title="DeviceProperties–Block"></a>DeviceProperties–Block</h4><p>这里是禁用一些设备的，我们按默认就行了，不需要任何修改。</p>
<h3 id="Kernel"><a href="#Kernel" class="headerlink" title="Kernel"></a>Kernel</h3><p>这里是内核相关选项。</p>
<h4 id="Kernel–Add"><a href="#Kernel–Add" class="headerlink" title="Kernel–Add"></a>Kernel–Add</h4><p>根据Kexts目录下的文件进行填写</p>
<h4 id="Kernel–Block"><a href="#Kernel–Block" class="headerlink" title="Kernel–Block"></a>Kernel–Block</h4><p>不需要</p>
<h4 id="Kernel–Emulate"><a href="#Kernel–Emulate" class="headerlink" title="Kernel–Emulate"></a>Kernel–Emulate</h4><p>此选项帮助Ivy Bridge 和一些不受支持的CPU加载电源管理的，所有选项按默认即可。</p>
<h4 id="Kernel–Patch"><a href="#Kernel–Patch" class="headerlink" title="Kernel–Patch"></a>Kernel–Patch</h4><p>保持默认</p>
<h4 id="Kernel–Quirks"><a href="#Kernel–Quirks" class="headerlink" title="Kernel–Quirks"></a>Kernel–Quirks</h4><p>内核相关的快捷选项</p>
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">值</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">AppleCpuPmCfgLock</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">仅当无法在BIOS中禁用CFG-Lock时才需要</td>
</tr>
<tr>
<td style="text-align:left">AppleXcpmCfgLock</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">仅当无法在BIOS中禁用CFG-Lock时才需要+1</td>
</tr>
<tr>
<td style="text-align:left">AppleXcpmExtraMsrs</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">禁用奔腾和许多Xeon等不受支持的CPU所需的多个MSR访问。</td>
</tr>
<tr>
<td style="text-align:left">AppleXcpmForceBoost</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">强制使用最大性能，仅建议在持续负载的设备或媒体计算机上启用。</td>
</tr>
<tr>
<td style="text-align:left">CustomSMBIOSGuid</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">对UpdateSMBIOSMode自定义模式执行GUID修补。通常与戴尔笔记本电脑有关</td>
</tr>
<tr>
<td style="text-align:left">DisableIoMapper</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">禁用vt-d，我们在BIOS里已经禁用vt-d了，这里我们选择NO就行了。</td>
</tr>
<tr>
<td style="text-align:left">DisableRtcChecksum</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">越过两条rtc检查(0x58及0x59)</td>
</tr>
<tr>
<td style="text-align:left">DummyPowerManagement</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">替代NullCpuPowerManagement.kext，如果你使用此补丁，请删除并选择yes。我们一般选择no。</td>
</tr>
<tr>
<td style="text-align:left">ExternalDiskIcons</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">修复苹果系统把内部硬盘识别为外置硬盘时（黄色图标的硬盘）开启，我们一般选择NO。</td>
</tr>
<tr>
<td style="text-align:left">IncreasePciBarSize</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">解决卡PCI configuration，如果碰到请选择yes, 我们选择no。</td>
</tr>
<tr>
<td style="text-align:left">LapicKernelPanic</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">适用于HP笔记本的内核奔溃选项</td>
</tr>
<tr>
<td style="text-align:left">PanicNoKextDump</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">防止kext出错打报告而让我们看不到真正的panic原因，这个随便选，我选择NO。</td>
</tr>
<tr>
<td style="text-align:left">PowerTimeoutKernelPanic</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">10.15系统中存在一些设备自身的电源管理无法让系统进入睡眠而超时，导致内核奔溃，如果有这个问题请选择YES。</td>
</tr>
<tr>
<td style="text-align:left">ThirdPartyDrives</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">开启Sata类SSD的trim功能，我没有sata类的ssd，我选择NO。</td>
</tr>
<tr>
<td style="text-align:left">XhciPortLimit</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">true</td>
<td style="text-align:left">解除15个端口限制</td>
</tr>
</tbody>
</table>
<h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><p>开机引导类的设置。</p>
<h4 id="Misc–BlessOverride"><a href="#Misc–BlessOverride" class="headerlink" title="Misc–BlessOverride"></a>Misc–BlessOverride</h4><p>这个选项是帮助我们寻找一些不寻常的EFI位置的，除非你有这种情况，不然我们不需要填写任何东西。</p>
<h4 id="Misc–Boot"><a href="#Misc–Boot" class="headerlink" title="Misc–Boot"></a>Misc–Boot</h4><table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">值</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ConsoleAttributes</td>
<td style="text-align:left">Number</td>
<td style="text-align:left">0</td>
<td style="text-align:left">开机选择界面的颜色</td>
</tr>
<tr>
<td style="text-align:left">HibernateMode</td>
<td style="text-align:left">String</td>
<td style="text-align:left">None</td>
<td style="text-align:left">检测休眠模式。</td>
</tr>
<tr>
<td style="text-align:left">HideAuxiliary</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">在开机选择画面隐藏一些辅助项目，比如recovery盘，clean NVRAM等。一般我们选择NO。</td>
</tr>
<tr>
<td style="text-align:left">HideSelf</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">YES</td>
<td style="text-align:left">隐藏自身的EFI引导盘选项</td>
</tr>
<tr>
<td style="text-align:left">PickerAttributes</td>
<td style="text-align:left">Number</td>
<td style="text-align:left">0</td>
<td style="text-align:left">用于设置自定义选择器属性，此处将不介绍</td>
</tr>
<tr>
<td style="text-align:left">PickerAudioAssist</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">No</td>
<td style="text-align:left">用于在选择器中启用VoiceOver之类的支持</td>
</tr>
<tr>
<td style="text-align:left">PickerMode</td>
<td style="text-align:left">String</td>
<td style="text-align:left">Builtin</td>
<td style="text-align:left">设置OpenCore使用内置的选择器</td>
</tr>
<tr>
<td style="text-align:left">PollAppleHotKeys</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">true</td>
<td style="text-align:left">允许您在引导过程中使用Apple的热键</td>
</tr>
<tr>
<td style="text-align:left">ShowPicker</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">true</td>
<td style="text-align:left">是否显示开机启动盘选项</td>
</tr>
<tr>
<td style="text-align:left">TakeoffDelay</td>
<td style="text-align:left">Number</td>
<td style="text-align:left">0</td>
<td style="text-align:left">开机热键延时</td>
</tr>
<tr>
<td style="text-align:left">Timeout</td>
<td style="text-align:left">Number</td>
<td style="text-align:left">5</td>
<td style="text-align:left">倒计时进入指定硬盘</td>
</tr>
</tbody>
</table>
<h4 id="Misc–Debug"><a href="#Misc–Debug" class="headerlink" title="Misc–Debug"></a>Misc–Debug</h4><p>是否开启debug模式，这里我们暂时不需要，全部忽略过。</p>
<h4 id="Misc–Entries"><a href="#Misc–Entries" class="headerlink" title="Misc–Entries"></a>Misc–Entries</h4><p>这里是帮助我们添加一些你希望的引导路径，不用修改。</p>
<h4 id="Misc–Security"><a href="#Misc–Security" class="headerlink" title="Misc–Security"></a>Misc–Security</h4><table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">值</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">AllowNvramReset</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">是否在开机引导项中加入重置nvram缓存功能的选项</td>
</tr>
<tr>
<td style="text-align:left">AllowSetDefault</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">选择yes后即可在开机选择系统页面中通过Ctrl+enter键设置默认启动盘</td>
</tr>
<tr>
<td style="text-align:left">AuthRestart</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">filevault相关项，选择NO。</td>
</tr>
<tr>
<td style="text-align:left">BootProtect</td>
<td style="text-align:left">String</td>
<td style="text-align:left">None</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">ExposeSensitiveData</td>
<td style="text-align:left">Number</td>
<td style="text-align:left">6</td>
<td style="text-align:left">显示更多的调试信息</td>
</tr>
<tr>
<td style="text-align:left">HaltLevel</td>
<td style="text-align:left">Number</td>
<td style="text-align:left">2,147,483,648</td>
<td style="text-align:left">按默认设置即可</td>
</tr>
<tr>
<td style="text-align:left">ScanPolicy</td>
<td style="text-align:left">Number</td>
<td style="text-align:left">11,470,595</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Vault</td>
<td style="text-align:left">String</td>
<td style="text-align:left">Optional</td>
<td style="text-align:left">黑苹果的vault加密方式，我们不需要这个功能，填Optional</td>
</tr>
</tbody>
</table>
<h4 id="Misc–Tools"><a href="#Misc–Tools" class="headerlink" title="Misc–Tools"></a>Misc–Tools</h4><p>这里是加入一些开机时候的工具的。</p>
<h3 id="NVRAM"><a href="#NVRAM" class="headerlink" title="NVRAM"></a>NVRAM</h3><h4 id="NVRAM–Add"><a href="#NVRAM–Add" class="headerlink" title="NVRAM–Add"></a>NVRAM–Add</h4><p>4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14</p>
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">值</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">DefaultBackgroundColor</td>
<td style="text-align:left">Data</td>
<td style="text-align:left">00000000</td>
<td style="text-align:left">默认开机背景色为黑色</td>
</tr>
<tr>
<td style="text-align:left">UIScale</td>
<td style="text-align:left">Data</td>
<td style="text-align:left">01</td>
<td style="text-align:left">01为普通的UI显示模式，02为开启HIDPI的UI显示模式</td>
</tr>
</tbody>
</table>
<p>7C436110-AB2A-4BBB-A880-FE41995C9F82</p>
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">值</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">boot-args</td>
<td style="text-align:left">String</td>
<td style="text-align:left">keepsyms=1 alcid=1 agdpmod=pikera</td>
<td style="text-align:left">slide=1表示从第一组内存开始连续注入；darkwake=0代表一键唤醒机器并偏好设置中节能选项的小憩功能。如果你要用小憩功能请填8； -v是跑代码，在没装好稳定的黑果前我建议加上，方便定位错误，弄完后再删除-v</td>
</tr>
<tr>
<td style="text-align:left">csr-active-config</td>
<td style="text-align:left">Data</td>
<td style="text-align:left">00000000</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">prev-lang:kbd</td>
<td style="text-align:left">Data</td>
<td style="text-align:left">7A682D48 616E733A 323532</td>
</tr>
</tbody>
</table>
<h4 id="NVRAM–Block"><a href="#NVRAM–Block" class="headerlink" title="NVRAM–Block"></a>NVRAM–Block</h4><p>禁用一些nvram变量，我们这里按默认设置不必理会。</p>
<h4 id="NVRAM–LegacyEnable"><a href="#NVRAM–LegacyEnable" class="headerlink" title="NVRAM–LegacyEnable"></a>NVRAM–LegacyEnable</h4><p>如果你的主板不支持原生NVRAM，请一定要选择YES! 如果你的主板支持原生nvram的，填no。</p>
<h4 id="NVRAM-LegacyOverwrite"><a href="#NVRAM-LegacyOverwrite" class="headerlink" title="NVRAM-LegacyOverwrite"></a>NVRAM-LegacyOverwrite</h4><p>对模拟nvram用户来说，将nvram.plist写入硬件，我认为不管是原生nvram还是模拟nvram，都选择no。</p>
<h4 id="NVRAM-LegacySchema"><a href="#NVRAM-LegacySchema" class="headerlink" title="NVRAM-LegacySchema"></a>NVRAM-LegacySchema</h4><p>nvram的变量设置</p>
<h4 id="NVRAM-WriteFlash"><a href="#NVRAM-WriteFlash" class="headerlink" title="NVRAM-WriteFlash"></a>NVRAM-WriteFlash</h4><p>如果你的主板bios因为nvram导入垃圾内容，请关闭它，一般都是选择no。</p>
<h3 id="PlatformInfo"><a href="#PlatformInfo" class="headerlink" title="PlatformInfo"></a>PlatformInfo</h3><p>机型信息</p>
<h4 id="PlatformInfo–Automatic"><a href="#PlatformInfo–Automatic" class="headerlink" title="PlatformInfo–Automatic"></a>PlatformInfo–Automatic</h4><p>这里意思是是否自动填写系统信息。因为后面的很多选项都好繁琐，我们只要认真填几个选项就行了，这里我选YES，不重要的信息让它自动填。</p>
<h4 id="PlatformInfo–Generic"><a href="#PlatformInfo–Generic" class="headerlink" title="PlatformInfo–Generic"></a>PlatformInfo–Generic</h4><p>填写三码信息</p>
<h4 id="PlatformInfo–UpdateDataHub"><a href="#PlatformInfo–UpdateDataHub" class="headerlink" title="PlatformInfo–UpdateDataHub"></a>PlatformInfo–UpdateDataHub</h4><p>yes</p>
<h4 id="PlatformInfo–UpdateNVRAM"><a href="#PlatformInfo–UpdateNVRAM" class="headerlink" title="PlatformInfo–UpdateNVRAM"></a>PlatformInfo–UpdateNVRAM</h4><p>yess</p>
<h4 id="PlatformInfo–UpdateSMBIOS"><a href="#PlatformInfo–UpdateSMBIOS" class="headerlink" title="PlatformInfo–UpdateSMBIOS"></a>PlatformInfo–UpdateSMBIOS</h4><p>yes</p>
<h4 id="PlatformInfo–UpdateSMBIOSMode"><a href="#PlatformInfo–UpdateSMBIOSMode" class="headerlink" title="PlatformInfo–UpdateSMBIOSMode"></a>PlatformInfo–UpdateSMBIOSMode</h4><p>Create</p>
<h3 id="UEFI"><a href="#UEFI" class="headerlink" title="UEFI"></a>UEFI</h3><p>UEFI相关的设置。</p>
<h4 id="UEFI–APFS"><a href="#UEFI–APFS" class="headerlink" title="UEFI–APFS"></a>UEFI–APFS</h4><table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">值</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">EnableJumpstart</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">从APFS容器中加载内置APFS驱动</td>
</tr>
<tr>
<td style="text-align:left">HideVerbose</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">是否隐藏啰嗦模式，一般我们需要看日志的时候才开启</td>
</tr>
<tr>
<td style="text-align:left">JumpstartHotPlug</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">是否加载APFS格式的热插设备</td>
</tr>
<tr>
<td style="text-align:left">MinDate</td>
<td style="text-align:left">Number</td>
<td style="text-align:left">0</td>
<td style="text-align:left">加载最低发行的APFS格式</td>
</tr>
<tr>
<td style="text-align:left">MinVersion</td>
<td style="text-align:left">Number</td>
<td style="text-align:left">0</td>
<td style="text-align:left">加载最低版本的APFS格式。填0代表从HIGH SIERRA开始加载。</td>
</tr>
</tbody>
</table>
<h4 id="UEFI–Audio"><a href="#UEFI–Audio" class="headerlink" title="UEFI–Audio"></a>UEFI–Audio</h4><table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">值</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">AudioSupport</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">False</td>
<td style="text-align:left">是否开启黑苹果的开机提示音支持。如果你选择YES，后面的内容你必须认真看，不支持DP类的数字音频。</td>
</tr>
<tr>
<td style="text-align:left">AudioCodec</td>
<td style="text-align:left">Number</td>
<td style="text-align:left">0</td>
<td style="text-align:left">填写音频声卡in节点</td>
</tr>
<tr>
<td style="text-align:left">AudioDevice</td>
<td style="text-align:left">String</td>
<td style="text-align:left">PciRoot(0x0)/Pci(0x1b,0x0)</td>
<td style="text-align:left">填写你声卡的路径</td>
</tr>
<tr>
<td style="text-align:left">AudioOut</td>
<td style="text-align:left">Number</td>
<td style="text-align:left">0</td>
<td style="text-align:left">音频声卡out节点</td>
</tr>
<tr>
<td style="text-align:left">MinimumVolume</td>
<td style="text-align:left">Number</td>
<td style="text-align:left">20</td>
<td style="text-align:left">声音音量</td>
</tr>
<tr>
<td style="text-align:left">PlayChime</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">如果要使用开机duang声音</td>
</tr>
<tr>
<td style="text-align:left">VolumeAmplifier</td>
<td style="text-align:left">Number</td>
<td style="text-align:left">0</td>
<td style="text-align:left">按照默认设置</td>
</tr>
</tbody>
</table>
<h4 id="UEFI–ConnectDrivers"><a href="#UEFI–ConnectDrivers" class="headerlink" title="UEFI–ConnectDrivers"></a>UEFI–ConnectDrivers</h4><p>是否加载补丁，我们选择YES</p>
<h4 id="UEFI–Drivers"><a href="#UEFI–Drivers" class="headerlink" title="UEFI–Drivers"></a>UEFI–Drivers</h4><p>根据用的驱动填写</p>
<h4 id="UEFI–Input"><a href="#UEFI–Input" class="headerlink" title="UEFI–Input"></a>UEFI–Input</h4><p>默认即可，无需修改</p>
<h4 id="UEFI–Output"><a href="#UEFI–Output" class="headerlink" title="UEFI–Output"></a>UEFI–Output</h4><table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">值</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ClearScreenOnModeSwitch</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">消除开机时从图形模式转换到文本时出现残影的问题</td>
</tr>
<tr>
<td style="text-align:left">ConsoleMode</td>
<td style="text-align:left">String</td>
<td style="text-align:left"></td>
<td style="text-align:left">这里填主机的输出方式,留空即可</td>
</tr>
<tr>
<td style="text-align:left">DirectGopCacheMode</td>
<td style="text-align:left">String</td>
<td style="text-align:left"></td>
<td style="text-align:left">此项请留空！</td>
</tr>
<tr>
<td style="text-align:left">DirectGopRendering</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">是否使用内置显卡直接渲染开机画面，建议选择no</td>
</tr>
<tr>
<td style="text-align:left">IgnoreTextInGraphics</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">修复在不使用-v跑马模式时候，开机日志导致的苹果logo显示不正确的问题</td>
</tr>
<tr>
<td style="text-align:left">ProvideConsoleGop</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">True</td>
<td style="text-align:left">调用显卡gop</td>
</tr>
<tr>
<td style="text-align:left">ReconnectOnResChange</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">一些固件在 GOP 分辨率改变后会重新连接显示器才能输出</td>
</tr>
<tr>
<td style="text-align:left">ReplaceTabWithSpace</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">一些固件在UEFI Shell下TAB功能键不生效。开启这个会用空格键代替。</td>
</tr>
<tr>
<td style="text-align:left">Resolution</td>
<td style="text-align:left">String</td>
<td style="text-align:left">Max</td>
<td style="text-align:left">开机分辨率</td>
</tr>
<tr>
<td style="text-align:left">SanitiseClearScreen</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">修复4k及以上显示器的输出问题</td>
</tr>
<tr>
<td style="text-align:left">TextRenderer</td>
<td style="text-align:left">String</td>
<td style="text-align:left">BuiltinGraphics</td>
<td style="text-align:left">OC开机代码字体渲染方式，我这里填BuiltinGraphics</td>
</tr>
</tbody>
</table>
<h4 id="UEFI–ProtocolOverrides"><a href="#UEFI–ProtocolOverrides" class="headerlink" title="UEFI–ProtocolOverrides"></a>UEFI–ProtocolOverrides</h4><table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">值</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">AppleAudio</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">是否有开机DUANG的声音</td>
</tr>
<tr>
<td style="text-align:left">AppleBootPolicy</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">虚拟机的mac需要用的</td>
</tr>
<tr>
<td style="text-align:left">AppleDebugLog</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">重新安装苹果错误日志界面</td>
</tr>
<tr>
<td style="text-align:left">AppleEvent</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">虚拟机并具有vault的mac需要用的</td>
</tr>
<tr>
<td style="text-align:left">AppleImageConversion</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">重建apple图标</td>
</tr>
<tr>
<td style="text-align:left">AppleKeyMap</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">重建苹果功能键</td>
</tr>
<tr>
<td style="text-align:left">AppleRtcRam</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">重装applertc协议</td>
</tr>
<tr>
<td style="text-align:left">AppleSmcIo</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">代替之前的VirtualSMC.efi</td>
</tr>
<tr>
<td style="text-align:left">AppleUserInterfaceTheme</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">重新安装 Apple User Interface Theme 协议</td>
</tr>
<tr>
<td style="text-align:left">DataHub</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">重建datahub</td>
</tr>
<tr>
<td style="text-align:left">DeviceProperties</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">虚拟机或者老款的电脑需要选择YES才能注入device property</td>
</tr>
<tr>
<td style="text-align:left">FirmwareVolume</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">VAULT相关项</td>
</tr>
<tr>
<td style="text-align:left">HashServices</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">VAULT相关项</td>
</tr>
<tr>
<td style="text-align:left">OSInfo</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">通知主板以及一些程序关于MAC引导的信息</td>
</tr>
<tr>
<td style="text-align:left">UnicodeCollation</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">旧的主板需要</td>
</tr>
</tbody>
</table>
<h4 id="UEFI–Quirks"><a href="#UEFI–Quirks" class="headerlink" title="UEFI–Quirks"></a>UEFI–Quirks</h4><table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">值</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ExitBootServicesDelay</td>
<td style="text-align:left">Number</td>
<td style="text-align:left">0</td>
<td style="text-align:left">旧主板需要给予主板退出时间</td>
</tr>
<tr>
<td style="text-align:left">IgnoreInvalidFlexRatio</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">如果你没有在bios中解锁MSR0x194，一定要选YES</td>
</tr>
<tr>
<td style="text-align:left">ReleaseUsbOwnership</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">自动释放USB所有权的功能</td>
</tr>
<tr>
<td style="text-align:left">RequestBootVarFallback</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">一些固件会主动扫描系统启动盘的位置而阻止OC扫描，如果碰到这样的问题选择YES，一般这个BUG在华硕的主板中比较常见。</td>
</tr>
<tr>
<td style="text-align:left">RequestBootVarRouting</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">true</td>
<td style="text-align:left">增加”启动磁盘” 的可靠性</td>
</tr>
<tr>
<td style="text-align:left">UnblockFsConnect</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">false</td>
<td style="text-align:left">惠普笔记本可能会让OC无法扫描到启动项，一般选择NO</td>
</tr>
</tbody>
</table>
<h4 id="UEFI–ReservedMemory"><a href="#UEFI–ReservedMemory" class="headerlink" title="UEFI–ReservedMemory"></a>UEFI–ReservedMemory</h4><p>空</p>
<h2 id="挂载EFI分区"><a href="#挂载EFI分区" class="headerlink" title="挂载EFI分区"></a>挂载EFI分区</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">diskutil list //使用diskutil list 查看磁盘分区情况</span><br><span class="line">diskutil mount disk1s1 //使用diskutil mount disk0s1 挂载disk1的EFI分区。</span><br></pre></td></tr></table></figure>
<h2 id="Thank"><a href="#Thank" class="headerlink" title="Thank"></a>Thank</h2><ul>
<li><a href="https://blog.xjn819.com/?p=543" target="_blank" rel="noopener">使用OpenCore引导黑苹果 by XJN</a></li>
<li><a href="https://blog.daliansky.net/OpenCore-BootLoader.html" target="_blank" rel="noopener">精读OpenCore by 黑果小兵</a></li>
</ul>
]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>瞎折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 问题解决</title>
    <url>/archives/62820.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>主要收集windows使用期间所遇到的问题以及解决方法。<br><a id="more"></a></p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>远程桌面登录时，出现身份验证错误，要求的函数不正确，这可能是由于CredSSP加密Oracle修正。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>解决方法1<br>运行 gpedit.msc 本地组策略，“计算机配置”-&gt;“管理模板”-&gt;“系统”-&gt;“凭据分配”但是我的却找不到“加密Oracle修正”选项，选择启用并选择易受攻击。</p>
<p>解决方法2</p>
<ul>
<li>运行 regedit</li>
<li>打开注册表</li>
<li>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\CredSSP\Parameters</li>
<li>在 System（之后没有的文件夹，需自己创建）然后在最底部文件夹Parameters里面</li>
<li>新建 DWORD（32）位值（D）。文件名 “AllowEncryptionOracle” ，值 : 2，</li>
<li>保存，重启</li>
</ul>
<p>以上2种方法都试了还不行，控制面板-&gt;所有控制面板项-&gt;Windows 更新，更新下。</p>
<h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p>端口号被占用</p>
<h2 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h2><ol>
<li>打开控制台，执行 <code>netstat -ano | findstr 1099</code> ，1099被占用的端口号。</li>
<li>执行 <code>taskkill -pid 16704 -f</code> 16704 为占用次端口号的进程ID。</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>问题解决</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Wox插件：快速打开收藏的目录</title>
    <url>/archives/8156ce4d.html</url>
    <content><![CDATA[<p>wox的一款插件，可以根据配置快速打开收藏的目录。源码请移步<a href="https://github.com/AlanLang/wox.plugin.marks" target="_blank" rel="noopener">这里</a>。<br><a id="more"></a></p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>直接将public目录下的文件夹拷贝到wox插件目录 <code>Plugins</code> 下。</p>
<h2 id="编辑配置文件config-yml，例如："><a href="#编辑配置文件config-yml，例如：" class="headerlink" title="编辑配置文件config.yml，例如："></a>编辑配置文件<code>config.yml</code>，例如：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 井号开头代表注释</span><br><span class="line"># 添加的格式为 名称: 地址</span><br><span class="line"># 例如：</span><br><span class="line">百度: www.baidu.com</span><br><span class="line">谷歌: www.google.com.hk</span><br><span class="line">工作目录: C:\Users\alan2\AppData\Local\Wox\app-1.3.424\Plugins\wox.plugin.marks</span><br></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><img src="http://oqdzx28cd.bkt.clouddn.com/18-1-26/55404371.jpg" alt></p>
<p>支持首字母拼音查询<br><img src="http://oqdzx28cd.bkt.clouddn.com/18-1-26/79977127.jpg" alt></p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 使用技巧</title>
    <url>/archives/59562.html</url>
    <content><![CDATA[<h2 id="快速安装最新版的node-js"><a href="#快速安装最新版的node-js" class="headerlink" title="快速安装最新版的node.js"></a>快速安装最新版的node.js</h2><h3 id="去-nodejs-官网-https-nodejs-org-看最新的版本号"><a href="#去-nodejs-官网-https-nodejs-org-看最新的版本号" class="headerlink" title="去 nodejs 官网 https://nodejs.org 看最新的版本号"></a>去 nodejs 官网 <a href="https://nodejs.org" target="_blank" rel="noopener">https://nodejs.org</a> 看最新的版本号</h3><p>例如现在最新的版本号是12.6.0</p>
<h3 id="添加源并安装"><a href="#添加源并安装" class="headerlink" title="添加源并安装"></a>添加源并安装</h3><p>nodejs 的每个大版本号都有相对应的源，比如这里的 12.x.x版本的源是<a href="https://deb.nodesource.com/setup_12.x。" target="_blank" rel="noopener">https://deb.nodesource.com/setup_12.x。</a></p>
<p>所以在终端执行：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -</span><br></pre></td></tr></table></figure></p>
<p>稍等片刻，源已经添加完毕，再执行：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure></p>
<p>等待安装完成。</p>
<a id="more"></a>
<h2 id="防火墙操作"><a href="#防火墙操作" class="headerlink" title="防火墙操作"></a>防火墙操作</h2><p>打开或关闭某个端口，例如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ufw allow smtp　允许所有的外部IP访问本机的25/tcp (smtp)端口</span><br><span class="line">sudo ufw allow 22/tcp 允许所有的外部IP访问本机的22/tcp (ssh)端口</span><br><span class="line">sudo ufw allow 53 允许外部访问53端口(tcp/udp)</span><br><span class="line">sudo ufw allow from 192.168.1.100 允许此IP访问所有的本机端口</span><br><span class="line">sudo ufw allow proto udp 192.168.0.1 port 53 to 192.168.0.2 port 53</span><br><span class="line">sudo ufw deny smtp 禁止外部访问smtp服务</span><br><span class="line">sudo ufw delete allow smtp 删除上面建立的某条规则</span><br></pre></td></tr></table></figure></p>
<p>查看防火墙状态<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure></p>
<h2 id="安装fish"><a href="#安装fish" class="headerlink" title="安装fish"></a>安装fish</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-add-repository ppa:fish-shell/release-3</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install fish</span><br></pre></td></tr></table></figure>
<h2 id="安装jenkins"><a href="#安装jenkins" class="headerlink" title="安装jenkins"></a>安装jenkins</h2><h3 id="安装-open-jdk"><a href="#安装-open-jdk" class="headerlink" title="安装 open-jdk"></a>安装 open-jdk</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure>
<h3 id="安装jenkins-1"><a href="#安装jenkins-1" class="headerlink" title="安装jenkins"></a>安装jenkins</h3><p>将存储库密钥添加到系统。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -</span><br></pre></td></tr></table></figure></p>
<p>我们将Debian包存储库地址附加到服务器的<code>sources.list</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo deb http://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list</span><br></pre></td></tr></table></figure></p>
<p>更新存储库<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></p>
<p>安装<code>Jenkins</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install jenkins</span><br></pre></td></tr></table></figure></p>
<p>安装完成后，jenkins的文件目录如下所示<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装目录：/var/lib/jenkins  </span><br><span class="line">日志目录：/var/log/jenkins/jenkins.log</span><br></pre></td></tr></table></figure></p>
<h3 id="修改端口号"><a href="#修改端口号" class="headerlink" title="修改端口号"></a>修改端口号</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/default/jenkins</span><br></pre></td></tr></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service jenkins start</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>npm常用命令及参数详解</title>
    <url>/archives/13788.html</url>
    <content><![CDATA[<h2 id="NPM命令详解"><a href="#NPM命令详解" class="headerlink" title="NPM命令详解"></a>NPM命令详解</h2><p>平时工作中经常用npm安装，每次用的时候有些命令都要去查一次，这次就自己把这些命令整理下，让自己可以多记住一些。<br>对于还不知道NPM是什么的同学请自行google吧 这里我就不多BB了，主要记录一下NPM几个常用命令和参数的意思<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install packagename</span><br></pre></td></tr></table></figure></p>
<p>安装模块如不指定版本号 默认会安装最新的版本<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install packagename 0.0.1</span><br></pre></td></tr></table></figure></p>
<p>安装指定版本的模块<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure></p>
<p>这个命令会在当前目录生成一个package.json文件，这个文件中会记录一些关于项目的信息，比如：项目的作者，git地址，入口文件、命令设置、项目名称和版本号等等，一般情况下这个文件是必须要有的，方便后续的项目添加和其他开发人员的使用。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install packagename --save 或 -S</span><br></pre></td></tr></table></figure></p>
<p>–save、-S参数意思是把模块的版本信息保存到dependencies（生产环境依赖）中，即你的package.json文件的dependencies字段中；<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install packagename --save-dev 或 -D</span><br></pre></td></tr></table></figure></p>
<p>–save-dev 、 -D参数意思是吧模块版本信息保存到devDependencies（开发环境依赖）中，即你的package.json文件的devDependencies字段中；<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install packagename --save-optional 或 -O</span><br></pre></td></tr></table></figure></p>
<p>–save-optional 、 -O参数意思是把模块安装到optionalDependencies（可选环境依赖）中，即你的package.json文件的optionalDependencies字段中。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install packagename --save-exact 或 -E</span><br></pre></td></tr></table></figure></p>
<p>–save-exact 、 -E参数的意思是精确的安装指定版本的模块，细心的同学会发现dependencies字段里每个模块版本号前面的^不见鸟。。。</p>
<p>如果你打开的是别人的项目，这个时候一般是没有任何依赖包的，但是所以需要的包已在package.json里面写好了，这个时候我们就可以使用npm install来安装所有项目中需要的依赖包了<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install packagename -g 或 --global</span><br></pre></td></tr></table></figure></p>
<p>安装全局的模块（不加参数的时候默认安装本地模块）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm list 或 npm ll 或 npm la 或 npm ls</span><br></pre></td></tr></table></figure></p>
<p>查看所有已经安装的模块 ll 、 ls 、 la 三个命令意思都一样 但是列表的展示方式不一样 喜欢用哪个就看个人喜好了,不懂的同学可以每个都去试下。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall packagename [options]</span><br></pre></td></tr></table></figure></p>
<p>卸载已经安装的模块，后面的options参数意思与安装时候的意思一样,与这个命令相同的还有npm remove 、npm rm、npm r 、 npm un 、 npm unlink 这几个命令功能和npm uninstall基本一样，个人觉得没什么区别。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm outdated</span><br></pre></td></tr></table></figure></p>
<p>这个命令会列出所有已经过时了的模块，对于已经过时了的模块可以使用下面的命令去更新<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm update [-g]</span><br></pre></td></tr></table></figure></p>
<p>更新已经安装的模块(或全局的模块)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm help &apos;命令&apos;</span><br></pre></td></tr></table></figure></p>
<p>查看某条命令的详细帮助<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm root</span><br></pre></td></tr></table></figure></p>
<p>查看命令的绝对路径<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config</span><br></pre></td></tr></table></figure></p>
<p>设置npm命令的配置路径，这个命令一般用于设置代理，毕竟大部分都是国外的模块，不过个人还是比较喜欢用cnpm 这个命令是用的淘宝的镜像，用法与npm一样，速度还可以。</p>
<p>除去以上的这些命令外，经常还能见到一些npm start、npm deploy、 npm build等等之类的命令，这些一般都是在package.json 中自定义的一些启动、重启、停止服务之类的命令。可以在package.json文件的scripts字段里自定义。例如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;webpack-dev-server main.js,</span><br><span class="line">    &quot;deploy&quot;: &quot;set NODE_ENV=production&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>关于package.json的详细文档，有兴趣的同学可以参考<a href="https://github.com/ericdum/mujiang.info/issues/6/" target="_blank" rel="noopener">《package.json中文文档》</a>；</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>wsl配置开机启动</title>
    <url>/archives/59040.html</url>
    <content><![CDATA[<p>以<code>ubuntu</code>配置开机启动<code>ssh</code>为例。</p>
<h3 id="免密码使用sudo直接使用root权限执行命令"><a href="#免密码使用sudo直接使用root权限执行命令" class="headerlink" title="免密码使用sudo直接使用root权限执行命令"></a>免密码使用<code>sudo</code>直接使用<code>root</code>权限执行命令</h3><p>vi /etc/sudoers<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alan_ubuntu ALL=(ALL) NOPASSWD: /usr/sbin/servic</span><br></pre></td></tr></table></figure>
<h3 id="在windows下新建wslstartup-vbs"><a href="#在windows下新建wslstartup-vbs" class="headerlink" title="在windows下新建wslstartup.vbs"></a>在windows下新建<code>wslstartup.vbs</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set ws=wscript.createobject(&quot;wscript.shell&quot;)</span><br><span class="line">ws.run &quot;C:\Windows\System32\bash.exe&quot;,0</span><br><span class="line">ws.run &quot;C:\Windows\System32\bash.exe  -c &apos;sudo /usr/sbin/service ssh start&apos;&quot;,0</span><br></pre></td></tr></table></figure>
<p>###将 <code>wslstartup.vbs</code>加入计划任务<br><img src="http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-12-24/94766517.jpg" alt><br><img src="http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-12-24/9969189.jpg" alt><br><img src="http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-12-24/23785132.jpg" alt></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode中的依赖注入</title>
    <url>/archives/16210.html</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>vscode 项目中，对象基本都是通过依赖注入模式构造的。比如编辑器实例 <code>CodeApplication</code> 的 <a href="https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/code/electron-main/app.ts#L84" target="_blank" rel="noopener">constructor</a> 如下，所有被装饰的参数都是依赖注入项：<br>如果你还不了解 TypeScript 装饰器，你可以先阅读<a href="https://www.typescriptlang.org/docs/handbook/decorators.html" target="_blank" rel="noopener">官方文档</a>。<br><a id="more"></a></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CodeApplication <span class="keyword">extends</span> Disposable &#123;</span><br><span class="line">	<span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">		<span class="keyword">private</span> readonly mainIpcServer: Server,</span></span><br><span class="line"><span class="params">		<span class="keyword">private</span> readonly userEnv: IProcessEnvironment,</span></span><br><span class="line"><span class="params">		<span class="meta">@IInstantiationService</span> <span class="keyword">private</span> readonly instantiationService: IInstantiationService,</span></span><br><span class="line"><span class="params">		<span class="meta">@ILogService</span> <span class="keyword">private</span> readonly logService: ILogService,</span></span><br><span class="line"><span class="params">		<span class="meta">@IEnvironmentService</span> <span class="keyword">private</span> readonly environmentService: IEnvironmentService,</span></span><br><span class="line"><span class="params">		<span class="meta">@ILifecycleMainService</span> <span class="keyword">private</span> readonly lifecycleMainService: ILifecycleMainService,</span></span><br><span class="line"><span class="params">		<span class="meta">@IConfigurationService</span> <span class="keyword">private</span> readonly configurationService: IConfigurationService,</span></span><br><span class="line"><span class="params">		<span class="meta">@IStateService</span> <span class="keyword">private</span> readonly stateService: IStateService</span></span><br><span class="line"><span class="params">	</span>) &#123;</span><br><span class="line">		<span class="comment">// ...</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CodeMain 类将会在应用初始化的时候<a href="https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/code/electron-main/main.ts#L118-L128" target="_blank" rel="noopener">实例化该类</a>：<br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> instantiationService.invokeFunction(<span class="keyword">async</span> accessor =&gt; &#123;</span><br><span class="line">	<span class="comment">// 进行实例化，可以看到除了要被构造的类 CodeApplication 之外</span></span><br><span class="line">	<span class="comment">// 剩下参数的数目和 constructor 中未被装饰的参数的数目一致</span></span><br><span class="line">    <span class="keyword">const</span> environmentService = accessor.get(IEnvironmentService);</span><br><span class="line">    <span class="keyword">const</span> logService = accessor.get(ILogService);</span><br><span class="line">    <span class="keyword">const</span> lifecycleMainService = accessor.get(ILifecycleMainService);</span><br><span class="line">    <span class="keyword">const</span> configurationService = accessor.get(IConfigurationService);</span><br><span class="line">    <span class="keyword">const</span> mainIpcServer = <span class="keyword">await</span> <span class="keyword">this</span>.doStartup(logService, environmentService, lifecycleMainService, instantiationService, <span class="literal">true</span>);</span><br><span class="line">	<span class="keyword">return</span> instantiationService.createInstance(CodeApplication, mainIpcServer, instanceEnvironment).startup();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>我们提炼出在 vsocde 中使用依赖注入模式的三个要素：</p>
<ul>
<li>一个将要被实例化的类，在其构造函数中使用装饰器声明了需要注入的参数（依赖注入项）</li>
<li>装饰器，是注入的参数的类型标识（indentifier）</li>
<li>InstantiationService，提供方法实例化类，并且也是依赖注入项所存放的位置</li>
</ul>
<p>下面介绍一些实现细节。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>所有 identifier 均由 createDecorator 方法创建，比如 ILogService<br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createDecorator <span class="keyword">as</span> createServiceDecorator &#125; <span class="keyword">from</span> <span class="string">'vs/platform/instantiation/common/instantiation'</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ILogService = createServiceDecorator&lt;ILogService&gt;(<span class="string">'logService'</span>);</span><br></pre></td></tr></table></figure></p>
<p>我们看这个文件中，不仅有变量声明：<br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ILogService = createServiceDecorator&lt;ILogService&gt;(<span class="string">'logService'</span>);</span><br></pre></td></tr></table></figure></p>
<p>同时也有类型声明：<br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> ILogService <span class="keyword">extends</span> ILogger &#123;</span><br><span class="line">	_serviceBrand: <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>TypeScript 允许同名的类型声明和变量声明，这就是为什么 ILogService 同时可以作为装饰器函数的名称和接口的名称。<br><a href="https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/platform/instantiation/common/instantiation.ts#L128-L128" target="_blank" rel="noopener">createDecorator</a>方法内容如下：<br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">storeServiceDependency</span>(<span class="params">id: <span class="built_in">Function</span>, target: <span class="built_in">Function</span>, index: <span class="built_in">number</span>, optional: <span class="built_in">boolean</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在被装饰的类上记录一个依赖项</span></span><br><span class="line">	<span class="keyword">if</span> ((target <span class="keyword">as</span> <span class="built_in">any</span>)[_util.DI_TARGET] === target) &#123;</span><br><span class="line">		(target <span class="keyword">as</span> <span class="built_in">any</span>)[_util.DI_DEPENDENCIES].push(&#123; id, index, optional &#125;);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		(target <span class="keyword">as</span> <span class="built_in">any</span>)[_util.DI_DEPENDENCIES] = [&#123; id, index, optional &#125;];</span><br><span class="line">		(target <span class="keyword">as</span> <span class="built_in">any</span>)[_util.DI_TARGET] = target;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A *only* valid way to create a &#123;&#123;ServiceIdentifier&#125;&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createDecorator</span>&lt;<span class="title">T</span>&gt;(<span class="params">serviceId: <span class="built_in">string</span></span>): <span class="title">ServiceIdentifier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 判断装饰器是否已在缓存中</span></span><br><span class="line">	<span class="keyword">if</span> (_util.serviceIds.has(serviceId)) &#123;</span><br><span class="line">		<span class="keyword">return</span> _util.serviceIds.get(serviceId)!;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">// 创建装饰器</span></span><br><span class="line">	<span class="keyword">const</span> id = &lt;<span class="built_in">any</span>&gt;<span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">Function</span>, key: <span class="built_in">string</span>, index: <span class="built_in">number</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">arguments</span>.length !== <span class="number">3</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'@IServiceName-decorator can only be used to decorate a parameter'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		storeServiceDependency(id, target, index, <span class="literal">false</span>);</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	id.toString = <span class="function"><span class="params">()</span> =&gt;</span> serviceId;</span><br><span class="line"></span><br><span class="line">	_util.serviceIds.set(serviceId, id);</span><br><span class="line">	<span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到代码的核心是实现了一个装饰器函数<code>id</code>，在装饰器被应用的时候，它就会调用 storeServiceDependency 方法在被装饰的类（比如 CodeApplication）上记录依赖项，包括装饰器本身（id），参数的下标（index）以及是否可选（optional）。<br>当类<strong>声明</strong>的时候，装饰器就会被应用（可以通过一个<a href="https://stackblitz.com/edit/typescript-decorator-when-kaigic?file=index.ts" target="_blank" rel="noopener">demo</a>证明），所以在有类被实例化之前依赖关系就已经确定好了。</p>
<h3 id="InstantiationService"><a href="#InstantiationService" class="headerlink" title="InstantiationService"></a>InstantiationService</h3><p><a href="https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/platform/instantiation/common/instantiationService.ts#L29-L29" target="_blank" rel="noopener">InstantiantionService</a> 用于提供依赖注入项，也就是起到依赖注入框架中的注入器（Injector）的功能，它以 identifier 为 key 在自身的 _services 属性中保存了各个依赖项的实例。</p>
<p>它暴露了三个公开方法：</p>
<ul>
<li>createInstance，该方法接受一个类以及构造该类的非依赖注入参数，然后创建该类的实例。</li>
<li>invokeFunction，该方法接受一个回调函数，该回调函数通过 acessor 参数可以访问该 InstantiationService 中的所有依赖注入项。</li>
<li>createChild，该方法接受一个依赖项集合，并创造一个新的 InstantiationService，说明 vscode 的依赖注入机制也是有层次的。</li>
</ul>
<p>_createInstance 方法是实例化的核心方法：<br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> _createInstance&lt;T&gt;(ctor: <span class="built_in">any</span>, args: <span class="built_in">any</span>[] = [], _trace: Trace): T &#123;</span><br><span class="line">	<span class="comment">// arguments defined by service decorators</span></span><br><span class="line">	<span class="keyword">let</span> serviceDependencies = _util.getServiceDependencies(ctor).sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.index - b.index);</span><br><span class="line">	<span class="keyword">let</span> serviceArgs: <span class="built_in">any</span>[] = [];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> dependency of serviceDependencies) &#123;</span><br><span class="line">		<span class="keyword">let</span> service = <span class="keyword">this</span>._getOrCreateServiceInstance(dependency.id, _trace);</span><br><span class="line">		<span class="keyword">if</span> (!service &amp;&amp; <span class="keyword">this</span>._strict &amp;&amp; !dependency.optional) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`[createInstance] <span class="subst">$&#123;ctor.name&#125;</span> depends on UNKNOWN service <span class="subst">$&#123;dependency.id&#125;</span>.`</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		serviceArgs.push(service);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">let</span> firstServiceArgPos = serviceDependencies.length &gt; <span class="number">0</span> ? serviceDependencies[<span class="number">0</span>].index : args.length;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// check for argument mismatches, adjust static args if needed</span></span><br><span class="line">	<span class="keyword">if</span> (args.length !== firstServiceArgPos) &#123;</span><br><span class="line">		<span class="built_in">console</span>.warn(<span class="string">`[createInstance] First service dependency of <span class="subst">$&#123;ctor.name&#125;</span> at position <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">			firstServiceArgPos + <span class="number">1</span>&#125;</span> conflicts with <span class="subst">$&#123;args.length&#125;</span> static arguments`</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">let</span> delta = firstServiceArgPos - args.length;</span><br><span class="line">		<span class="keyword">if</span> (delta &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			args = args.concat(<span class="keyword">new</span> <span class="built_in">Array</span>(delta));</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			args = args.slice(<span class="number">0</span>, firstServiceArgPos);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// now create the instance</span></span><br><span class="line">	<span class="keyword">return</span> &lt;T&gt;<span class="keyword">new</span> ctor(...[...args, ...serviceArgs]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个方法首先通过<code>getServiceDependencies</code>获取被构造类的依赖，这里获取到的依赖就是我们在声明该类的时候就已经通过<code>storeServiceDependency</code>所注册的（见上文）。然后通过<code>_getOrCreateServiceInstance</code>根据方法<code>indentifer</code>拿到<code>_services</code>中注册的依赖项，如果拿不到的话就构建一个（我们先假设我们总是能拿到所需要的依赖注册项，需要现场构建的情形我们会在后面的小节中说明），拿到的依赖项会被<code>push</code>到<code>serviceArgs</code>数组当中。然后会进行<code>constructor</code>参数处理。总而言之，<code>args</code>数组的长度应该满足被构造的类声明的非注入参数的数量，这样才能确保依赖注入的参数和非依赖注入的参数都能被送到构造函数中正确的顺序上。<br>最后用实例化目标类。</p>
<h3 id="依赖项不存在的情形"><a href="#依赖项不存在的情形" class="headerlink" title="依赖项不存在的情形"></a>依赖项不存在的情形</h3><p>我们先前提到在调用<code>_getOrCreateServiceInstance</code>时可能会拿不到依赖注入项而需要现场构建一个，下面是具体的实现过程。<br>首先会调用<code>_getServiceInstanceOrDescriptor</code>尝试拿到已经注册的实例，或者是一个<code>SyncDescriptor</code>对象。<code>SyncDescriptor</code>是什么东西呢，它其实就是封装了实例构造参数的一个数据对象，包括以下属性：</p>
<ul>
<li>ctor 将要被构造的类</li>
<li>staticArguments 被传入这个类的参数，和上文中的 args 意义相同</li>
<li>supportsDelayedInstantiation 是否支持延迟实例化<br>使用起来就像这样：<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">services.set(ILifecycleMainService, <span class="keyword">new</span> SyncDescriptor(LifecycleMainService));</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>表示的其实就是 <strong>不立刻实例化这个类，而当需要被注入的时候再进行实例化</strong>。<br>拿到了<code>SyncDescriptor</code>之后，会通过<a href="https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/platform/instantiation/common/instantiationService.ts#L149-L149" target="_blank" rel="noopener">_createAndCacheServiceInstance</a> 方法先实例化这个依赖项，它的代码如下：<br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> _createAndCacheServiceInstance&lt;T&gt;(id: ServiceIdentifier&lt;T&gt;, desc: SyncDescriptor&lt;T&gt;, _trace: Trace): T &#123;</span><br><span class="line">    <span class="keyword">type</span> Triple = &#123; id: ServiceIdentifier&lt;<span class="built_in">any</span>&gt;, desc: SyncDescriptor&lt;<span class="built_in">any</span>&gt;, _trace: Trace &#125;;</span><br><span class="line">    <span class="keyword">const</span> graph = <span class="keyword">new</span> Graph&lt;Triple&gt;(<span class="function"><span class="params">data</span> =&gt;</span> data.id.toString());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> cycleCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> stack = [&#123; id, desc, _trace &#125;];</span><br><span class="line">    <span class="keyword">while</span> (stack.length) &#123;</span><br><span class="line">        <span class="keyword">const</span> item = stack.pop()!;</span><br><span class="line">        graph.lookupOrInsertNode(item);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// a weak but working heuristic for cycle checks</span></span><br><span class="line">        <span class="keyword">if</span> (cycleCount++ &gt; <span class="number">150</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CyclicDependencyError(graph);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// check all dependencies for existence and if they need to be created first</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> dependency of _util.getServiceDependencies(item.desc.ctor)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> instanceOrDesc = <span class="keyword">this</span>._getServiceInstanceOrDescriptor(dependency.id);</span><br><span class="line">            <span class="keyword">if</span> (!instanceOrDesc &amp;&amp; !dependency.optional) &#123;</span><br><span class="line">                <span class="built_in">console</span>.warn(<span class="string">`[createInstance] <span class="subst">$&#123;id&#125;</span> depends on <span class="subst">$&#123;dependency.id&#125;</span> which is NOT registered.`</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (instanceOrDesc <span class="keyword">instanceof</span> SyncDescriptor) &#123;</span><br><span class="line">                <span class="keyword">const</span> d = &#123; id: dependency.id, desc: instanceOrDesc, _trace: item._trace.branch(dependency.id, <span class="literal">true</span>) &#125;;</span><br><span class="line">                graph.insertEdge(item, d);</span><br><span class="line">                stack.push(d);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> roots = graph.roots();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if there is no more roots but still</span></span><br><span class="line">        <span class="comment">// nodes in the graph we have a cycle</span></span><br><span class="line">        <span class="keyword">if</span> (roots.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!graph.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> CyclicDependencyError(graph);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> &#123; data &#125; of roots) &#123;</span><br><span class="line">            <span class="comment">// create instance and overwrite the service collections</span></span><br><span class="line">            <span class="keyword">const</span> instance = <span class="keyword">this</span>._createServiceInstanceWithOwner(data.id, data.desc.ctor, data.desc.staticArguments, data.desc.supportsDelayedInstantiation, data._trace);</span><br><span class="line">            <span class="keyword">this</span>._setServiceInstance(data.id, instance);</span><br><span class="line">            graph.removeNode(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &lt;T&gt;<span class="keyword">this</span>._getServiceInstanceOrDescriptor(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里有两个 while，分别做了以下这几件事情：</p>
<ul>
<li>第一个 while 是利用 DFS 的方法，找到一个类的所有未实例化的依赖（还是基于 SyncDescriptor），以及依赖的未实例化的依赖……最终得到一个依赖树</li>
<li>第二个 while 根据前一步得到的依赖树，从根节点开始构造实例<br>最后我们就得到了我们最初想要的依赖。<h3 id="全局单例依赖注入"><a href="#全局单例依赖注入" class="headerlink" title="全局单例依赖注入"></a>全局单例依赖注入</h3>在 vscode 中，有的依赖是全局唯一、单例的，即在 JavaScript 线程中该类最多只有一个实例（这在 render process 中用得非常多）。vscode 提供了一个简单的机制实现全局单例依赖。<br>比方说我们想要创建一个单例的生命周期依赖，就这样做：<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">registerSingleton(ILifecycleService, BrowserLifecycleService);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>即调用 registerSingleton 方法，将 identifier 和具体的实现类绑定即可。<br>而<code>registerSingleton</code>的实现也异常简单，仅仅是在一个数组中保存一条记录。<br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _registry: [ServiceIdentifier&lt;<span class="built_in">any</span>&gt;, SyncDescriptor&lt;<span class="built_in">any</span>&gt;][] = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">registerSingleton</span>&lt;<span class="title">T</span>, <span class="title">Services</span> <span class="title">extends</span> <span class="title">BrandedService</span>[]&gt;(<span class="params">id: ServiceIdentifier&lt;T&gt;, ctor: &#123; <span class="keyword">new</span>(...services: Services): T &#125;, supportsDelayedInstantiation?: <span class="built_in">boolean</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">	_registry.push([id, <span class="keyword">new</span> SyncDescriptor&lt;T&gt;(ctor, [], supportsDelayedInstantiation)]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getSingletonServiceDescriptors</span>(<span class="params"></span>): [<span class="title">ServiceIdentifier</span>&lt;<span class="title">any</span>&gt;, <span class="title">SyncDescriptor</span>&lt;<span class="title">any</span>&gt;][] </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> _registry;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在需要用到这些依赖注入项的时候，调用 getSingletonServiceDescriptor 获取这个数组就好。<br>所以从本质上来说，全局单例依赖注入其实就是把所有的依赖注入项保存在一个全局变量里。</p>
<h3 id="可选依赖"><a href="#可选依赖" class="headerlink" title="可选依赖"></a>可选依赖</h3><p>有时候我们想让一个依赖是可选的，即允许依赖不存在。对此 vscode 提供了 optional 方法用于标记可选依赖。<br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">optional</span>&lt;<span class="title">T</span>&gt;(<span class="params">serviceIdentifier: ServiceIdentifier&lt;T&gt;</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">Function</span>, key: <span class="built_in">string</span>, index: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">arguments</span>.length !== <span class="number">3</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'@optional-decorator can only be used to decorate a parameter'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		storeServiceDependency(serviceIdentifier, target, index, <span class="literal">true</span>);</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可见它与<code>createDecorator</code>方法的主要区别在于在调用<code>storeServiceDependency</code>的时候第四个参数为<code>true</code>。这样当获取不到<code>serviceIdentifier</code>所对应的依赖项时<code>InstantiationService</code>能够允许这样的情况而不是抛出错误。</p>
<h3 id="延迟实例化"><a href="#延迟实例化" class="headerlink" title="延迟实例化"></a>延迟实例化</h3><p>在上文中，我们看到<code>SyncDecriptor</code>可以被当作依赖项实例的占位符使用，从而做到在需要依赖它的类被实例化的时候，再进行自身的实例化，即延迟实例化。另外，它还能把实例化过程进一步延迟到访问实例的属性和方法的时候！我们来看看这是如何实现的。<br>当创建一个<code>SyncDescriptor</code>的时候我们可以传参<code>supportsDelayedInstantiation = true</code>，比如这里：<br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">registerSingleton(IExtensionGalleryService, ExtensionGalleryService, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></p>
<p>这样在调用<code>_createServiceInstance</code>的时候就会进入<code>else</code>分支。<br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Return a proxy object that's backed by an idle value. That</span></span><br><span class="line"><span class="comment">// strategy is to instantiate services in our idle time or when actually</span></span><br><span class="line"><span class="comment">// needed but not when injected into a consumer</span></span><br><span class="line"><span class="keyword">const</span> idle = <span class="keyword">new</span> IdleValue&lt;<span class="built_in">any</span>&gt;<span class="function">(<span class="params">(<span class="params"></span>) =&gt; <span class="keyword">this</span>._createInstance&lt;T&gt;(<span class="params">ctor, args, _trace</span>)</span>);</span></span><br><span class="line"><span class="function"><span class="params">return</span> &lt;<span class="params">T</span>&gt;<span class="params">new</span> <span class="params">Proxy</span>(<span class="params"><span class="built_in">Object</span>.create(<span class="params"><span class="literal">null</span></span>), &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">get</span>(<span class="params">target: <span class="built_in">any</span>, key: PropertyKey</span>): <span class="built_in">any</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">if</span> (<span class="params">key <span class="keyword">in</span> target</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">return</span> target[key];</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">let</span> obj = idle.getValue(<span class="params"></span>);</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">let</span> prop = obj[key];</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">if</span> (<span class="params"><span class="keyword">typeof</span> prop !== '<span class="keyword">function</span>'</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">return</span> prop;</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">        prop = prop.bind(<span class="params">obj</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">        target[key] = prop;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">return</span> prop;</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">set</span>(<span class="params">_target: T, p: PropertyKey, value: <span class="built_in">any</span></span>): <span class="built_in">boolean</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        idle.getValue(<span class="params"></span>)[p] = value;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>);</span></span><br></pre></td></tr></table></figure></p>
<p>原理是用一个 Proxy 代替实例返回，当需要用到实例上的属性或方法时，再调用<code>this._createInstance</code>方法（通过闭包来保存参数）。这里用到了一种被称为<code>Idle Until Urgent</code>的模式。</p>
<h3 id="InstantiationService-的那些方法"><a href="#InstantiationService-的那些方法" class="headerlink" title="InstantiationService 的那些方法"></a>InstantiationService 的那些方法</h3><p><code>InstatiationService</code> 这个类有很多方法，而且名字都很接近，这里列一个梗概，方便大家阅读源码：</p>
<ul>
<li>createChild 创建一个子 InstantiationService</li>
<li>invokeFunction 执行一个函数，该函数可以通过 accessor 访问 InstantiationService 里存储的服务</li>
<li>createInstance 创建一个服务</li>
<li>_createInstance 实例化的最终方法，new 调用的位置</li>
<li>_setServiceInstance 将一个创建好的 service set 到保存了对应的 identifier 的 InstantiationService 当中</li>
<li>_getServiceInstaneOrDescriptor 根据 identifier 从某个 InstantiationService 中拿到服务实例或者 SyncDescriptor</li>
<li>_getOrCreateServiceInstance 被 invokeFunction 所调用，会尝试调用 _getServiceInstanceOrDescriptor 拿到服务实例，如果拿到的是一个 SyncDescriptor，则走 _createAndCacheServiceInstance</li>
<li>_createAndCacheServiceInstance 这里根据“要被创建的服务”的“未被实例化的依赖”来构建依赖树，然后依次构建这些未被实例化的依赖</li>
<li>_createServiceInstanceWithOwner 寻找保存了对应的 identifier 的 InstantiationService ，调用它的 _createServiceInstance 方法进行实例化</li>
<li>_createServiceInstance 这里处理延迟实例化逻辑，调用 _createInstance 的时候，所有依赖应该都已经被实例化，而不是 SyncDescriptor<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>vscode 自己实现了一套依赖注入机制，并没有依赖 reflect-metadata<br>InstantiationService 是实现依赖注入的核心<br>用装饰器来声明依赖关系<br>允许可选依赖<br>允许延迟实例化<br>支持多层依赖注入</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>一步一步打造 finui 脚手架工具</title>
    <url>/archives/15520.html</url>
    <content><![CDATA[<h2 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h2><p>工程基于nodejs 8.4以及ES6进行开发，目录结构如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/bin  # ------ 命令执行文件</span><br><span class="line">/lib  # ------ 工具模块</span><br><span class="line">package.json</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="使用commander-js开发命令行工具"><a href="#使用commander-js开发命令行工具" class="headerlink" title="使用commander.js开发命令行工具"></a>使用commander.js开发命令行工具</h2><p>nodejs内置了对命令行操作的支持，node工程下<code>package.json</code>中的<code>bin</code>字段可以定义命令名和关联的执行文件。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"finui-cli"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"finui脚手架工具"</span>,</span><br><span class="line">  <span class="attr">"bin"</span>: &#123;</span><br><span class="line">    <span class="attr">"bi"</span>: <span class="string">"./bin/command.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经过这样配置的nodejs项目，在使用<code>-g</code>选项进行全局安装的时候，会自动在系统的<code>[prefix]/bin</code>目录下创建相应的符号链接（symlink）关联到执行文件。如果是本地安装，这个符号链接会生成在<code>./node_modules/.bin</code>目录下。这样做的好处是可以直接在终端中像执行命令一样执行nodejs文件。关于<code>prefix</code>，可以通过<code>npm config get prefix</code>获取。</p>
<h3 id="hello-commander-js"><a href="#hello-commander-js" class="headerlink" title="hello,commander.js"></a>hello,commander.js</h3><p>在bin目录下创建一个<code>command.js</code>文件，用于处理命令行的逻辑。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch ./bin/command.js</span><br></pre></td></tr></table></figure>
<p><a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fcommander.js" target="_blank" rel="noopener">commander.js</a>可以自动的解析命令和参数，合并多选项，处理短参，等等，功能强大，上手简单。具体的使用方法可以参见官方文档。<br>在<code>command.js</code>编写命令行的入口逻辑</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>)  <span class="comment">// npm i commander -D</span></span><br><span class="line"></span><br><span class="line">program.version(<span class="string">'1.0.0'</span>)</span><br><span class="line">	.usage(<span class="string">'&lt;command&gt; [项目名称]'</span>)</span><br><span class="line">	.command(<span class="string">'hello'</span>, <span class="string">'hello'</span>)</span><br><span class="line">	.parse(process.argv)</span><br></pre></td></tr></table></figure>
<p>然后继续在<code>bin</code>目录下新建文件<code>command-hello.js</code>，并写一个打印语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(&apos;hello, commander&apos;)</span><br></pre></td></tr></table></figure>
<p>这样，通过node命令测试一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node ./bin/command hello</span><br></pre></td></tr></table></figure>
<p>不出意外，可以在终端上看到一句话：<code>hello, commander</code>。</p>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h3 id="新建项目目录"><a href="#新建项目目录" class="headerlink" title="新建项目目录"></a>新建项目目录</h3><p>在正式下载项目模板之前，还需要判断当前目录是否有相同名称的项目，如果没有则开始创建项目。<br>在<code>lib</code>目录下创建<code>createProject.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">'glob'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">projectName</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> list = glob.sync(<span class="string">'*'</span>)</span><br><span class="line">    <span class="keyword">let</span> rootName = path.basename(process.cwd())</span><br><span class="line">    <span class="keyword">if</span> (list.length)&#123;</span><br><span class="line">      <span class="keyword">if</span> (list.filter(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> fileName = path.resolve(process.cwd(), path.join(<span class="string">'.'</span>, name))</span><br><span class="line">        <span class="keyword">const</span> isDir = fs.statSync(fileName).isDirectory()</span><br><span class="line">        <span class="keyword">return</span> name.indexOf(projectName) !== <span class="number">-1</span> &amp;&amp; isDir</span><br><span class="line">      &#125;).length !== <span class="number">0</span>) &#123;</span><br><span class="line">        reject(<span class="string">`<span class="subst">$&#123;projectName&#125;</span> directory is exist`</span>)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        resolve(<span class="built_in">Promise</span>.resolve(projectName))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rootName === projectName)&#123;</span><br><span class="line">      inquirer.prompt([</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'buildInCurrent'</span>,</span><br><span class="line">          message: <span class="string">'The current directory is empty and the directory name is the same as the project name. Do you want to create a new project directly in the current directory?'</span>,</span><br><span class="line">          type: <span class="string">'confirm'</span>,</span><br><span class="line">          <span class="keyword">default</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]).then(<span class="function"><span class="params">answer</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="built_in">Promise</span>.resolve(answer.buildInCurrent ? projectName : <span class="string">'.'</span>))</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      resolve(<span class="built_in">Promise</span>.resolve(projectName))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用download-git-repo下载项目模板"><a href="#使用download-git-repo下载项目模板" class="headerlink" title="使用download-git-repo下载项目模板"></a>使用download-git-repo下载项目模板</h3><p>在<code>lib</code>目录下创建<code>download.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A library of download-git-repo to download according the git address</span></span><br><span class="line"><span class="comment"> * Alan&lt;alan<span class="doctag">@fanruan</span>.com&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> download = <span class="built_in">require</span>(<span class="string">'download-git-repo'</span>)</span><br><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>) <span class="comment">// show download spinner</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">url, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> spinner = ora(<span class="string">`it is downloading template, source address: https://github.com/<span class="subst">$&#123;url&#125;</span>`</span>)</span><br><span class="line">    spinner.start()</span><br><span class="line">    download(<span class="string">'direct:https://github.com/'</span> + url, target, &#123; <span class="attr">clone</span>: <span class="literal">true</span> &#125;, (err) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        spinner.fail()</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        spinner.succeed()</span><br><span class="line">        resolve(target)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>download-git-repo</code> 的作用就是从GitHub等托管代码的地方将模板代码下载下来。</p>
<h2 id="对模板进行自定义处理"><a href="#对模板进行自定义处理" class="headerlink" title="对模板进行自定义处理"></a>对模板进行自定义处理</h2><p>通常我们可能会希望项目模板中有些文件或者代码可以动态处理。比如：<br>新项目的名称、版本号、描述等信息等，可以通过脚手架的交互进行输入，然后将输入插入到模板中<br>对于这类情况，我们还需要借助其他工具包来完成。</p>
<h3 id="使用inquirer-js处理命令行交互"><a href="#使用inquirer-js处理命令行交互" class="headerlink" title="使用inquirer.js处理命令行交互"></a>使用inquirer.js处理命令行交互</h3><p>对于命令行交互的功能，可以用<a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FSBoudrias%2FInquirer.js" target="_blank" rel="noopener">inquirer.js</a>来处理。用法其实很简单：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>)  <span class="comment">// npm i inquirer -D</span></span><br><span class="line"></span><br><span class="line">inquirer.prompt([</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'projectName'</span>,</span><br><span class="line">    message: <span class="string">'请输入项目名称'</span></span><br><span class="line">  &#125;</span><br><span class="line">]).then(<span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`你输入的项目名称是：<span class="subst">$&#123;answers.projectName&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><code>prompt()</code>接受一个问题对象的数据，在用户与终端交互过程中，将用户的输入存放在一个答案对象中，然后返回一个Promise，通过<code>then()</code>获取到这个答案对象。so easy！</p>
<p>在<code>lib</code>目录下创建<code>changeProject.js</code>, 通过命令行交互获取项目名称、版本号、描述等信息，并替换到<code>package.json</code>中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">projectName</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fileName = <span class="string">`./<span class="subst">$&#123;projectName&#125;</span>/package.json`</span></span><br><span class="line">  <span class="keyword">const</span> package = <span class="keyword">await</span> fs.readFileSync(fileName)</span><br><span class="line">  <span class="keyword">const</span> packageJson = <span class="built_in">JSON</span>.parse(package.toString());</span><br><span class="line">  <span class="keyword">const</span> answers = <span class="keyword">await</span> getProjectMessage(projectName);</span><br><span class="line">  packageJson.name = answers.projectName</span><br><span class="line">  packageJson.version = answers.projectVersion</span><br><span class="line">  packageJson.description = answers.projectDescription</span><br><span class="line">  <span class="keyword">await</span> fs.writeFileSync(fileName, <span class="built_in">JSON</span>.stringify(packageJson, <span class="literal">null</span>, <span class="number">4</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getProjectMessage</span>(<span class="params">projectName</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> inquirer.prompt([</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'projectName'</span>,</span><br><span class="line">      message: <span class="string">'name'</span>,</span><br><span class="line">      <span class="keyword">default</span>: projectName</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'projectVersion'</span>,</span><br><span class="line">      message: <span class="string">'version'</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'1.0.0'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'projectDescription'</span>,</span><br><span class="line">      message: <span class="string">'description'</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">`A project named <span class="subst">$&#123;projectName&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就这样，一个基本的脚手架工具就已经完成了。</p>
<h2 id="上传到npm"><a href="#上传到npm" class="headerlink" title="上传到npm"></a>上传到npm</h2><p>NPM是随同NodeJS一起安装的javascript包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p>
<ol>
<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li>
<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li>
<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li>
</ol>
<h4 id="1-注册一个npm账号"><a href="#1-注册一个npm账号" class="headerlink" title="1. 注册一个npm账号"></a>1. 注册一个npm账号</h4><p>前往<a href="https://www.npmjs.com/" target="_blank" rel="noopener">NPM</a>官网进行注册</p>
<h4 id="2-登录npm"><a href="#2-登录npm" class="headerlink" title="2. 登录npm"></a>2. 登录npm</h4><p>使用终端命令行，如果是第一次发布包，执行以下命令，然后输入前面注册好的NPM账号，密码和邮箱，将提示创建成功。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure>
<p>如果不是第一次发布包，执行以下命令进行登录，同样输入NPM账号，密码和邮箱</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure>
<p><strong>注意：npm adduser成功的时候默认你已经登陆了，所以不需要再进行npm login了</strong></p>
<p>接着先进入项目文件夹下，然后输入以下命令进行发布</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure>
<p>本教程已发布到<a href="https://www.npmjs.com/package/finui-cli" target="_blank" rel="noopener">npm</a>上，可以直接安装体验：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -g finui-cli</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>使用React一年以来给我带来的最大收获[英文翻译]</title>
    <url>/archives/60376.html</url>
    <content><![CDATA[<h2 id="使用React一年以来给我带来的最大收获"><a href="#使用React一年以来给我带来的最大收获" class="headerlink" title="使用React一年以来给我带来的最大收获"></a>使用React一年以来给我带来的最大收获</h2><p>原文链接：<a href="https://medium.freecodecamp.org/mindset-lessons-from-a-year-with-react-1de862421981" target="_blank" rel="noopener">The most important lessons I’ve learned after a year of working with React</a><br>原文作者：<a href="https://medium.freecodecamp.org/@tomas.eglinskas?source=post_header_lockup" target="_blank" rel="noopener">Tomas Eglinskas</a></p>
<hr>
<p><img src="https://cdn-images-1.medium.com/max/1250/1*TheYckj9udF4qLjoJW8sjg.png" alt="这并不是我写的, 但是我知道它肯定引起了你的注意 🔪"></p>
<p>涉猎一项新技术是一件十分麻烦的事情，你会时常发现你陷入了教程和文章的海洋中，伴随着数以百万计的个人观点，而且每个人都自诩找到了”<strong>正确而又完美的道路</strong>“。这会让我们迷惑的担心我们所选择的教程是否会浪费时间。所以在”陷入海洋”之前，我们必须要了解技术的基本概念，然后我们需要去建立以技术为基础的思维方式。如果我们开始去学习<code>React</code>,我们首先要做的就是用<code>React</code>的思想去思考，只有这样我们以后才能将各种心态融为一体。<br>在本文中，我将介绍给大家我从我个人使用<code>React</code>的经历中总经的经验教训，其中包括白天的工作、晚上的个人项目甚至还有在本地<code>js</code>活动中发表的演讲。<br>所以，让我们开始吧。<br><a id="more"></a></p>
<h3 id="React正在迅速发展，所以你也要跟上时代的脚步"><a href="#React正在迅速发展，所以你也要跟上时代的脚步" class="headerlink" title="React正在迅速发展，所以你也要跟上时代的脚步"></a>React正在迅速发展，所以你也要跟上时代的脚步</h3><p>如果你还记得<code>16.3.0</code>版本的最初公告，那你一定还记得当时人们是多么兴奋。<br>下面是我们得到的一些变化和改进：</p>
<ul>
<li>官方的<code>context api</code></li>
<li><code>createRef Api</code></li>
<li><code>forwardRef Api</code></li>
<li>严格模式</li>
<li>组件生命周期变化</li>
</ul>
<p><code>React</code>小组和所有贡献者都在为了改进我们钟爱的技术而努力着，在<code>16.4.0</code>的版本中，我们获得了<a href="https://reactjs.org/blog/2018/05/23/react-v-16-4.html" target="_blank" rel="noopener">Pointer Events</a>.异步渲染、缓存、版本<code>17.0.0</code>以及好多尚未知晓的内容接下来肯定也会有进一步的更新，只不过是时间的问题。所以如果你想技术领先，就必须第一时间了解社区中发生的事情。了解事物是如何运作的以及它们为何被开发出来。 了解正在解决的问题以及如何使开发更容易。 这些会对你帮助很大。</p>
<h3 id="不要害怕将你的代码分割成小的片段"><a href="#不要害怕将你的代码分割成小的片段" class="headerlink" title="不要害怕将你的代码分割成小的片段"></a>不要害怕将你的代码分割成小的片段</h3><p><code>React</code>是基于组件的，所以你需要利用这个概念而不是害怕把大的部分分割成小的部分。有时候一个简单的组件只有4-5行代码组成，并且在某种情况下，这完全没问题。这样做的好处就是如果有新人进来，不需要多久他就可以对整个系统了然于胸。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是多么容易令人理解</span></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  [</span><br><span class="line">   &lt;ChangeButton</span><br><span class="line">    onClick=&#123;<span class="keyword">this</span>.changeUserApprovalStatus&#125;</span><br><span class="line">    text=<span class="string">"Let’s switch it!"</span></span><br><span class="line">   /&gt;,</span><br><span class="line">   &lt;UserInformation status=&#123;status&#125;/&gt; </span><br><span class="line">  ]</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>你不必开发含有复杂逻辑的组件，他们可以只是视图组件，如果这样可以提高代码的可读性和可测试性，并且进一步减少代码异味，那么对团队的每个人来说这都是一场巨大的胜利。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ErrorMessage <span class="keyword">from</span> <span class="string">'./ErrorMessage'</span>;</span><br><span class="line"><span class="keyword">const</span> NotFound = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;ErrorMessage</span><br><span class="line">    title=<span class="string">"Oops! Page not found."</span></span><br><span class="line">    message=<span class="string">"The page you are looking for does not exist!"</span></span><br><span class="line">    className=<span class="string">"test_404-page"</span></span><br><span class="line">  /&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>正如上面这个例子，属性是不变的，所以我们可以把这个只用来显示错误信息<code>Not Found</code>的页面做成一个纯组件，仅此而已。<br>另外，如果您不喜欢在任何地方都使用CSS类作为类名，我建议使用样式化组件。 这可以提高可读性。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const Number = styled.h1`</span><br><span class="line">  font-size: 36px;</span><br><span class="line">  line-height: 40px;</span><br><span class="line">  margin-right: 5px;</span><br><span class="line">  padding: 0px;</span><br><span class="line">`;</span><br><span class="line">//..</span><br><span class="line">&lt;Container&gt;</span><br><span class="line">  &lt;Number&gt;&#123;skipRatePre&#125;&lt;/Number&gt;</span><br><span class="line">  &lt;InfoName&gt;Skip Rate&lt;/InfoName&gt;</span><br><span class="line">&lt;/Container&gt;</span><br></pre></td></tr></table></figure></p>
<p>如果你是因为担心污染文件夹而害怕创建更多的组件，请重新考虑如何构建代码。 我一直在使用<a href="https://hackernoon.com/fractal-a-react-app-structure-for-infinite-scale-4dab943092af" target="_blank" rel="noopener">分形结构</a>，它很棒。</p>
<h3 id="不要因循守旧-要变得先进"><a href="#不要因循守旧-要变得先进" class="headerlink" title="不要因循守旧-要变得先进"></a>不要因循守旧-要变得先进</h3><p>有时候你可能会认为你所了解的东西太欠缺还不足以让你去了解更高级的东西，但是通常你不应该担心太多，请接收挑战并证明之前自己是错的。通过掌握高级技巧并推动自己，你将会了解更多基础知识以及如果讲他们用于更大的事情。下面是你可以去探索的一些模式：</p>
<ul>
<li>复合组件</li>
<li>高阶组件</li>
<li><code>Render Props</code></li>
<li><code>Smart</code>和<code>Dumb1</code>组件</li>
<li>还有许多其他的(尝试分析)<br>弄懂了这些，你就会知道他们在何处使用以及使用他们的原因，你会对<code>React</code>用起来感觉更舒服。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 像是魔法？</span><br><span class="line">// 如果你真的尝试了就会发现其实没有你想象中那么复杂</span><br><span class="line">render() &#123;</span><br><span class="line">  const children = React.Children.map(this.props.children,</span><br><span class="line">   (child, index) =&gt; &#123;</span><br><span class="line">      return React.cloneElement(child, &#123;</span><br><span class="line">        onSelect: () =&gt; this.props.onTabSelect(index)</span><br><span class="line">    &#125;);    </span><br><span class="line"> &#125;);  </span><br><span class="line"> return children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>另外，不要害怕在工作中尝试新的事物，当然是在某些范围内，不要只是在个人项目中实验。人们会问问题，这是十分正常的事情，你的责任就是用强有力的争吵来捍卫你的工作和决定。你的目标应该是解决现有问题，进一步开发或者只是清理代码，你是你被拒绝了，相对于沉默而言你也会收获更多。</p>
<h3 id="不要让事情变得过度复杂"><a href="#不要让事情变得过度复杂" class="headerlink" title="不要让事情变得过度复杂"></a>不要让事情变得过度复杂</h3><p>这个听起来像和之前的观点矛盾了，但是并不是这样，在生活中，或者在任何地方，我们必须保持中庸，不要过度炫耀工作，我们必须务实，让代码变得更加容易理解才是我们的目的。如果你并不需要<code>Redux</code>，你使用它的原因只是因为每个人都在使用它而并不知道它的真正作用，请不要这样，请保持主见并且不要被别人影响到。有些时候你可能认为利用最新技术并编写复杂的代码这样你就可以对全世界说:”看，我不是初级工程师，我正在成为高级工程师，看看我能做些什么！”。实话实说，这是我刚开始编程时的心态，但是随着时间的推移你将会理解编写的代码相对于炫耀来说，真正起作用的才更容易被人接受。</p>
<ol>
<li>同事可以处理你的项目，并且你不是唯一负责开发/修复/测试&lt;等等&gt;的人。</li>
<li>团队之间不需要长时间的会议就能理解别人做的事情，几分钟的讨论就够了。</li>
<li>当你的同事出去度假两周时，你来接手他的任务，而且你并不需要因此工作8个小时，因为一个小时就够了。<br>人们会尊重那些让别人生活更轻松的人。 因此，如果你的目标是获得尊重，提升排名并进行改进，则需要为团队而不是自己编写代码。<br>你将成为每个人最喜欢的团队成员。</li>
</ol>
<h3 id="重构，重构然后重构—这是再正常不过的"><a href="#重构，重构然后重构—这是再正常不过的" class="headerlink" title="重构，重构然后重构—这是再正常不过的"></a>重构，重构然后重构—这是再正常不过的</h3><p>你会十几次得改变你的想法，尽管你的项目经理修改需求会更加频繁，其他人会批评你的工作，你也会批评你自己，结果是你需要一遍一遍得修改代码。但是不要担心，这是一个自然的学习过程，没有错误和异常，我们就无法提升。我们跌倒的次数越多，恢复起来就越容易。但是这里有一个提示，确保你测试的是当前的代码，烟雾，单位，整合，快照 - 不要对他们感到害怕。当测试可以解决很多宝贵时间时每个人都会遇到或者都将会遇到一个问题，如果你像其他人一样认为这会浪费很多时间，请试着思考一下：</p>
<ol>
<li>不必和你的同事一起解释事情是如何运作的。</li>
<li>你不必和你的同事一起解释为什么事情会崩溃。</li>
<li>您不必为您的同事修复错误。</li>
<li>您将不必修复3周后发现的错误。</li>
<li>你将有时间做你想要的东西。<br>这些都是有非常大的好处。</li>
</ol>
<h3 id="如果你喜欢它，你将会茁壮成长"><a href="#如果你喜欢它，你将会茁壮成长" class="headerlink" title="如果你喜欢它，你将会茁壮成长"></a>如果你喜欢它，你将会茁壮成长</h3><p>在过去的一年里，我的目标是在React上做得更好。所以我想谈谈它。我希望别人和我一起享受。我可以不停地坐着整夜编码，看着各种各样的谈话，享受它的每一分钟。事实就是，如果你想要什么，不知为何，每个人都开始帮助你。上个月，我向一群200人发表了我的第一次React演讲。在这一年期间，我通过各种模式，范例和内部运作和<code>React</code>相处起来变得更强大，更舒服。我可以进行高级讨论并向其他人讲授我不敢触及的话题。而今天我仍然感受到一年前我所感受到的同样的兴奋和享受。所以我建议每个人都问自己：”你喜欢你现在做的事情吗？”如果没有，继续寻找你可以谈论几个小时的特殊事情，每晚了解，并为之开心。因为我们必须找到最接近我们心灵的东西。成功不可强求，但是可以实现。如果我可以回到一年前的时间，这些正是我要对即将踏上学习的旅程的我所说的话。<br>谢谢你的阅读！<br>如果你发现这篇文章很有帮助，👏👏👏.</p>
]]></content>
      <categories>
        <category>英文翻译</category>
      </categories>
      <tags>
        <tag>英文翻译</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode插件机制</title>
    <url>/archives/20807.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Visual Studio Code（VS Code）近年来获得了爆炸式增长，成为广大开发者工具库中的必备神器。它作为一个开源项目，也吸引了无数第三方开发者和终端用户，成为顶尖开源项目之一。它在功能上做到了够用，体验上做到了好用，更在拥有海量插件的情况下做到了简洁流畅，实属难能可贵。通过插件来扩展功能的做法已经是司空见惯了，<strong>但如何保证插件和原生功能一样优秀呢？历史告诉我们：不能保证。</strong></p>
<p>大家可以参考Eclipse，插件模型可以说是做得非常彻底了，功能层面也是无所不能，但存在几个烦人的问题：不稳定、难用、慢，所以不少用户转投IntelliJ的怀抱。可谓成也插件，败也插件。</p>
<p><strong>问题的本质在于信息不对称，它导致不同团队写出来的代码，无论是思路还是质量，都不一致</strong>。最终，用户得到了一个又乱又卡的产品。所以要让插件在稳定性、速度和体验的层面都做到和原生功能统一，只能是一个美好的愿望。</p>
<p>来看看其他IDE是怎么做的，<strong>Visual Studio自己搞定所有功能，并且做到优秀，让别人无事可做</strong>，这也成就了其“宇宙第一IDE”的美名；IntelliJ与之相仿，开箱即用，插件可有可无。这么看起来，自己搞定所有的事情是个好办法，但大家是否知道，Visual Studio背后有上千人的工程团队，显然，这不是VS Code这二十几号人能搞定的。他们选择了让大家来做插件，那怎么解决Eclipse所遇到的问题呢？</p>
<p>这里分享一个小知识——Eclipse核心部分的开发者就是早期的VS Code团队。嗯，所以他们没有两次踏入同一条河流。<strong>与Eclipse不同，VS Code选择了把插件关进盒子里</strong>。这样做首先解决的问题就是<strong>稳定性</strong>，这个问题对于VS Code来说尤为重要。都知道VS Code基于Electron，实质上是个Node.js环境，单线程，任何代码崩了都是灾难性后果。所以VS Code干脆不信任任何人，把插件们放到单独的进程里，任你折腾，主程序妥妥的。<br><a id="more"></a></p>
<h2 id="进程模型"><a href="#进程模型" class="headerlink" title="进程模型"></a>进程模型</h2><p>VSCode中包含主进程，渲染进程，同时因为VSCode提供了插件的扩展能力，又出于安全稳定性的考虑，图中又多了一个Extension Host，其实这个Extension Host也是一个独立的进程，用于运行我们的插件代码。并且同渲染进程一样，彼此都是独立互不影响的。Extension Host Process暴露了一些VSCode的API供插件开发者去使用。</p>
<p><img src="http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1574653513904" alt></p>
<p>至此，我们了解到VS Code里至少有3个进程：</p>
<ul>
<li>Electron Main Process：App主进程</li>
<li>Electron Renderer Process：UI进程</li>
<li>Extension Host Process：插件宿主进程，给插件提供执行环境</li>
</ul>
<p>其中Extension Host Process（每个VS Code窗体）只存在一个，所有插件都在该进程执行，<em>而不是每个插件一个独立进程</em></p>
<p>注意，插件宿主进程是个<em>普通的Node进程</em>（<code>childProcess.fork()</code>出来的），并不是Electron进程，而且<em>被限制了不能使用electron。</em></p>
<h3 id="进程间通信方式"><a href="#进程间通信方式" class="headerlink" title="进程间通信方式"></a>进程间通信方式</h3><p>Extension Host与Main之间的通信是通过<code>fork()</code>内置的IPC来完成的，具体如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Support logging from extension host</span></span><br><span class="line"><span class="keyword">this</span>._extensionHostProcess.on(<span class="string">'message'</span>, msg =&gt; &#123;</span><br><span class="line"> <span class="keyword">if</span> (msg &amp;&amp; (&lt;IRemoteConsoleLog&gt;msg).type === '__$console') &#123;</span><br><span class="line">   this._logExtensionHostMessage(&lt;IRemoteConsoleLog&gt;msg);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这里只是单向通信（<code>插件 -&gt; Main</code>），实际上可以通过<code>this._extensionHostProcess.send({msg})</code>完成另一半（<code>Main -&gt; 插件</code>）。</p>
<p>P.S.关于进程间通信的更多信息，请查看Nodejs进程间通信。</p>
<h2 id="扩展能力"><a href="#扩展能力" class="headerlink" title="扩展能力"></a>扩展能力</h2><p>VS Code插件<strong>不适合做UI定制</strong>，vscode为插件提供了丰富的扩展能力，但<em>不允许插件直接访问底层UI DOM</em>（也就是说插件难以改变IDE外观，UI定制受限），UI DOM这一层可能会随着优化频繁变动，VS Code不希望这些优化项受限于插件依赖，所以干脆把UI定制能力限制起来，除UI定制之外的，IDE相关的功能型特性都是支持扩展的，如基础的语法高亮/API提示、引用跳转（转到定义）/文件搜索、主题定制，高级的debug协议等等。</p>
<p>P.S.实际上，非要扩展UI，也是有办法的（逃出插件运行环境，但要费不少力气），具体见<a href="https://github.com/Microsoft/vscode/issues/3011" target="_blank" rel="noopener">access electron API from vscode extension</a>。</p>
<h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>为了性能与兼容性，<em>插件在独立的进程（称为extension host process）中运行</em>，并且不允许直接访问DOM，所以提供了一套内置的UI组件，比如智能提示（IntelliSense）</p>
<p>所以插件崩溃或无响应不影响IDE正常运行，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">activate</span>(<span class="params">context: vscode.ExtensionContext</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// hang up</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个插件的死循环并不影响IDE的正常使用和其它插件的加载/激活，但在进程列表能够看到Code Helper的CPU占用接近100%，<em>进程级沙箱</em>保证了插件机制的稳定性。</p>
<h2 id="核心理念"><a href="#核心理念" class="headerlink" title="核心理念"></a>核心理念</h2><h3 id="稳定性：插件隔离"><a href="#稳定性：插件隔离" class="headerlink" title="稳定性：插件隔离"></a>稳定性：插件隔离</h3><p>插件可能会影响启动性能和IDE自身的稳定性，所以通过进程隔离来解决这个问题，插件运行在独立的进程中，不影响IDE及其启动时间。这样做是从用户角度考虑的，希望<em>用户对IDE拥有完全的控制力</em>，无论插件在做什么，都不影响IDE基本功能的正常使用。</p>
<p>P.S.extension host process是个特殊的Node进程，能够访问VS Code扩展API，VS Code也对这种进程提供了debug支持。</p>
<h3 id="性能：插件激活"><a href="#性能：插件激活" class="headerlink" title="性能：插件激活"></a>性能：插件激活</h3><p><strong>插件都是懒加载的</strong>（as late as possible），只在特定场景才加载/激活，所有在此之前也不耗费内存等资源。实现上是插件注册特定激活事件（activation events），由IDE来触发执行，比如markdown插件只在用户代开md文件时才需要激活。</p>
<h4 id="激活事件-Activation-Events"><a href="#激活事件-Activation-Events" class="headerlink" title="激活事件(Activation Events)"></a>激活事件(Activation Events)</h4><p>vscode插件拥有6种激活方式：</p>
<ul>
<li>onLanguage:${language} 打开特定语言的文档</li>
<li>onCommand:${command} 通过Command Palette执行特定命令</li>
<li>onDebug 进入调试模式</li>
<li>workspaceContains:${toplevelfilename} 打开的文件夹里含有特定文件</li>
<li>onView:${viewId} 展开指定view</li>
<li>* 打开IDE就激活</li>
</ul>
<p>除<code>&quot;activationEvents&quot;: [&quot;*&quot;]</code>外都是条件激活，只在特定场景或满足特定条件时才加载/激活插件。</p>
<h5 id="activationEvents-onLanguage"><a href="#activationEvents-onLanguage" class="headerlink" title="activationEvents.onLanguage"></a>activationEvents.onLanguage</h5><ul>
<li>当某种语言的文件被打开时，该扩展就会被激活。</li>
<li>该扩展使用语言标记符（a language identifier value）。</li>
<li>可以在<code>activationEvents</code>数组中声明多种语言。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;activationEvents&quot;: [</span><br><span class="line">    &quot;onLanguage:json&quot;,</span><br><span class="line">    &quot;onLanguage:markdown&quot;,</span><br><span class="line">    &quot;onLanguage:typescript&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h5 id="activationEvents-onCommand"><a href="#activationEvents-onCommand" class="headerlink" title="activationEvents.onCommand"></a>activationEvents.onCommand</h5><p>调用命令就会激活该扩展。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;activationEvents&quot;: [</span><br><span class="line">    &quot;onCommand:extension.sayHello&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h5 id="activationEvents-onDebug"><a href="#activationEvents-onDebug" class="headerlink" title="activationEvents.onDebug"></a>activationEvents.onDebug</h5><p>启动调试之前会激活该事件。</p>
<p>还有两个更细粒度的激活事件：</p>
<ul>
<li>onDebugInitialConfigurations:在调用DebugConfigurationProvider的provideDebugConfigurations方法之前会被调用。</li>
<li>onDebugResolve:type:在调用DebugConfigurationProvider的resolveDebugConfiguration方法之前会被调用。</li>
</ul>
<p>经验法则：如果该调试扩展是轻量级的，就使用onDebug。 如果是重量级的，就使用onDebugInitialConfigurations或者onDebugResolve，使用哪一个取决于DebugConfigurationProvider是否实现了provideDebugConfigurations或者resolveDebugConfiguration方法。</p>
<h5 id="activationEvents-workspaceContains"><a href="#activationEvents-workspaceContains" class="headerlink" title="activationEvents.workspaceContains"></a>activationEvents.workspaceContains</h5><p>每当打开文件夹，并且该文件夹至少匹配一个与glob pattern有关的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;activationEvents&quot;: [</span><br><span class="line">    &quot;workspaceContains:**/.editorconfig&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h5 id="activationEvents-onFileSystem"><a href="#activationEvents-onFileSystem" class="headerlink" title="activationEvents.onFileSystem"></a>activationEvents.onFileSystem</h5><p>读取到特定格式(specific scheme)的文件或者文件夹，就会激活该扩展，特定格式通常是指文件格式(file-scheme)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;activationEvents&quot;: [</span><br><span class="line">    &quot;onFileSystem:sftp&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h5 id="activationEvents-onView"><a href="#activationEvents-onView" class="headerlink" title="activationEvents.onView"></a>activationEvents.onView</h5><p>打开指定ID的视图，该扩展就会被激活。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;activationEvents&quot;: [</span><br><span class="line">    &quot;onView:nodeDependencies&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h5 id="activationEvents"><a href="#activationEvents" class="headerlink" title="activationEvents.*"></a>activationEvents.*</h5><ul>
<li>只要vscode启动，该扩展就会被激活。</li>
<li>为了更好地用户体验，仅当使用其他激活方式组合无法实现功能时使用该激活事件。</li>
<li>扩展可以监听多个激活事件，这比使用<code>*</code>要好。</li>
</ul>
<h4 id="插件清单文件-Extension-Manifest-File"><a href="#插件清单文件-Extension-Manifest-File" class="headerlink" title="插件清单文件(Extension Manifest File)"></a>插件清单文件(Extension Manifest File)</h4><p>清单文件用来描述插件的meta信息，直接把<code>package.json</code>作为清单文件，并增加了一些特有字段，比如触发插件加载的激活事件（<code>activation events</code>）、插件想要增强的扩展点（<code>contribution points</code>）。</p>
<p>IDE在启动过程中扫一遍插件清单文件，UI相关的就扩展UI，UI无关的就把扩展点与插件功能关联起来。</p>
<p>另外，由于插件的执行环境是Node进程，所以npm package都是可用的，依赖模块同样声明在<code>package.json</code>里。<em>注意</em>，用户安装插件时<em>不会</em>自动<code>npm install</code>，所以需要在发布插件前把依赖模块打包进去，具体见<a href="https://code.visualstudio.com/docs/extensionAPI/patterns-and-principles#_installation-and-packaging" target="_blank" rel="noopener">Installation and Packaging</a>。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>必须</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>Y</td>
<td>string</td>
<td>扩展的名称，全小写，没有空格</td>
</tr>
<tr>
<td>version</td>
<td>Y</td>
<td>string</td>
<td>兼容版本</td>
</tr>
<tr>
<td>publisher</td>
<td>Y</td>
<td>string</td>
<td>发布名称</td>
</tr>
<tr>
<td>engines</td>
<td>Y</td>
<td>object</td>
<td>扩展能够兼容的最小的VS Code代码版本，不能为<code>*</code>。例如^0.10.5表示扩展能够运行的最小的VS Code版本为0.10.5</td>
</tr>
<tr>
<td>license</td>
<td>N</td>
<td>string</td>
<td>许可</td>
</tr>
<tr>
<td>displayName</td>
<td>N</td>
<td>string</td>
<td>市场中显示的扩展的名称</td>
</tr>
<tr>
<td>description</td>
<td>N</td>
<td>string</td>
<td>简短描述您的扩展是什么和做了什么</td>
</tr>
<tr>
<td>categories</td>
<td>N</td>
<td>string[]</td>
<td>扩展所属的类别: [Programming Languages, Snippets, Linters, Themes, Debuggers, Formatters, Keymaps, SCM Providers, Other, Extension Packs, Language Packs]</td>
</tr>
<tr>
<td>keywords</td>
<td>N</td>
<td>array</td>
<td>关键词，使扩展更容易被发现</td>
</tr>
<tr>
<td>main</td>
<td>N</td>
<td>string</td>
<td>扩展入口</td>
</tr>
<tr>
<td>contributes</td>
<td>N</td>
<td>object</td>
<td>扩展描述对象</td>
</tr>
<tr>
<td>activationEvents</td>
<td>N</td>
<td>array</td>
<td>激活事件数组</td>
</tr>
<tr>
<td>badges</td>
<td>N</td>
<td>array</td>
<td>显示在市场侧栏的徽标，分别表示url、href、description</td>
</tr>
<tr>
<td>markdown</td>
<td>N</td>
<td>string</td>
<td>控制扩展市场上使用的markdown渲染引擎，要么是<code>github</code>(default)要么是<code>standard</code></td>
</tr>
<tr>
<td>qna</td>
<td>N</td>
<td>marketplace (default), string, false</td>
<td>控制市场上<code>Q &amp; A</code>链接</td>
</tr>
<tr>
<td>dependencies</td>
<td>N</td>
<td>object</td>
<td>运行时需要的NodeJS依赖。</td>
</tr>
<tr>
<td>devDependencies</td>
<td>N</td>
<td>object</td>
<td>开发时需要的NodeJS依赖。</td>
</tr>
<tr>
<td>extensionDependencies</td>
<td>N</td>
<td>array</td>
<td>此扩展所依赖的扩展的id集合。当该扩展被安装时，所依赖的扩展会一并被安装。扩展的id总是<code>${publisher}.${name}</code></td>
</tr>
<tr>
<td>scripts</td>
<td>N</td>
<td>object</td>
<td>与npm的脚本完全相同，但是带有额外的VS代码特定字段。</td>
</tr>
<tr>
<td>icon</td>
<td>N</td>
<td>string</td>
<td>至少128x128像素的图标路径(视网膜屏幕256 x256)</td>
</tr>
</tbody>
</table>
<h4 id="扩展点（Contribution-Points）"><a href="#扩展点（Contribution-Points）" class="headerlink" title="扩展点（Contribution Points）"></a>扩展点（Contribution Points）</h4><p>即支持的扩展类型，都声明在<code>package.json/contributes</code>下，包括：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">configuration 插件配置项，用户可以通过Settings设置</span><br><span class="line">configurationDefaults 插件配置项默认值</span><br><span class="line">commands  添加命令，用户可以通过Command Palette输入特定命令激活插件功能</span><br><span class="line">menus     添加与命令关联的菜单项，用户点击菜单项时执行对应命令</span><br><span class="line">keybindings 添加与命令关联的快捷键，用户按下特定快捷键时执行对应命令</span><br><span class="line">languages 与文件类型建立关联或扩展新语言，用户打开（满足某些要求的）特定文件类型时执行对应命令</span><br><span class="line">debuggers 添加debugger，通过VS Code debug协议与IDE通信</span><br><span class="line">breakpoints 配合debuggers，声明对debugger支持的（编程）语言类型</span><br><span class="line">grammars 新增TextMate语法描述，语法高亮</span><br><span class="line">themes 添加定制主题</span><br><span class="line">snippets 添加代码片段</span><br><span class="line">jsonValidation 添加json格式校验</span><br><span class="line">views 新增左侧文件查看器视图和调试视图分栏</span><br><span class="line">problemMatchers 添加错误匹配，从lint结果解析出error，warning等</span><br><span class="line">problemPatterns 配合problemMatchers，定义匹配模式</span><br></pre></td></tr></table></figure>
<p><code>menus</code>是<em>唯一的UI扩展官方途径</em>，支持扩展的菜单具体如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Command Palette搜索框下方菜单 commandPalette</span><br><span class="line">文件查看器右键菜单 explorer/context</span><br><span class="line">编辑器</span><br><span class="line">  右键菜单 editor/context</span><br><span class="line">  标题栏菜单 editor/title</span><br><span class="line">  标题栏右键菜单 editor/title/context</span><br><span class="line">调试视图</span><br><span class="line">  调用栈右键菜单 debug/callstack/context</span><br><span class="line">SCM（源码管理）视图</span><br><span class="line">  标题栏菜单 scm/title</span><br><span class="line">  文件分组菜单 scm/resourceGroup/context</span><br><span class="line">  文件状态菜单 scm/resource/context</span><br><span class="line">  文件变动菜单 scm/change/title</span><br><span class="line">左侧视图</span><br><span class="line">  文件查看器分栏 view/title</span><br><span class="line">  调试视图分栏 view/item/context</span><br></pre></td></tr></table></figure>
<h4 id="扩展API"><a href="#扩展API" class="headerlink" title="扩展API"></a>扩展API</h4><h5 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h5><ul>
<li>基于Promise：异步操作都用Promise来描述</li>
<li>取消token：传入<code>CancellationToken</code>作为额外参数来检查取消状态，以及接收取消通知</li>
<li>可释放式资源管理：持有的资源都需要手动释放，例如事件监听，命令，UI交互等</li>
<li>事件API：调用订阅方法（<code>on[Will|Did]VerbNoun</code>）传入listener（接收<code>event</code>参数）返回Disposable</li>
<li>严格空检查：通过TypeScript严格区分<code>undefined</code>和<code>null</code></li>
</ul>
<h5 id="api概览"><a href="#api概览" class="headerlink" title="api概览"></a>api概览</h5><p>API按命名空间组织，全局命名空间如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">commands 执行/注册命令，IDE自身的和其它插件注册的命令都可以，如executeCommand</span><br><span class="line">debug 调试相关API，比如startDebugging</span><br><span class="line">env IDE相关的环境信息，比如machineId, sessionId</span><br><span class="line">extensions 跨插件API调用，extensionDependency声明插件依赖</span><br><span class="line">languages 编程语言相关API，如createDiagnosticCollection, registerDocumentFormattingEditProvider</span><br><span class="line">scm 源码版本控制API，如createSourceControl</span><br><span class="line">window 编辑器窗体相关API，如onDidChangeTextEditorSelection, createTerminal, showTextDocument</span><br><span class="line">workspace 工作空间级API（打开了文件夹才有工作空间），如findFiles, openTextDocument, saveAll</span><br></pre></td></tr></table></figure>
<p>比如可以通过<code>workspace.findFiles + languages.registerDefinitionProvider</code>实现Haste的<em>全局模块引用跳转支持</em></p>
<p>另外，一些API以命令形式提供（即上面提到的“IDE自身的”命令），例如<code>vscode.previewHtml</code>、<code>vscode.openFolder</code>、<code>editorScroll</code>等等。</p>
<h2 id="注入机制"><a href="#注入机制" class="headerlink" title="注入机制"></a>注入机制</h2><p>在使用vscode提供的api时，需要引入<code>vscode</code>模块访问插件可用的API：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import * as vscode from &apos;vscode&apos;</span><br></pre></td></tr></table></figure>
<p>但是我们发现在<code>node_modules</code>下并没有<code>vscode</code>模块，而且<code>vscode</code>模块也名没被<code>define()</code>过，看起来我们<code>require</code>了一个不存在的模块，那么，这个东西是哪里来的？</p>
<p>对<code>require(&#39;vscode&#39;)</code>的过程进行debug，很容易发现做过手脚的地方：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// ref: src/vs/workbench/api/node/extHost.api.impl.ts</span><br><span class="line">function defineAPI(factory: IExtensionApiFactory, extensionPaths: TernarySearchTree&lt;IExtensionDescription&gt;): void &#123; // each extension is meant to get its own api implementation</span><br><span class="line"> const extApiImpl = new Map&lt;string, typeof vscode&gt;();</span><br><span class="line"> let defaultApiImpl: typeof vscode; const node_module = &lt;any&gt;require.__$__nodeRequire(&apos;module&apos;);</span><br><span class="line"> const original = node_module._load;</span><br><span class="line"> node_module._load = function load(request, parent, isMain) &#123;</span><br><span class="line">   if (request !== &apos;vscode&apos;) &#123;</span><br><span class="line">     return original.apply(this, arguments);</span><br><span class="line">   &#125;   // get extension id from filename and api for extension</span><br><span class="line">   const ext = extensionPaths.findSubstr(parent.filename);</span><br><span class="line">   if (ext) &#123;</span><br><span class="line">     let apiImpl = extApiImpl.get(ext.id);</span><br><span class="line">     if (!apiImpl) &#123;</span><br><span class="line">       apiImpl = factory(ext);</span><br><span class="line">       extApiImpl.set(ext.id, apiImpl);</span><br><span class="line">     &#125;</span><br><span class="line">     return apiImpl;</span><br><span class="line">   &#125;   // fall back to a default implementation</span><br><span class="line">   if (!defaultApiImpl) &#123;</span><br><span class="line">     defaultApiImpl = factory(nullExtensionDescription);</span><br><span class="line">   &#125;</span><br><span class="line">   return defaultApiImpl;</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Module._load()</code>方法被劫持了，遇到<code>vscode</code>返回一个虚拟模块，叫做<code>apiImpl</code>。<em>注意</em>，每个插件拿到的API都是独立的（可能是出于插件安全隔离考虑，避免劫持API影响其它插件）。</p>
<h2 id="插件运行"><a href="#插件运行" class="headerlink" title="插件运行"></a>插件运行</h2><p>以vscode.window.setStatusBarMessage(‘Hello World’)为例：</p>
<p>前文我们提到所有的 API 被定义在 extHost.api.impl.ts 文件的 createApiFactory 里，例如 vscode.window.setStatusBarMessage 的实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const window: typeof vscode.window = &#123;</span><br><span class="line">  /* 省略部分代码 */</span><br><span class="line">  setStatusBarMessage(text: string, timeoutOrThenable?: number | Thenable&lt;any&gt;): vscode.Disposable 		&#123;</span><br><span class="line">			return extHostStatusBar.setStatusBarMessage(text, timeoutOrThenable);</span><br><span class="line">   &#125;,</span><br><span class="line">  /* 省略部分代码 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际调用的是 extHostStatusBar.setStatusBarMessage 函数，而 extHostStatusBar 则是 ExtHostStatusBar 的实例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const extHostStatusBar = new ExtHostStatusBar(rpcProtocol);</span><br></pre></td></tr></table></figure>
<p>ExtHostStatusBar 包含了两个方法 createStatusBarEntry 和 setStatusBarMessage，createStatusBarEntry 返回了一个 ExtHostStatusBarEntry ，它被包装了一层代理，在 ExtHostStatusBar 被实例化化的同时也会产生一个 ExtHostStatusBarEntry 实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export class ExtHostStatusBar &#123;</span><br><span class="line"></span><br><span class="line">  private _proxy: MainThreadStatusBarShape;</span><br><span class="line">  private _statusMessage: StatusBarMessage;</span><br><span class="line"></span><br><span class="line">  constructor(mainContext: IMainContext) &#123;</span><br><span class="line">    // 获取代理</span><br><span class="line">    this._proxy = mainContext.getProxy(MainContext.MainThreadStatusBar);</span><br><span class="line">    // 传入 this, StatusBarMessage 中也随即实例化了一个 ExtHostStatusBarEntry</span><br><span class="line">    this._statusMessage = new StatusBarMessage(this);</span><br><span class="line">  &#125;</span><br><span class="line">  /* 省略部分代码 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class StatusBarMessage &#123;</span><br><span class="line"></span><br><span class="line">  private _item: StatusBarItem;</span><br><span class="line">  private _messages: &#123; message: string &#125;[] = [];</span><br><span class="line"></span><br><span class="line">  constructor(statusBar: ExtHostStatusBar) &#123;</span><br><span class="line">    // 调用 createStatusBarEntry </span><br><span class="line">    this._item = statusBar.createStatusBarEntry(void 0, ExtHostStatusBarAlignment.Left, Number.MIN_VALUE);</span><br><span class="line">  &#125;</span><br><span class="line">  /* 省略部分代码 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而在setStatusBarMessage方法中，主要是调用的this._statusMessage.setMessage(text);</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setStatusBarMessage(text: string, timeoutOrThenable?: number | Thenable&lt;any&gt;): Disposable &#123;</span><br><span class="line"></span><br><span class="line">		const d = this._statusMessage.setMessage(text);// 这一句</span><br><span class="line">		let handle: any;</span><br><span class="line"></span><br><span class="line">		if (typeof timeoutOrThenable === &apos;number&apos;) &#123;</span><br><span class="line">			handle = setTimeout(() =&gt; d.dispose(), timeoutOrThenable);</span><br><span class="line">		&#125; else if (typeof timeoutOrThenable !== &apos;undefined&apos;) &#123;</span><br><span class="line">			timeoutOrThenable.then(() =&gt; d.dispose(), () =&gt; d.dispose());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		return new Disposable(() =&gt; &#123;</span><br><span class="line">			d.dispose();</span><br><span class="line">			clearTimeout(handle);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>而 this._statusMessage.setMessage 方法经过层层调用，最终调用了 ExtHostStatusBarEntry 实例的 update 方法，也就是前面的 StatusBarMessage 构造函数中的 this._item.update，而这里就到了重头戏，update 方法中包含了一个 延时为 0 的 setTimeout ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private update(): void &#123;</span><br><span class="line">		if (this._disposed || !this._visible) &#123;</span><br><span class="line">			return;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		clearTimeout(this._timeoutHandle);</span><br><span class="line"></span><br><span class="line">		// Defer the update so that multiple changes to setters dont cause a redraw each</span><br><span class="line">		this._timeoutHandle = setTimeout(() =&gt; &#123;</span><br><span class="line">			this._timeoutHandle = undefined;</span><br><span class="line"></span><br><span class="line">			// Set to status bar</span><br><span class="line">			this._proxy.$setEntry(this.id, this._statusId, this._statusName, this.text, this.tooltip, this.command, this.color,</span><br><span class="line">				this._alignment === ExtHostStatusBarAlignment.Left ? MainThreadStatusBarAlignment.LEFT : MainThreadStatusBarAlignment.RIGHT,</span><br><span class="line">				this._priority);</span><br><span class="line">		&#125;, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的_proxy是通过依赖注入引入的mainThreadStatusBat, 具体则来自：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">constructor(mainContext: IMainContext) &#123;</span><br><span class="line">		this._proxy = mainContext.getProxy(MainContext.MainThreadStatusBar);</span><br><span class="line">		this._statusMessage = new StatusBarMessage(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的 IMainContext 其实就是继承了 IRPCProtocol 的一个别名而已，new ExtHostStatusBar 的参数是一个 rpcProtocol 实例，它被定义在 src/vs/workbench/services/extensions/node/rpcProtocol.ts 中，我们重点看一下 getProxy 的实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public getProxy&lt;T&gt;(identifier: ProxyIdentifier&lt;T&gt;): T &#123;</span><br><span class="line">  // 这里只是根据对应的 identifier 生成对应的 scope 而已，插件调用和 API 的调用一模一样比较方便一些</span><br><span class="line">  const rpcId = identifier.nid;</span><br><span class="line">  // 例如 StatusBar 的 identifier.nid 就是 &apos;MainThreadStatusBar&apos;</span><br><span class="line">  if (!this._proxies[rpcId]) &#123;</span><br><span class="line">    // 缓存中没有代理则生成新的代理</span><br><span class="line">    this._proxies[rpcId] = this._createProxy(rpcId);</span><br><span class="line">  &#125;</span><br><span class="line">  // 返回代理后的对象</span><br><span class="line">  return this._proxies[rpcId];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 创建代理</span><br><span class="line">private _createProxy&lt;T&gt;(rpcId: number): T &#123;</span><br><span class="line">  let handler = &#123;</span><br><span class="line">    get: (target: any, name: string) =&gt; &#123;</span><br><span class="line">      // target 即表示 scope，name 即为被调用方法名</span><br><span class="line">      if (!target[name] &amp;&amp; name.charCodeAt(0) === CharCode.DollarSign) &#123;</span><br><span class="line">        target[name] = (...myArgs: any[]) =&gt; &#123;</span><br><span class="line">          // 插件中的 API 实际被代理到 remoteCall，因为这是一个 RPC 协议</span><br><span class="line">	  		return this._remoteCall(rpcId, name, myArgs);</span><br><span class="line">	&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      return target[name];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  // 返回 API 代理</span><br><span class="line">  return new Proxy(Object.create(null), handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>_createProxy 返回的是一个代理对象，即它代理了主线程中真正实现这些 API 的对象，例如 ‘MainThreadStatusBar’ 返回的是一个 MainThreadStatusBarShape 类型的代理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export interface MainThreadStatusBarShape extends IDisposable &#123;</span><br><span class="line">  $setEntry(id: number, extensionId: string, text: string, tooltip: string, command: string, color: string | ThemeColor, alignment: MainThreadStatusBarAlignment, priority: number): void;</span><br><span class="line">  $dispose(id: number): void;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>插件 API 定义中并没有实现这个接口，它只需要被主线程中对应的模块实现即可，前面我们说到 setStatusMessage 最终调用了 this._proxy.$setEntry。</p>
<p>_remoteCall 里会调用 RPCProcotol 的静态方法 serializeRequest 将 rpcId 方法名以及参数序列化成一个 Buffer 并发送给主线程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const msg = MessageIO.serializeRequest(req, rpcId, methodName, args, !!cancellationToken, this._uriReplacer);</span><br><span class="line">// 省略部分代码</span><br><span class="line">this._protocol.send(msg);</span><br></pre></td></tr></table></figure>
<p>关于主线程中接收到消息如何处理其实已经不用多说了，根据 rpcId 找到对应的 Services 以及方法，传入参数即可。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>VS Code像一颗耀眼的星星，吸引着成千上万开发者为其添砖加瓦。从VS Code的成功中，我们看到了好的设计和工程实践能创造多少奇迹。放眼软件产业，各个层面的模式不断被刷新，让人激动之余，也要求从业者不断提高技能水平。从个人学习的角度来看，了解这些模式诞生的前因后果，理解工程实践中的决策过程是非常有利于提高工程能力的。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>使用jenkins进行前端项目自动部署(ubuntu)</title>
    <url>/archives/27150.html</url>
    <content><![CDATA[<p>Jenkins 是一款业界流行的开源持续集成工具，广泛用于项目开发，具有自动化构建、测试和部署等功能。<br><a id="more"></a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>由于 jenkins是基于<code>java</code>环境运行的，所以首先需要安装<code>java</code>环境。</p>
<h3 id="1-安装依赖包，使得add-apt-repository命令可以进行"><a href="#1-安装依赖包，使得add-apt-repository命令可以进行" class="headerlink" title="1.安装依赖包，使得add-apt-repository命令可以进行"></a>1.安装依赖包，使得add-apt-repository命令可以进行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install software-properties-common</span><br></pre></td></tr></table></figure>
<h3 id="2-通过add-apt-repository加载第三方的开源软件源"><a href="#2-通过add-apt-repository加载第三方的开源软件源" class="headerlink" title="2.通过add-apt-repository加载第三方的开源软件源"></a>2.通过add-apt-repository加载第三方的开源软件源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team/java</span><br></pre></td></tr></table></figure>
<h3 id="3-更新软件包列表，并安装jdk"><a href="#3-更新软件包列表，并安装jdk" class="headerlink" title="3.更新软件包列表，并安装jdk"></a>3.更新软件包列表，并安装jdk</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install oracle-java8-installer</span><br></pre></td></tr></table></figure>
<p>也可以安装 <code>openjdk</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure>
<p>安装器会提示同意<code>oracle</code>的服务条款，选择<code>ok</code>,然后选择<code>yes</code> 即可。</p>
<h3 id="4-通过查看java版本，来测试java环境是否安装成功"><a href="#4-通过查看java版本，来测试java环境是否安装成功" class="headerlink" title="4.通过查看java版本，来测试java环境是否安装成功"></a>4.通过查看java版本，来测试java环境是否安装成功</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -version</span><br><span class="line">java version &quot;1.8.0_171&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_171-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.171-b11, mixed mode)</span><br></pre></td></tr></table></figure>
<h3 id="5-安装jenkins"><a href="#5-安装jenkins" class="headerlink" title="5.安装jenkins"></a>5.安装jenkins</h3><p>将存储库密钥添加到系统。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -</span><br></pre></td></tr></table></figure></p>
<p>我们将Debian包存储库地址附加到服务器的<code>sources.list</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo deb http://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list</span><br></pre></td></tr></table></figure></p>
<p>更新存储库<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></p>
<p>安装<code>Jenkins</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install jenkins</span><br></pre></td></tr></table></figure></p>
<p>安装完成后，jenkins的文件目录如下所示<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装目录：/var/lib/jenkins  </span><br><span class="line">日志目录：/var/log/jenkins/jenkins.log</span><br></pre></td></tr></table></figure></p>
<h3 id="6-修改端口号"><a href="#6-修改端口号" class="headerlink" title="6.修改端口号"></a>6.修改端口号</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/default/jenkins</span><br></pre></td></tr></table></figure>
<h3 id="7-启动"><a href="#7-启动" class="headerlink" title="7.启动"></a>7.启动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service jenkins start</span><br></pre></td></tr></table></figure>
<p>打开 <code>localhost:端口号</code>即可。<br><img src="https://pic.xiaohuochai.site/blog/jenkins1.png" alt><br>然后在服务器的指定目录找到密码登录</p>
<h2 id="安装配置Apache2"><a href="#安装配置Apache2" class="headerlink" title="安装配置Apache2"></a>安装配置<code>Apache2</code></h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install apache2</span><br></pre></td></tr></table></figure>
<h3 id="配置多端口"><a href="#配置多端口" class="headerlink" title="配置多端口"></a>配置多端口</h3><p>以8080为例<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/apache2/ports.conf</span><br></pre></td></tr></table></figure></p>
<p>添加监听<code>Listen 8080</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/apache2/sites-available/000-default.conf</span><br></pre></td></tr></table></figure></p>
<p>添加 <code>&lt;VirtualHost *:8080&gt;</code> 内容<br>例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:8080&gt;</span><br><span class="line">  ServerAdmin masterlink</span><br><span class="line">  DocumentRoot /var/www/masterlink</span><br><span class="line">  ErrorLog $&#123;APACHE_LOG_DIR&#125;/error_masterlink.log</span><br><span class="line">  CustomLog $&#123;APACHE_LOG_DIR&#125;/access_masterlink.log combined</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service apache2 start</span><br></pre></td></tr></table></figure>
<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>如果打开页面提示无权限，则将该页面的路径加入配置：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/apache2/apache2.conf</span><br></pre></td></tr></table></figure></p>
<p>加入以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Directory /home/alan/app&gt;</span><br><span class="line">  Options Indexes FollowSymLinks</span><br><span class="line">  AllowOverride None</span><br><span class="line">  Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>
<h2 id="设置GitHub-Hook"><a href="#设置GitHub-Hook" class="headerlink" title="设置GitHub Hook"></a>设置GitHub Hook</h2><h3 id="配置GitHub"><a href="#配置GitHub" class="headerlink" title="配置GitHub"></a>配置GitHub</h3><p>在工程主页面点击右上角的”Settings”，再点击左侧”Webhooks”，然后点击“Add webhook”，如下图：<br><img src="https://img-blog.csdn.net/20180120180649159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt><br>如下图，在”Payload URL”位置填入webhook地址，再点击底部的”Add webhook按钮”，这样就完成webhook配置了，今后当前工程有代码提交，GitHub就会向此webhook地址发请求，通知Jenkins构建：<br><img src="https://img-blog.csdn.net/20180120181141062?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p>
<h3 id="生成Personal-access-tokens"><a href="#生成Personal-access-tokens" class="headerlink" title="生成Personal access tokens"></a>生成Personal access tokens</h3><p>Jenkins访问GitHub工程的时候，有的操作是需要授权的，所以我们要在GitHub上生成授权的token给Jenkins使用，这就是Personal access tokens，生成步骤如下： </p>
<p>登录GitHub，进入”Settings”页面，点击左下角的”Developer settings”，如下图：<br><img src="https://img-blog.csdn.net/20180101100023785?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt><br>跳转到”Developer settings”页面后，点击左下角的“Personal access tokens”，如下图<br><img src="https://img-blog.csdn.net/20180101100149058?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt><br>可能会提示输入GitHub密码，输入后跳转到创建token的页面，如下图所示，输入title，再勾选”repo”和”admin:repo_hook”，再点击底部的”Generate token”按钮，就能产生一个新的access token，将此字符串复制下来，后面jenkins任务中会用到：<br><img src="https://img-blog.csdn.net/20180101100900159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p>
<h3 id="Jenkins配置"><a href="#Jenkins配置" class="headerlink" title="Jenkins配置"></a>Jenkins配置</h3><p>GitHub Plugin插件，在”系统管理-&gt;管理插件”位置检查此插件是否已经安装，没有的话请先安装；<br>配置GitHub，点击“系统管理-&gt;系统设置”，如下图：<br><img src="https://img-blog.csdn.net/20180121093316581?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt><br>在系统设置页面找到”GitHub”，配置一个”GitHub Server”，如下图，”API URL”填写”<a href="https://api.github.com“，”Credentials”位置如下图红框所示，选择”Add-&gt;Jenkins”：" target="_blank" rel="noopener">https://api.github.com“，”Credentials”位置如下图红框所示，选择”Add-&gt;Jenkins”：</a><br><img src="https://img-blog.csdn.net/20180121094004625?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt><br>弹出的页面中，”Kind”选择”Secret text”，”Secret”填入前面在GitHub上生成的Personal access tokens，Description随便写一些描述信息，如下图：<br><img src="https://img-blog.csdn.net/20180121094137737?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt><br>填写完毕后，点击右侧的”Test connection”按钮，如果信息没有填错，显示的内容如下图所示：<br><img src="https://img-blog.csdn.net/20180121094800433?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt><br>点击页面最底部的”保存”按钮；</p>
<h3 id="新建项目时"><a href="#新建项目时" class="headerlink" title="新建项目时"></a>新建项目时</h3><h4 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h4><p><img src="https://img-blog.csdn.net/20180121105320208?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p>
<h4 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h4><p><img src="https://img-blog.csdn.net/20180121105737723?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p>
<h2 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h2><h3 id="免密码使用sudo直接使用root权限执行命令"><a href="#免密码使用sudo直接使用root权限执行命令" class="headerlink" title="免密码使用sudo直接使用root权限执行命令"></a>免密码使用<code>sudo</code>直接使用<code>root</code>权限执行命令</h3><p>vi /etc/sudoers</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alan_ubuntu ALL=(ALL) NOPASSWD: /usr/sbin/servic</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>自动化</category>
      </categories>
      <tags>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>再见了，面向对象编程[英文翻译]</title>
    <url>/archives/29251.html</url>
    <content><![CDATA[<h2 id="再见了，面向对象编程"><a href="#再见了，面向对象编程" class="headerlink" title="再见了，面向对象编程"></a>再见了，面向对象编程</h2><p>一堂教你解决问题的课程<br>原文链接：<a href="https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53" target="_blank" rel="noopener">Goodbye, Object Oriented Programming</a><br>原文作者：<a href="https://medium.com/@cscalfani" target="_blank" rel="noopener">Charles Scalfani</a><br><img src="https://cdn-images-1.medium.com/max/1600/1*cBFSQ9Ytv_D0jwGtpuL5WA.png" alt><br>我使用面向对象的语言编程已经几十年了，我最先使用的面向对象编程的语言是<code>C++</code>，然后是<code>.NET</code>和<code>Java</code>。<br>我不遗余力得去发扬着面向对象的三大特征：继承封装和多态。<br>未完待续。。。</p>
]]></content>
      <categories>
        <category>英文翻译</category>
      </categories>
      <tags>
        <tag>英文翻译</tag>
      </tags>
  </entry>
  <entry>
    <title>代码整洁之道在typescript中的实现</title>
    <url>/archives/52300.html</url>
    <content><![CDATA[<p>代码整洁之道在typescript中的实现<br>灵感来源于 <a href="https://github.com/ryanmcdermott/clean-code-javascript" target="_blank" rel="noopener">clean-code-javascript</a>。</p>
<a id="more"></a>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li><a href="#简介">简介</a></li>
<li><a href="#变量">变量</a></li>
<li><a href="#方法">方法</a></li>
<li><a href="#对象和数据结构">对象和数据结构</a></li>
<li><a href="#类">类</a></li>
<li><a href="#SOLID原则">SOLID原则</a></li>
<li><a href="#测试">测试</a></li>
<li><a href="#并发">并发</a></li>
<li><a href="#异常处理">异常处理</a></li>
<li><a href="#格式化">格式化</a></li>
<li><a href="#注释">注释</a></li>
</ol>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><img src="https://www.osnews.com/images/comics/wtfm.jpg" alt="软件质量取决于阅读代码时骂人的次数"></p>
<p>本文是 Robert C 所书写的关于软件工程原理的书籍《代码整洁之道》的 TypeScript版，这不是一篇风格指南，而是为了使用 TypeScript 生成可读、可复用和可重构的软件指南。<br>本文中并非所有的原则都必须严格遵守，其中仅有一部分原则会被普遍认同，这些仅仅是一些原则，只是致力于整洁代码的作者们多年的经验。<br>我们的软件工程技术只有50多年的历史，我们仍旧在学很多东西，当软件架构和架构本身一样古老时，我们更难去遵守规则，现在，就让这些指南最为评估您和您团队的 TypeScript 代码质量的炼金石吧。<br>此外，了解这些知识并不会让您马上成为一名优秀的软件开发人员，与代码合作多年并不意味着您不会犯错误，每一段代码都是从初稿开始，向黏土一样慢慢被塑造成最终的形状。然后，在我们与同行一起审查时，我们会慢慢去修复不完美的地方，所以不要因为改进初稿而感到挫败，让我们去打败代码吧。</p>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="使用有意义的变量名称"><a href="#使用有意义的变量名称" class="headerlink" title="使用有意义的变量名称"></a>使用有意义的变量名称</h3><p>给变量取一个有意义的名称以便于帮助读者去区分变量之前的区别</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">between</span>&lt;<span class="title">T</span>&gt;(<span class="params">a1: T, a2: T, a3: T</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a2 &lt;= a1 &amp;&amp; a1 &lt;= a3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">between</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T, left: T, right: T</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> left &lt;= value &amp;&amp; value &lt;= right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="使用容易拼读的变量名称"><a href="#使用容易拼读的变量名称" class="headerlink" title="使用容易拼读的变量名称"></a>使用容易拼读的变量名称</h3><p>如果你无法拼读它，你会像一个白痴一样无法解释它</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> DtaRcrd102 = &#123;</span><br><span class="line">  genymdhms: <span class="built_in">Date</span>;</span><br><span class="line">  modymdhms: <span class="built_in">Date</span>;</span><br><span class="line">  pszqint: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Customer = &#123;</span><br><span class="line">  generationTimestamp: <span class="built_in">Date</span>;</span><br><span class="line">  modificationTimestamp: <span class="built_in">Date</span>;</span><br><span class="line">  recordId: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="为同样类型的变量使用同样的词汇"><a href="#为同样类型的变量使用同样的词汇" class="headerlink" title="为同样类型的变量使用同样的词汇"></a>为同样类型的变量使用同样的词汇</h3><p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInfo</span>(<span class="params"></span>): <span class="title">User</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserDetails</span>(<span class="params"></span>): <span class="title">User</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserData</span>(<span class="params"></span>): <span class="title">User</span></span>;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params"></span>): <span class="title">User</span></span>;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="使用有意义的名称"><a href="#使用有意义的名称" class="headerlink" title="使用有意义的名称"></a>使用有意义的名称</h3><p>相比于写代码而言，我们更多的是去阅读代码，所以你写的代码是否可读和可检索至关重要，未命名的变量会影响对我们代码里理解，并伤害读者，所以让你的变量名可检索。可以使用<a href="https://palantir.github.io/tslint/rules/no-magic-numbers/" target="_blank" rel="noopener">TSLint</a> 来帮助识别未命名的常量。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 86400000 是什么鬼?</span></span><br><span class="line">setTimeout(restart, <span class="number">86400000</span>);</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将它们声明为大写的命名常量.</span></span><br><span class="line"><span class="keyword">const</span> MILLISECONDS_IN_A_DAY = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">setTimeout(restart, MILLISECONDS_IN_A_DAY);</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="使用可解释的变量"><a href="#使用可解释的变量" class="headerlink" title="使用可解释的变量"></a>使用可解释的变量</h3><p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> users: Map&lt;<span class="built_in">string</span>, User&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> keyValue of users) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> users: Map&lt;<span class="built_in">string</span>, User&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [id, user] of users) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="使用有意义的变量来避免心里映射"><a href="#使用有意义的变量来避免心里映射" class="headerlink" title="使用有意义的变量来避免心里映射"></a>使用有意义的变量来避免心里映射</h3><p>显示由于隐式</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> u = getUser();</span><br><span class="line"><span class="keyword">const</span> s = getSubscription();</span><br><span class="line"><span class="keyword">const</span> t = charge(u, s);</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = getUser();</span><br><span class="line"><span class="keyword">const</span> subscription = getSubscription();</span><br><span class="line"><span class="keyword">const</span> transaction = charge(user, subscription);</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="不要添加不必要的上下文"><a href="#不要添加不必要的上下文" class="headerlink" title="不要添加不必要的上下文"></a>不要添加不必要的上下文</h3><p>如果你的 class/type/object 的名称已经告诉了你，就不要要在属性里在重复写一遍。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Car = &#123;</span><br><span class="line">  carMake: <span class="built_in">string</span>;</span><br><span class="line">  carModel: <span class="built_in">string</span>;</span><br><span class="line">  carColor: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">car: Car</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;car.carMake&#125;</span> <span class="subst">$&#123;car.carModel&#125;</span> (<span class="subst">$&#123;car.carColor&#125;</span>)`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Car = &#123;</span><br><span class="line">  make: <span class="built_in">string</span>;</span><br><span class="line">  model: <span class="built_in">string</span>;</span><br><span class="line">  color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">car: Car</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;car.make&#125;</span> <span class="subst">$&#123;car.model&#125;</span> (<span class="subst">$&#123;car.color&#125;</span>)`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="尽量使用默认参数，而不是再进行判断"><a href="#尽量使用默认参数，而不是再进行判断" class="headerlink" title="尽量使用默认参数，而不是再进行判断"></a>尽量使用默认参数，而不是再进行判断</h3><p>默认参数通常比再行判断更清晰。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadPages</span>(<span class="params">count?: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> loadCount = count !== <span class="literal">undefined</span> ? count : <span class="number">10</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadPages</span>(<span class="params">count: <span class="built_in">number</span> = 10</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="参数-最多两个"><a href="#参数-最多两个" class="headerlink" title="参数 (最多两个)"></a>参数 (最多两个)</h3><p>限制方法参数的数量至关重要，因为它会使得您方法的测试变得更容易，参数数量超过三个就会造成过多的组合，你必须用每个单独的参数去测试大量的情况。<br>一个或两个参数是最理想的情况，如果可能的话应该尽量避免三个，应该去整合除此之外的任何东西。</p>
<p>通常如果你有两个以上的参数，说明你的方法做了太多的事情，如果不是，则用更高级的对象来作为参数。</p>
<p>如果你发现自己需要大量参数，则考虑使用对象。</p>
<p>可以使用<a href="https://basarat.gitbooks.io/typescript/docs/destructuring.html" target="_blank" rel="noopener">结构赋值</a>来明确方法所期望的参数属性。<br>这样有一些优点：</p>
<ol>
<li>当有人查看功能签名时，会立即清楚正在使用的属性。</li>
<li>解构还克隆传递给函数的参数对象的指定原始值。 这有助于预防副作用。 注意：不会克隆从参数对象中解构的对象和数组。</li>
<li>TypeScript会警告您未使用的属性，如果没有解构，这将是不可能的。</li>
</ol>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">title: <span class="built_in">string</span>, body: <span class="built_in">string</span>, buttonText: <span class="built_in">string</span>, cancellable: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(<span class="string">'Foo'</span>, <span class="string">'Bar'</span>, <span class="string">'Baz'</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">options: &#123; title: <span class="built_in">string</span>, body: <span class="built_in">string</span>, buttonText: <span class="built_in">string</span>, cancellable: <span class="built_in">boolean</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(&#123;</span><br><span class="line">  title: <span class="string">'Foo'</span>,</span><br><span class="line">  body: <span class="string">'Bar'</span>,</span><br><span class="line">  buttonText: <span class="string">'Baz'</span>,</span><br><span class="line">  cancellable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>你可以使用<a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-aliases" target="_blank" rel="noopener">类型别名</a>来进一步提高可读性:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> MenuOptions = &#123; title: <span class="built_in">string</span>, body: <span class="built_in">string</span>, buttonText: <span class="built_in">string</span>, cancellable: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">options: MenuOptions</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(&#123;</span><br><span class="line">  title: <span class="string">'Foo'</span>,</span><br><span class="line">  body: <span class="string">'Bar'</span>,</span><br><span class="line">  buttonText: <span class="string">'Baz'</span>,</span><br><span class="line">  cancellable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="每个方法只做一件事情"><a href="#每个方法只做一件事情" class="headerlink" title="每个方法只做一件事情"></a>每个方法只做一件事情</h3><p>这是迄今为止软件工程中最重要的规则。 当一个方法执行多个操作时，它们会更加难以编写，测试和推理。 当您可以将一个函数隔离到一个动作时，它们可以轻松地重构，并且您的代码将更加清晰。 如果你除了这个之外没有别的东西，那么你将领先于许多开发者。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span>(<span class="params">clients: Client[]</span>) </span>&#123;</span><br><span class="line">  clients.forEach(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> clientRecord = database.lookup(client);</span><br><span class="line">    <span class="keyword">if</span> (clientRecord.isActive()) &#123;</span><br><span class="line">      email(client);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span>(<span class="params">clients: Client[]</span>) </span>&#123;</span><br><span class="line">  clients.filter(isActiveClient).forEach(email);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isActiveClient</span>(<span class="params">client: Client</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> clientRecord = database.lookup(client);</span><br><span class="line">  <span class="keyword">return</span> clientRecord.isActive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="在方法名上体现要做的事情"><a href="#在方法名上体现要做的事情" class="headerlink" title="在方法名上体现要做的事情"></a>在方法名上体现要做的事情</h3><p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addToDate</span>(<span class="params">date: <span class="built_in">Date</span>, month: <span class="built_in">number</span></span>): <span class="title">Date</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 很难从方法名中看出增加的是什么</span></span><br><span class="line">addToDate(date, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMonthToDate</span>(<span class="params">date: <span class="built_in">Date</span>, month: <span class="built_in">number</span></span>): <span class="title">Date</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">addMonthToDate(date, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="方法应该只是一个级别的抽象"><a href="#方法应该只是一个级别的抽象" class="headerlink" title="方法应该只是一个级别的抽象"></a>方法应该只是一个级别的抽象</h3><p>如果你的一个方法有多个级别的抽象，这说明这个方法做的事情太多了。必要的拆分可以使得方法更容易被重用和更容易测试。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseCode</span>(<span class="params">code: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> REGEXES = [ <span class="comment">/* ... */</span> ];</span><br><span class="line">  <span class="keyword">const</span> statements = code.split(<span class="string">' '</span>);</span><br><span class="line">  <span class="keyword">const</span> tokens = [];</span><br><span class="line"></span><br><span class="line">  REGEXES.forEach(<span class="function">(<span class="params">regex</span>) =&gt;</span> &#123;</span><br><span class="line">    statements.forEach(<span class="function">(<span class="params">statement</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ast = [];</span><br><span class="line">  tokens.forEach(<span class="function">(<span class="params">token</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// lex...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ast.forEach(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// parse...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> REGEXES = [ <span class="comment">/* ... */</span> ];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseCode</span>(<span class="params">code: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> tokens = tokenize(code);</span><br><span class="line">  <span class="keyword">const</span> syntaxTree = parse(tokens);</span><br><span class="line"></span><br><span class="line">  syntaxTree.forEach(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// parse...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tokenize</span>(<span class="params">code: <span class="built_in">string</span></span>): <span class="title">Token</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> statements = code.split(<span class="string">' '</span>);</span><br><span class="line">  <span class="keyword">const</span> tokens: Token[] = [];</span><br><span class="line"></span><br><span class="line">  REGEXES.forEach(<span class="function">(<span class="params">regex</span>) =&gt;</span> &#123;</span><br><span class="line">    statements.forEach(<span class="function">(<span class="params">statement</span>) =&gt;</span> &#123;</span><br><span class="line">      tokens.push( <span class="comment">/* ... */</span> );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> tokens;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params">tokens: Token[]</span>): <span class="title">SyntaxTree</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> syntaxTree: SyntaxTree[] = [];</span><br><span class="line">  tokens.forEach(<span class="function">(<span class="params">token</span>) =&gt;</span> &#123;</span><br><span class="line">    syntaxTree.push( <span class="comment">/* ... */</span> );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> syntaxTree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="移除重复代码"><a href="#移除重复代码" class="headerlink" title="移除重复代码"></a>移除重复代码</h3><p>尽量避免重复代码<br>重复代码是很糟糕的，因为这意味着如果你需要改某些逻辑，则必须去同时修改改多个地方。</p>
<p>想象一下，如果你经营者一家餐馆并需要追踪你的库存，比如你的西红柿、洋葱、大蒜、香料等，如果你有多个地方记录他们，每当他们变化了你就需要更新多个列表，如果你只有一个列表，那么你只用更新一个地方！</p>
<p>通常重复代码的出现是因为你有两个或者两个以上略有不同的东西，他们有很多共同之处，但是他们之间的差异迫使你需要有两个或者多个独立的方法来执行大部分相同的事情，删除重复代码意味着创建一个抽象，只需要一个方法/模块/类就可以处理这组不同的东西。</p>
<p>获得正确的抽象是至关重要的，这就是为什么你需要遵循<a href="#单一责任原则">单一责任原则</a>，但是糟糕的抽象可能比重复代码更加糟糕，所以一定要小心，如果你能实现好的抽象，尽量去实现它，不要去做重复的事情。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showDeveloperList</span>(<span class="params">developers: Developer[]</span>) </span>&#123;</span><br><span class="line">  developers.forEach(<span class="function">(<span class="params">developer</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = developer.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">const</span> experience = developer.getExperience();</span><br><span class="line">    <span class="keyword">const</span> githubLink = developer.getGithubLink();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience,</span><br><span class="line">      githubLink</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showManagerList</span>(<span class="params">managers: Manager[]</span>) </span>&#123;</span><br><span class="line">  managers.forEach(<span class="function">(<span class="params">manager</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = manager.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">const</span> experience = manager.getExperience();</span><br><span class="line">    <span class="keyword">const</span> portfolio = manager.getMBAProjects();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience,</span><br><span class="line">      portfolio</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Developer &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  getExtraDetails() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      githubLink: <span class="keyword">this</span>.githubLink,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Manager &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  getExtraDetails() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      portfolio: <span class="keyword">this</span>.portfolio,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showEmployeeList</span>(<span class="params">employee: Developer | Manager</span>) </span>&#123;</span><br><span class="line">  employee.forEach(<span class="function">(<span class="params">employee</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = employee.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">const</span> experience = employee.getExperience();</span><br><span class="line">    <span class="keyword">const</span> extra = employee.getExtraDetails();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience,</span><br><span class="line">      extra,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="使用Object-assign或者解析构值来定义默认的对象"><a href="#使用Object-assign或者解析构值来定义默认的对象" class="headerlink" title="使用Object.assign或者解析构值来定义默认的对象"></a>使用<code>Object.assign</code>或者解析构值来定义默认的对象</h3><p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MenuConfig = &#123; title?: <span class="built_in">string</span>, body?: <span class="built_in">string</span>, buttonText?: <span class="built_in">string</span>, cancellable?: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">config: MenuConfig</span>) </span>&#123;</span><br><span class="line">  config.title = config.title || <span class="string">'Foo'</span>;</span><br><span class="line">  config.body = config.body || <span class="string">'Bar'</span>;</span><br><span class="line">  config.buttonText = config.buttonText || <span class="string">'Baz'</span>;</span><br><span class="line">  config.cancellable = config.cancellable !== <span class="literal">undefined</span> ? config.cancellable : <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(&#123; body: <span class="string">'Bar'</span> &#125;);</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MenuConfig = &#123; title?: <span class="built_in">string</span>, body?: <span class="built_in">string</span>, buttonText?: <span class="built_in">string</span>, cancellable?: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">config: MenuConfig</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> menuConfig = <span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">    title: <span class="string">'Foo'</span>,</span><br><span class="line">    body: <span class="string">'Bar'</span>,</span><br><span class="line">    buttonText: <span class="string">'Baz'</span>,</span><br><span class="line">    cancellable: <span class="literal">true</span></span><br><span class="line">  &#125;, config);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(&#123; body: <span class="string">'Bar'</span> &#125;);</span><br></pre></td></tr></table></figure>
<p>或者，你也可以使用解析构值来实现。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MenuConfig = &#123; title?: <span class="built_in">string</span>, body?: <span class="built_in">string</span>, buttonText?: <span class="built_in">string</span>, cancellable?: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">&#123; title = 'Foo', body = 'Bar', buttonText = 'Baz', cancellable = <span class="literal">true</span> &#125;: MenuConfig</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(&#123; body: <span class="string">'Bar'</span> &#125;);</span><br></pre></td></tr></table></figure>
<p>通过显示传入<code>undefined</code>或者<code>null</code>值来避免任何副作用，也可以告诉<code>TypeScript</code>编译器不允许他们。请参阅<a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#--strictnullchecks" target="_blank" rel="noopener"><code>--strictNullChecks</code></a></p>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="不要将布尔值作为方法的参数"><a href="#不要将布尔值作为方法的参数" class="headerlink" title="不要将布尔值作为方法的参数"></a>不要将布尔值作为方法的参数</h3><p>布尔值表示了你的方法不止做了一件事情，请根据布尔值拆分你的方法。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span>(<span class="params">name: <span class="built_in">string</span>, temp: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (temp) &#123;</span><br><span class="line">    fs.create(<span class="string">`./temp/<span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fs.create(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTempFile</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  createFile(<span class="string">`./temp/<span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  fs.create(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="避免副作用（第一部分）"><a href="#避免副作用（第一部分）" class="headerlink" title="避免副作用（第一部分）"></a>避免副作用（第一部分）</h3><p>如果一个方法除了返回值以外还进行了其他操作并影响了一个或者多个值，这个函数就会产生副作用。副作用可能是写入文件，修改某个全局变量，或意外地将所有资源连接给陌生人。<br>如果你确实需要一个方法产生副作用，例如刚才所说的写入文件之类的，那么不要使用多个方法或者类去写入特定的文件，而是只使用一个服务来实现它。<br>重点是避免常见的陷阱，比如在没有任何结构的对象之间共享状态，使用可以由任何东西写入的可变数据类型，而不是集中在副作用发生的位置。 如果你能做到这一点，你会比绝大多数其他程序员更快乐。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'Robert C. Martin'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toBase64</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  name = btoa(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">toBase64();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 打印的已经不是 'Robert C. Martin' 而是 'Um9iZXJ0IEMuIE1hcnRpbg=='</span></span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'Robert C. Martin'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toBase64</span>(<span class="params">text: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> btoa(text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> encodedName = toBase64(name);</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="避免副作用（第二部分）"><a href="#避免副作用（第二部分）" class="headerlink" title="避免副作用（第二部分）"></a>避免副作用（第二部分）</h3><p>在JavaScript中，值类型通过值来传递，对象/数组通过引用传递，对于对象和数组，如果你在方法中进行了修改，那么该对象或数组在其他方法中都将受到影响，这有时候会很棒，但有时候也会很糟糕，让我们来思考一个糟糕的场景：<br>用户点击<code>购买</code>按钮，然后调用网络请求<code>购买</code>功能的接口，并将购物车的内容以数组的形式发送给后台，由于网络连接不畅，用户可能会继续重试请求。那如果在此期间用户在网络请求之前不小心点击了他们实际上不想购买的物品上的<code>添加到购物车</code>按钮，该怎么办？如果发生了这种情况并网络请求开始，那么该物品也意外得被购买了，因为它具有多购物车的引用。<br>一个很好的解决方案是<code>addItemToCart</code>始终克隆<code>cart</code>，编辑它，然后返回克隆。 这样可以确保任何保留在购物车参考上的其他功能都不会受到任何更改的影响。<br>提到这种方法的两点需要注意：<br>1.在某些情况下，您可能确实想要修改输入对象，但是当您采用这种编程习惯时，您会发现这些情况非常罕见。 大多数东西都可以重构，没有副作用！ （见[纯函数]（<a href="https://en.wikipedia.org/wiki/Pure_function））" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Pure_function））</a><br>克隆大对象在性能方面可能非常昂贵。 幸运的是，这在实践中不是一个大问题，因为有很好的库快速实现而不是像手动克隆对象和数组那样占用大量内存。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addItemToCart</span>(<span class="params">cart: CartItem[], item: Item</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  cart.push(&#123; item, date: <span class="built_in">Date</span>.now() &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addItemToCart</span>(<span class="params">cart: CartItem[], item: Item</span>): <span class="title">CartItem</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...cart, &#123; item, date: <span class="built_in">Date</span>.now() &#125;];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="不要书写全局方法"><a href="#不要书写全局方法" class="headerlink" title="不要书写全局方法"></a>不要书写全局方法</h3><p>污点全局变量在JavaScript中是一种不好的做法，因为你可能会与另一个库发生冲突。 让我们考虑一个例子：如果你想扩展JavaScript的原生Array方法以获得一个可以显示两个数组之间差异的<code>diff</code>方法，该怎么办？ 您可以将新函数写入<code>Array.prototype</code>，但它可能会与另一个尝试执行相同操作的库发生冲突。 如果那个其他库只是使用<code>diff</code>找到数组的第一个和最后一个元素之间的区别怎么办？ 这就是为什么只使用类并简单地扩展<code>Array</code>全局变得更好的原因。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> global &#123;</span><br><span class="line">  <span class="keyword">interface</span> Array&lt;T&gt; &#123;</span><br><span class="line">    diff(other: T[]): <span class="built_in">Array</span>&lt;T&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.diff) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.diff = <span class="function"><span class="keyword">function</span> &lt;<span class="title">T</span>&gt;(<span class="params">other: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> hash = <span class="keyword">new</span> Set(other);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.filter(<span class="function"><span class="params">elem</span> =&gt;</span> !hash.has(elem));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> MyArray&lt;T&gt; <span class="keyword">extends</span> <span class="built_in">Array</span>&lt;T&gt; &#123;</span><br><span class="line">  diff(other: T[]): T[] &#123;</span><br><span class="line">    <span class="keyword">const</span> hash = <span class="keyword">new</span> Set(other);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.filter(<span class="function"><span class="params">elem</span> =&gt;</span> !hash.has(elem));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="使用函数式编程而不是命令式编程"><a href="#使用函数式编程而不是命令式编程" class="headerlink" title="使用函数式编程而不是命令式编程"></a>使用函数式编程而不是命令式编程</h3><p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> contributions = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'Uncle Bobby'</span>,</span><br><span class="line">    linesOfCode: <span class="number">500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'Suzie Q'</span>,</span><br><span class="line">    linesOfCode: <span class="number">1500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'Jimmy Gosling'</span>,</span><br><span class="line">    linesOfCode: <span class="number">150</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'Gracie Hopper'</span>,</span><br><span class="line">    linesOfCode: <span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> totalOutput = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; contributions.length; i++) &#123;</span><br><span class="line">  totalOutput += contributions[i].linesOfCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> contributions = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'Uncle Bobby'</span>,</span><br><span class="line">    linesOfCode: <span class="number">500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'Suzie Q'</span>,</span><br><span class="line">    linesOfCode: <span class="number">1500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'Jimmy Gosling'</span>,</span><br><span class="line">    linesOfCode: <span class="number">150</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'Gracie Hopper'</span>,</span><br><span class="line">    linesOfCode: <span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> totalOutput = contributions</span><br><span class="line">  .reduce(<span class="function">(<span class="params">totalLines, output</span>) =&gt;</span> totalLines + output.linesOfCode, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="封装条件"><a href="#封装条件" class="headerlink" title="封装条件"></a>封装条件</h3><p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (subscription.isTrial || account.balance &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">canActivateService</span>(<span class="params">subscription: Subscription, account: Account</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> subscription.isTrial || account.balance &gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (canActivateService(subscription, account)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="避免负向判断"><a href="#避免负向判断" class="headerlink" title="避免负向判断"></a>避免负向判断</h3><p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmailNotUsed</span>(<span class="params">email: <span class="built_in">string</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isEmailNotUsed(email)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmailUsed</span>(<span class="params">email</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isEmailUsed(node)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="减少判断"><a href="#减少判断" class="headerlink" title="减少判断"></a>减少判断</h3><p>这似乎是一项不可能的任务。 在第一次听到这个观点时，大多数人都会说，“如果没有<code>if</code>陈述，我该怎么做？” 答案是，在许多情况下，都可以使用多态来实现相同的任务。 第二个问题通常是，“那很好，但我为什么要那样做呢？” 答案是我们之前学到的一个简洁的代码概念：一个函数应该只做一件事。 当你有具有<code>if</code>语句的类和函数时，你告诉你的用户你的函数不止一件事。 记住，只做一件事。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Airplane &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">type</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  getCruisingAltitude() &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">this</span>.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'777'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getMaxAltitude() - <span class="keyword">this</span>.getPassengerCount();</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'Air Force One'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getMaxAltitude();</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'Cessna'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getMaxAltitude() - <span class="keyword">this</span>.getFuelExpenditure();</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Unknown airplane type.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> getMaxAltitude(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Airplane &#123;</span><br><span class="line">  <span class="keyword">protected</span> getMaxAltitude(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="comment">// shared logic with subclasses ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Boeing777 <span class="keyword">extends</span> Airplane &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  getCruisingAltitude() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getMaxAltitude() - <span class="keyword">this</span>.getPassengerCount();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> AirForceOne <span class="keyword">extends</span> Airplane &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  getCruisingAltitude() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getMaxAltitude();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Cessna <span class="keyword">extends</span> Airplane &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  getCruisingAltitude() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getMaxAltitude() - <span class="keyword">this</span>.getFuelExpenditure();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="不要过度优化"><a href="#不要过度优化" class="headerlink" title="不要过度优化"></a>不要过度优化</h3><p>现代浏览器在运行时进行了大量的优化。 很多时候，如果你正在优化那么你只是在浪费你的时间。 你可以在[这里]（<a href="https://github.com/petkaantonov/bluebird/wiki/Optimization-killers）看到缺少优化的地方。" target="_blank" rel="noopener">https://github.com/petkaantonov/bluebird/wiki/Optimization-killers）看到缺少优化的地方。</a> 同时针对那些，直到它们被修复为止。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在旧浏览器上，每次使用未缓存的`list.length`迭代都会很昂贵</span></span><br><span class="line"><span class="comment">// 因为`list.length`会重新计算。 但是在现代浏览器中，这已经被优化了。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = list.length; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="移除无用的代码"><a href="#移除无用的代码" class="headerlink" title="移除无用的代码"></a>移除无用的代码</h3><p>无用的代码和重复代码一样糟糕。 没有理由将它保留在您的代码库中。<br>如果它没有被调用，请删掉它！ 如果后面需要，可以在版本管理的历史中找到它。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oldRequestModule</span>(<span class="params">url: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestModule</span>(<span class="params">url: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = requestModule;</span><br><span class="line">inventoryTracker(<span class="string">'apples'</span>, req, <span class="string">'www.inventory-awesome.io'</span>);</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestModule</span>(<span class="params">url: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = requestModule;</span><br><span class="line">inventoryTracker(<span class="string">'apples'</span>, req, <span class="string">'www.inventory-awesome.io'</span>);</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="使用迭代器和生成器"><a href="#使用迭代器和生成器" class="headerlink" title="使用迭代器和生成器"></a>使用迭代器和生成器</h3><p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="title">number</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> [<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">2</span>) <span class="keyword">return</span> [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> items: <span class="built_in">number</span>[] = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">while</span> (items.length &lt; n) &#123;</span><br><span class="line">    items.push(items[items.length - <span class="number">2</span>] + items[items.length - <span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> items;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">n: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  fibonacci(n).forEach(<span class="function"><span class="params">fib</span> =&gt;</span> <span class="built_in">console</span>.log(fib));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibonacci</span>(<span class="params"></span>): <span class="title">IterableIterator</span>&lt;<span class="title">number</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [a, b] = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> a;</span><br><span class="line">    [a, b] = [b, a + b];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">n: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> fib of fibonacci()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i++ === n) <span class="keyword">break</span>;  </span><br><span class="line">    <span class="built_in">console</span>.log(fib);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>有些库允许我们用之前熟悉的方法来处理例如 <code>map</code>, <code>slice</code>, <code>forEach</code> 等等. 参考这里 <a href="https://www.npmjs.com/package/itiriri" target="_blank" rel="noopener">itiriri</a> (或者 <a href="https://www.npmjs.com/package/itiriri-async" target="_blank" rel="noopener">itiriri-async</a> 用于异步处理).</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itiriri <span class="keyword">from</span> <span class="string">'itiriri'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibonacci</span>(<span class="params"></span>): <span class="title">IterableIterator</span>&lt;<span class="title">number</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [a, b] = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> a;</span><br><span class="line">    [a, b] = [b, a + b];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">itiriri(fibonacci())</span><br><span class="line">  .take(<span class="number">10</span>)</span><br><span class="line">  .forEach(<span class="function"><span class="params">fib</span> =&gt;</span> <span class="built_in">console</span>.log(fib));</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h2 id="对象和数据结构"><a href="#对象和数据结构" class="headerlink" title="对象和数据结构"></a>对象和数据结构</h2><h3 id="使用-getters-和-setters"><a href="#使用-getters-和-setters" class="headerlink" title="使用 getters 和 setters"></a>使用 getters 和 setters</h3><p>TypeScript支持getter/setter语法。<br>使用getter和setter访问来自封装行为的对象的数据可能比简单地查找对象上的属性更好。<br>你可能会问为什么，下面是一些原因：</p>
<ul>
<li>当您想要获取对象属性之外的其他操作时，您不必查找并更改代码库中的每个访问者。</li>
<li>在执行<code>set</code>时使添加验证变得简单。</li>
<li>封装内部表示。</li>
<li>获取和设置时，可以轻松添加日志记录和错误处理。</li>
<li>您可以延迟加载对象的属性，假设从服务器获取它。</li>
</ul>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> BankAccount = &#123;</span><br><span class="line">  balance: <span class="built_in">number</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> value = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> account: BankAccount = &#123;</span><br><span class="line">  balance: <span class="number">0</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Cannot set negative balance.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">account.balance = value;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> BankAccount &#123;</span><br><span class="line">  <span class="keyword">private</span> accountBalance: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> balance(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.accountBalance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> balance(value: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Cannot set negative balance.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.accountBalance = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在 `BankAccount` 封装了验证逻辑</span></span><br><span class="line"><span class="comment">// 如果有一个我们想增加额外的验证规则,</span></span><br><span class="line"><span class="comment">// 我们只需要去改变 `setter` 的实现,</span></span><br><span class="line"><span class="comment">// 而不影响其他代码.</span></span><br><span class="line"><span class="keyword">const</span> account = <span class="keyword">new</span> BankAccount();</span><br><span class="line">account.balance = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="设置-private-protected"><a href="#设置-private-protected" class="headerlink" title="设置 private/protected"></a>设置 private/protected</h3><p>TypeScript 支持 <code>public</code> <em>(默认)</em>, <code>protected</code> 还有 <code>private</code>.  </p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Circle &#123;</span><br><span class="line">  radius: <span class="built_in">number</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">radius: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.radius = radius;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  perimeter() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  surface() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius * <span class="keyword">this</span>.radius;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Circle &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly radius: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  perimeter() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  surface() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius * <span class="keyword">this</span>.radius;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="更倾向于不可变"><a href="#更倾向于不可变" class="headerlink" title="更倾向于不可变"></a>更倾向于不可变</h3><p>TypeScript 的类型系统允许在接口/类的各个属性上标记<code>readonly</code>，对于更高级的场景，有一个内置里类型<code>Readonly</code>，它接受一个泛型<code>&lt;T&gt;</code>并使用映射类型将其所有属性标记为只读，请见<a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types" target="_blank" rel="noopener">这里</a>。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Config &#123;</span><br><span class="line">  host: <span class="built_in">string</span>;</span><br><span class="line">  port: <span class="built_in">string</span>;</span><br><span class="line">  db: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Config &#123;</span><br><span class="line">  readonly host: <span class="built_in">string</span>;</span><br><span class="line">  readonly port: <span class="built_in">string</span>;</span><br><span class="line">  readonly db: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="type-对比-interface"><a href="#type-对比-interface" class="headerlink" title="type 对比 interface"></a><code>type</code> 对比 <code>interface</code></h3><p>当您使用联合或者交叉时使用<code>type</code>，当想要继承或者实现时使用<code>interface</code>，但是没有严格的规则，请使用适合自己的规则。<br>有关更详细的说明，请参阅<a href="https://stackoverflow.com/questions/37233735/typescript-interfaces-vs-types/54101543#54101543" target="_blank" rel="noopener">这里</a>了解ts中<code>type</code>和<code>interface</code>之间的区别。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> EmailConfig &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> DbConfig &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Config &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Shape = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> EmailConfig = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DbConfig = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Config  = EmailConfig | DbConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Circle <span class="keyword">implements</span> Shape &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Square <span class="keyword">implements</span> Shape &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="类应该是精简的"><a href="#类应该是精简的" class="headerlink" title="类应该是精简的"></a>类应该是精简的</h3><p>类的规模是由其责任来衡量的。 遵循<em>单一责任原则</em>一个类应该很小。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Dashboard &#123;</span><br><span class="line">  getLanguage(): <span class="built_in">string</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  setLanguage(language: <span class="built_in">string</span>): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  showProgress(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  hideProgress(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  isDirty(): <span class="built_in">boolean</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  disable(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  enable(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  addSubscription(subscription: Subscription): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  removeSubscription(subscription: Subscription): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  addUser(user: User): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  removeUser(user: User): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  goToHomePage(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  updateProfile(details: UserDetails): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  getVersion(): <span class="built_in">string</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Dashboard &#123;</span><br><span class="line">  disable(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  enable(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  getVersion(): <span class="built_in">string</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过将其他方法移动到其他类中来分担责任。</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="高内聚和低耦合"><a href="#高内聚和低耦合" class="headerlink" title="高内聚和低耦合"></a>高内聚和低耦合</h3><p>聚合程度决定了类成员的彼此相关程度。在理想情况下，每个方法都应该使用类中的所有字段，然后我们称之为<em>最大内聚类</em>，但这是不容易实现的，甚至是不可取的，但是我们都更喜欢凝聚力。<br>耦合是指两个类相互依赖的程度，如果其中一个类的修改不会影响另一个类，则称这两个类是低耦合的。<br>良好的软件设计应该是<strong>高内聚</strong>和<strong>低耦合</strong>。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> UserManager &#123;</span><br><span class="line">  <span class="comment">// 不推荐理由: 每一个私有变量都有特定的一组方法使用.</span></span><br><span class="line">  <span class="comment">// 这明确的表名这个类不止做了一件事情.</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> readonly db: Database,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> readonly emailSender: EmailSender</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> getUser(id: <span class="built_in">number</span>): <span class="built_in">Promise</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> db.users.findOne(&#123; id &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> getTransactions(userId: <span class="built_in">number</span>): <span class="built_in">Promise</span>&lt;Transaction[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> db.transactions.find(&#123; userId &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendGreeting(): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> emailSender.send(<span class="string">'Welcome!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendNotification(text: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> emailSender.send(text);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendNewsletter(): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> UserService &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly db: Database</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> getUser(id: <span class="built_in">number</span>): <span class="built_in">Promise</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="keyword">this</span>.db.users.findOne(&#123; id &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> getTransactions(userId: <span class="built_in">number</span>): <span class="built_in">Promise</span>&lt;Transaction[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="keyword">this</span>.db.transactions.find(&#123; userId &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> UserNotifier &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly emailSender: EmailSender</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendGreeting(): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">this</span>.emailSender.send(<span class="string">'Welcome!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendNotification(text: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">this</span>.emailSender.send(text);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendNewsletter(): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="比起继承来更喜欢使用组合"><a href="#比起继承来更喜欢使用组合" class="headerlink" title="比起继承来更喜欢使用组合"></a>比起继承来更喜欢使用组合</h3><p>正如<a href="https://en.wikipedia.org/wiki/Design_Patterns" target="_blank" rel="noopener">设计模式</a>中所说的那样，你应该<strong>尽可能得优先组合而不是继承</strong>，有很多很好的理由去使用继承，同时也有很多很好的理由去使用组合，这就意味着如果你的思想本能的是使用继承，那就试着想一想，使用组合是不是能更好的解决你的问题，一般在某些情况下它是可以的。<br>你可能想知道我什么时候该使用组合，这取决于你手头的问题，不过下面的列表列出了使用继承更好的一些情况：</p>
<ol>
<li><p>你的继承表示的是”is-a”关系而不是”has-a”关系（Human-&gt; Animal vs. User-&gt; UserDetails）。</p>
</li>
<li><p>您可以重用基类中的代码（人类可以像所有动物一样移动）。</p>
</li>
<li><p>您希望通过更改基类对派生类进行全局更改。 （改变所有动物移动时的热量消耗）。</p>
</li>
</ol>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Employee &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> readonly name: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> readonly email: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> EmployeeTaxData <span class="keyword">extends</span> Employee &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    name: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    email: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> readonly ssn: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> readonly salary: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name, email);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Employee &#123;</span><br><span class="line">  <span class="keyword">private</span> taxData: EmployeeTaxData;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> readonly name: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> readonly email: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setTaxData(ssn: <span class="built_in">string</span>, salary: <span class="built_in">number</span>): Employee &#123;</span><br><span class="line">    <span class="keyword">this</span>.taxData = <span class="keyword">new</span> EmployeeTaxData(ssn, salary);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> EmployeeTaxData &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> readonly ssn: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> readonly salary: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="使用链式编程"><a href="#使用链式编程" class="headerlink" title="使用链式编程"></a>使用链式编程</h3><p>这种模式非常有用，并且常用于许多库中。 它允许您的代码更直观，而不是冗长。 因此，请使用链式编程并检查代码的清洁程度。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> QueryBuilder &#123;</span><br><span class="line">  <span class="keyword">private</span> collection: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> pageNumber: <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">private</span> itemsPerPage: <span class="built_in">number</span> = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">private</span> orderByFields: <span class="built_in">string</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">from</span>(collection: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.collection = collection;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  page(<span class="built_in">number</span>: <span class="built_in">number</span>, itemsPerPage: <span class="built_in">number</span> = <span class="number">100</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.pageNumber = <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">this</span>.itemsPerPage = itemsPerPage;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  orderBy(...fields: <span class="built_in">string</span>[]): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.orderByFields = fields;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  build(): Query &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queryBuilder = <span class="keyword">new</span> QueryBuilder();</span><br><span class="line">queryBuilder.from(<span class="string">'users'</span>);</span><br><span class="line">queryBuilder.page(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">queryBuilder.orderBy(<span class="string">'firstName'</span>, <span class="string">'lastName'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> query = queryBuilder.build();</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> QueryBuilder &#123;</span><br><span class="line">  <span class="keyword">private</span> collection: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> pageNumber: <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">private</span> itemsPerPage: <span class="built_in">number</span> = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">private</span> orderByFields: <span class="built_in">string</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">from</span>(collection: <span class="built_in">string</span>): <span class="keyword">this</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.collection = collection;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  page(<span class="built_in">number</span>: <span class="built_in">number</span>, itemsPerPage: <span class="built_in">number</span> = <span class="number">100</span>): <span class="keyword">this</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.pageNumber = <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">this</span>.itemsPerPage = itemsPerPage;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  orderBy(...fields: <span class="built_in">string</span>[]): <span class="keyword">this</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.orderByFields = fields;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  build(): Query &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> query = <span class="keyword">new</span> QueryBuilder()</span><br><span class="line">  .from(<span class="string">'users'</span>)</span><br><span class="line">  .page(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">  .orderBy(<span class="string">'firstName'</span>, <span class="string">'lastName'</span>)</span><br><span class="line">  .build();</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h2 id="SOLID原则"><a href="#SOLID原则" class="headerlink" title="SOLID原则"></a>SOLID原则</h2><h3 id="单一责任原则-SRP"><a href="#单一责任原则-SRP" class="headerlink" title="单一责任原则 (SRP)"></a>单一责任原则 (SRP)</h3><p>正如代码整洁之道上所说，“应该有且仅有一个原因引起类的变更”，要最大幅度的减少类的变更，如果一个类的功能太负责而你修改的它的一部分，那么很难保证是否会影响到其他地方。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> UserSettings &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly user: User</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeSettings(settings: UserSettings) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.verifyCredentials()) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  verifyCredentials() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> UserAuth &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly user: User</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  verifyCredentials() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> UserSettings &#123;</span><br><span class="line">  <span class="keyword">private</span> readonly auth: UserAuth;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly user: User</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.auth = <span class="keyword">new</span> UserAuth(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeSettings(settings: UserSettings) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.auth.verifyCredentials()) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="开放封闭原则-OCP"><a href="#开放封闭原则-OCP" class="headerlink" title="开放封闭原则 (OCP)"></a>开放封闭原则 (OCP)</h3><p>一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。但并不意味着不做任何修改，低层模块的变更，必然要有高层模块进行耦合，否则就是一个孤立无意义的代码片段。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> AjaxAdapter <span class="keyword">extends</span> Adapter &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> NodeAdapter <span class="keyword">extends</span> Adapter &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> HttpRequester &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly adapter: Adapter</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> fetch&lt;T&gt;(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.adapter <span class="keyword">instanceof</span> AjaxAdapter) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> makeAjaxCall&lt;T&gt;(url);</span><br><span class="line">      <span class="comment">// 转换response并返回</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.adapter <span class="keyword">instanceof</span> NodeAdapter) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> makeHttpCall&lt;T&gt;(url);</span><br><span class="line">      <span class="comment">// 转换response并返回</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeAjaxCall</span>&lt;<span class="title">T</span>&gt;(<span class="params">url: <span class="built_in">string</span></span>): <span class="title">Promise</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 转换response并返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeHttpCall</span>&lt;<span class="title">T</span>&gt;(<span class="params">url: <span class="built_in">string</span></span>): <span class="title">Promise</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 转换response并返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Adapter &#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="keyword">async</span> request&lt;T&gt;(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;T&gt;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> AjaxAdapter <span class="keyword">extends</span> Adapter &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> request&lt;T&gt;(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="comment">// 转换response并返回</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> NodeAdapter <span class="keyword">extends</span> Adapter &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> request&lt;T&gt;(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="comment">// 转换response并返回</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> HttpRequester &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly adapter: Adapter</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> fetch&lt;T&gt;(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="keyword">this</span>.adapter.request&lt;T&gt;(url);</span><br><span class="line">    <span class="comment">// 转换response并返回</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="里氏替换原则-LSP"><a href="#里氏替换原则-LSP" class="headerlink" title="里氏替换原则 (LSP)"></a>里氏替换原则 (LSP)</h3><p>只要父类能出现的地方子类都可以出现，而且替换为子类也不会产生任何错误或异常，使用者可有根本就不需要知道是父类还是子类。但是，反过来就不行了，有子类出现的地方，父类未必能适应。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Rectangle &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">protected</span> width: <span class="built_in">number</span> = 0,</span></span><br><span class="line"><span class="params">    <span class="keyword">protected</span> height: <span class="built_in">number</span> = 0</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setColor(color: <span class="built_in">string</span>): <span class="keyword">this</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render(area: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setWidth(width: <span class="built_in">number</span>): <span class="keyword">this</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.width = width;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHeight(height: <span class="built_in">number</span>): <span class="keyword">this</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getArea(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.width * <span class="keyword">this</span>.height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Square <span class="keyword">extends</span> Rectangle &#123;</span><br><span class="line">  setWidth(width: <span class="built_in">number</span>): <span class="keyword">this</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.width = width;</span><br><span class="line">    <span class="keyword">this</span>.height = width;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHeight(height: <span class="built_in">number</span>): <span class="keyword">this</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.width = height;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderLargeRectangles</span>(<span class="params">rectangles: Rectangle[]</span>) </span>&#123;</span><br><span class="line">  rectangles.forEach(<span class="function">(<span class="params">rectangle</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> area = rectangle</span><br><span class="line">      .setWidth(<span class="number">4</span>)</span><br><span class="line">      .setHeight(<span class="number">5</span>)</span><br><span class="line">      .getArea();</span><br><span class="line">    rectangle.render(area);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rectangles = [<span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Square()];</span><br><span class="line">renderLargeRectangles(rectangles);</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Shape &#123;</span><br><span class="line">  setColor(color: <span class="built_in">string</span>): <span class="keyword">this</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render(area: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">abstract</span> getArea(): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Rectangle <span class="keyword">extends</span> Shape &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> readonly width = 0,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> readonly height = 0</span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getArea(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.width * <span class="keyword">this</span>.height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Square <span class="keyword">extends</span> Shape &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly length: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getArea(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.length * <span class="keyword">this</span>.length;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderLargeShapes</span>(<span class="params">shapes: Shape[]</span>) </span>&#123;</span><br><span class="line">  shapes.forEach(<span class="function">(<span class="params">shape</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> area = shape.getArea();</span><br><span class="line">    shape.render(area);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shapes = [<span class="keyword">new</span> Rectangle(<span class="number">4</span>, <span class="number">5</span>), <span class="keyword">new</span> Rectangle(<span class="number">4</span>, <span class="number">5</span>), <span class="keyword">new</span> Square(<span class="number">5</span>)];</span><br><span class="line">renderLargeShapes(shapes);</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="接口隔离原则-ISP"><a href="#接口隔离原则-ISP" class="headerlink" title="接口隔离原则 (ISP)"></a>接口隔离原则 (ISP)</h3><p>建立单一接口，不要建立臃肿庞大的接口。接口隔离原则与单一职责的审视角度是不相同的，单一职责要求的是类和接口职责单一，注重的是职责，这是业务逻辑上的划分，而接口隔离原则要求接口的方法尽量少。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> SmartPrinter &#123;</span><br><span class="line">  print();</span><br><span class="line">  fax();</span><br><span class="line">  scan();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> AllInOnePrinter <span class="keyword">implements</span> SmartPrinter &#123;</span><br><span class="line">  print() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  fax() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  scan() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> EconomicPrinter <span class="keyword">implements</span> SmartPrinter &#123;</span><br><span class="line">  print() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  fax() &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Fax not supported.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  scan() &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Scan not supported.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Printer &#123;</span><br><span class="line">  print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Fax &#123;</span><br><span class="line">  fax();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Scanner &#123;</span><br><span class="line">  scan();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> AllInOnePrinter <span class="keyword">implements</span> Printer, Fax, Scanner &#123;</span><br><span class="line">  print() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  fax() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  scan() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> EconomicPrinter <span class="keyword">implements</span> Printer &#123;</span><br><span class="line">  print() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="依赖倒置原则-DIP"><a href="#依赖倒置原则-DIP" class="headerlink" title="依赖倒置原则 (DIP)"></a>依赖倒置原则 (DIP)</h3><p>含义：<br>1.高层模块不应该依赖低层模块，两者都应该依赖其抽象。<br>2.抽象不应该依赖细节。<br>3.细节应该依赖抽象。</p>
<p>DIP 通常通过使用控制反转 (IoC) 来实现. 这里有一个例子 <a href="https://www.npmjs.com/package/inversify" target="_blank" rel="noopener">InversifyJs</a></p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; readFile <span class="keyword">as</span> readFileCb &#125; <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promisify &#125; <span class="keyword">from</span> <span class="string">'util'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = promisify(readFileCb);</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReportData = &#123;</span><br><span class="line">  <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> XmlFormatter &#123;</span><br><span class="line">  parse&lt;T&gt;(content: <span class="built_in">string</span>): T &#123;</span><br><span class="line">    <span class="comment">// 将XML字符串序列化为对象.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> ReportReader &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不推荐: 我们已经创建了对特定请求实现的依赖。</span></span><br><span class="line">  <span class="comment">// 我们应该让ReportReader依赖于一个解析方法：`parse`</span></span><br><span class="line">  <span class="keyword">private</span> readonly formatter = <span class="keyword">new</span> XmlFormatter();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> read(path: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;ReportData&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> text = <span class="keyword">await</span> readFile(path, <span class="string">'UTF8'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.formatter.parse&lt;ReportData&gt;(text);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> ReportReader();</span><br><span class="line"><span class="keyword">await</span> report = <span class="keyword">await</span> reader.read(<span class="string">'report.xml'</span>);</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; readFile <span class="keyword">as</span> readFileCb &#125; <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promisify &#125; <span class="keyword">from</span> <span class="string">'util'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = promisify(readFileCb);</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReportData = &#123;</span><br><span class="line">  <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Formatter &#123;</span><br><span class="line">  parse&lt;T&gt;(content: <span class="built_in">string</span>): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> XmlFormatter <span class="keyword">implements</span> Formatter &#123;</span><br><span class="line">  parse&lt;T&gt;(content: <span class="built_in">string</span>): T &#123;</span><br><span class="line">    <span class="comment">// 将XML字符串序列化为对象.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> JsonFormatter <span class="keyword">implements</span> Formatter &#123;</span><br><span class="line">  parse&lt;T&gt;(content: <span class="built_in">string</span>): T &#123;</span><br><span class="line">    <span class="comment">// 将JSON字符串序列化为对象.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> ReportReader &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly formatter: Formatter</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> read(path: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;ReportData&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> text = <span class="keyword">await</span> readFile(path, <span class="string">'UTF8'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.formatter.parse&lt;ReportData&gt;(text);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> ReportReader(<span class="keyword">new</span> XmlFormatter());</span><br><span class="line"><span class="keyword">await</span> report = <span class="keyword">await</span> reader.read(<span class="string">'report.xml'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果我们需要解析json</span></span><br><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> ReportReader(<span class="keyword">new</span> JsonFormatter());</span><br><span class="line"><span class="keyword">await</span> report = <span class="keyword">await</span> reader.read(<span class="string">'report.json'</span>);</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试比编码更重要，如果你的测试数量很少或者根本没有，那么每次修改代码时，你都不会确定有没有破坏其他地方，决定要到什么样的测试程度取决于你的团队，但是100%的覆盖率会让你开发的时候更有信心。这意味你需要一个好的框架之外还需要一个好的<a href="https://github.com/gotwarlost/istanbul" target="_blank" rel="noopener">覆盖统计工具</a><br>没有理由不写测试，有好多很好的js测试框架对typescript都有很好的支持，当您找到适合您团队的时，请始终为您引入的每个新功能/模块编写测试。 如果您首选的方法是测试驱动开发（TDD），那很好，但重点是确保在启动任何功能或重构现有功能之前达到覆盖目标。</p>
<h3 id="测试驱动开发的三条原则"><a href="#测试驱动开发的三条原则" class="headerlink" title="测试驱动开发的三条原则"></a>测试驱动开发的三条原则</h3><ol>
<li>除非这能让失败的单元测试通过，否则不允许去编写任何的产品代码。</li>
<li>只允许编写刚好能够导致失败的单元测试。 （编译失败也属于一种失败）</li>
<li>只允许编写刚好能够导致一个单元测试失败的产品代码。</li>
</ol>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="F-I-R-S-T-原则"><a href="#F-I-R-S-T-原则" class="headerlink" title="F.I.R.S.T. 原则"></a>F.I.R.S.T. 原则</h3><p>整洁的测试需要遵循以下原则:</p>
<ul>
<li><p><strong>快速</strong> 测试运行起来应该是快速的因为我们会经常运行他们。</p>
</li>
<li><p><strong>独立</strong> 每天测试不允许互相依赖，无论是独立运行还是顺序运行他们的返回应该是相同的。</p>
</li>
<li><p><strong>可复现</strong> 测试应该是在任意环境下都是可复现的。</p>
</li>
<li><p><strong>自我确认</strong> 测试需要自己体现<strong>通过</strong>或是<strong>不通过</strong>，而不是靠开发者自己比对日志来判断是否通过。</p>
</li>
<li><p><strong>及时</strong> 单元测试应该在生产代码之前编写。 如果您在生产代码之后编写测试，您可能会发现编写测试太辛苦了。</p>
</li>
</ul>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="测试单一责任"><a href="#测试单一责任" class="headerlink" title="测试单一责任"></a>测试单一责任</h3><p>测试也需要遵循<strong>单一责任原则</strong>。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; assert &#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'AwesomeDate'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">'handles date boundaries'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> date: AwesomeDate;</span><br><span class="line"></span><br><span class="line">    date = <span class="keyword">new</span> AwesomeDate(<span class="string">'1/1/2015'</span>);</span><br><span class="line">    assert.equal(<span class="string">'1/31/2015'</span>, date.addDays(<span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">    date = <span class="keyword">new</span> AwesomeDate(<span class="string">'2/1/2016'</span>);</span><br><span class="line">    assert.equal(<span class="string">'2/29/2016'</span>, date.addDays(<span class="number">28</span>));</span><br><span class="line"></span><br><span class="line">    date = <span class="keyword">new</span> AwesomeDate(<span class="string">'2/1/2015'</span>);</span><br><span class="line">    assert.equal(<span class="string">'3/1/2015'</span>, date.addDays(<span class="number">28</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; assert &#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'AwesomeDate'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">'handles 30-day months'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> AwesomeDate(<span class="string">'1/1/2015'</span>);</span><br><span class="line">    assert.equal(<span class="string">'1/31/2015'</span>, date.addDays(<span class="number">30</span>));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'handles leap year'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> AwesomeDate(<span class="string">'2/1/2016'</span>);</span><br><span class="line">    assert.equal(<span class="string">'2/29/2016'</span>, date.addDays(<span class="number">28</span>));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'handles non-leap year'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> AwesomeDate(<span class="string">'2/1/2015'</span>);</span><br><span class="line">    assert.equal(<span class="string">'3/1/2015'</span>, date.addDays(<span class="number">28</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="测试的名字应该表示了测试的意图"><a href="#测试的名字应该表示了测试的意图" class="headerlink" title="测试的名字应该表示了测试的意图"></a>测试的名字应该表示了测试的意图</h3><p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">describe(<span class="string">'Calendar'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">'2/29/2020'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'throws'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">describe(<span class="string">'Calendar'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">'should handle leap year'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should throw when format is invalid'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><h3 id="promises-对比-callbacks"><a href="#promises-对比-callbacks" class="headerlink" title="promises 对比 callbacks"></a>promises 对比 callbacks</h3><p>回调嵌套过多会产生<strong>回调地狱</strong>，使用promises可以有效解决这个问题。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">get</span> &#125; <span class="keyword">from</span> <span class="string">'request'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; writeFile &#125; <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadPage</span>(<span class="params">url: <span class="built_in">string</span>, saveTo: <span class="built_in">string</span>, callback: (error: <span class="built_in">Error</span>, content?: <span class="built_in">string</span>) =&gt; <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">get</span>(url, <span class="function">(<span class="params">error, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      callback(error);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      writeFile(saveTo, response.body, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">          callback(error);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          callback(<span class="literal">null</span>, response.body);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">downloadPage(<span class="string">'https://en.wikipedia.org/wiki/Robert_Cecil_Martin'</span>, <span class="string">'article.html'</span>, <span class="function">(<span class="params">error, content</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(content);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">get</span> &#125; <span class="keyword">from</span> <span class="string">'request'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; writeFile &#125; <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promisify &#125; <span class="keyword">from</span> <span class="string">'util'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> write = promisify(writeFile);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadPage</span>(<span class="params">url: <span class="built_in">string</span>, saveTo: <span class="built_in">string</span></span>): <span class="title">Promise</span>&lt;<span class="title">string</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">get</span>(url)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> write(saveTo, response));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">downloadPage(<span class="string">'https://en.wikipedia.org/wiki/Robert_Cecil_Martin'</span>, <span class="string">'article.html'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">content</span> =&gt;</span> <span class="built_in">console</span>.log(content))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.error(error));</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="Async-Await-比-Promises-更加简洁"><a href="#Async-Await-比-Promises-更加简洁" class="headerlink" title="Async/Await 比 Promises 更加简洁"></a>Async/Await 比 Promises 更加简洁</h3><p>使用<code>async</code> /<code>await</code>语法，您可以编写比链式调用更清晰，更易理解的代码。 在一个以<code>async</code>关键字为前缀的方法中，您可以告诉JavaScript运行时暂停执行<code>await</code>关键字上的代码（当在promise上使用时）。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">get</span> &#125; <span class="keyword">from</span> <span class="string">'request'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; writeFile &#125; <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promisify &#125; <span class="keyword">from</span> <span class="string">'util'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> write = util.promisify(writeFile);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadPage</span>(<span class="params">url: <span class="built_in">string</span>, saveTo: <span class="built_in">string</span></span>): <span class="title">Promise</span>&lt;<span class="title">string</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">get</span>(url).then(<span class="function"><span class="params">response</span> =&gt;</span> write(saveTo, response));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">downloadPage(<span class="string">'https://en.wikipedia.org/wiki/Robert_Cecil_Martin'</span>, <span class="string">'article.html'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">content</span> =&gt;</span> <span class="built_in">console</span>.log(content))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.error(error));</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">get</span> &#125; <span class="keyword">from</span> <span class="string">'request'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; writeFile &#125; <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promisify &#125; <span class="keyword">from</span> <span class="string">'util'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> write = promisify(writeFile);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadPage</span>(<span class="params">url: <span class="built_in">string</span>, saveTo: <span class="built_in">string</span></span>): <span class="title">Promise</span>&lt;<span class="title">string</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="keyword">get</span>(url);</span><br><span class="line">  <span class="keyword">await</span> write(saveTo, response);</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> content = <span class="keyword">await</span> downloadPage(<span class="string">'https://en.wikipedia.org/wiki/Robert_Cecil_Martin'</span>, <span class="string">'article.html'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(content);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>抛出异常是件好事！ 它们意味着运行时已经成功识别出程序中的某些内容出错并及时通知您。</p>
<h3 id="始终使用Error对象来抛出错误。"><a href="#始终使用Error对象来抛出错误。" class="headerlink" title="始终使用Error对象来抛出错误。"></a>始终使用<code>Error</code>对象来抛出错误。</h3><p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateTotal</span>(<span class="params">items: Item[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">'Not implemented.'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Item</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">'Not implemented.'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateTotal</span>(<span class="params">items: Item[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Not implemented.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Item</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Not implemented.'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Item</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Not implemented.'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="不要忽略掉捕捉后的错误"><a href="#不要忽略掉捕捉后的错误" class="headerlink" title="不要忽略掉捕捉后的错误"></a>不要忽略掉捕捉后的错误</h3><p>对捕获的错误不执行任何操作并不能使您能够修复或对所述错误做出反应。 将错误记录到控制台（<code>console.log</code>）也不是很好，因为它常常会被其他东西所淹没。 所以你应该有一个统一的地方集中处理这些错误。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  functionThatMightThrow();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者更严重</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  functionThatMightThrow();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="comment">// 直接忽略掉</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; logger &#125; <span class="keyword">from</span> <span class="string">'./logging'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  functionThatMightThrow();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  logger.log(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="不要忽略promises-的-rejected"><a href="#不要忽略promises-的-rejected" class="headerlink" title="不要忽略promises 的 rejected"></a>不要忽略promises 的 rejected</h3><p>就像不能忽略<code>try/catch</code>到的异常一样</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">getUser()</span><br><span class="line">  .then(<span class="function">(<span class="params">user: User</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sendEmail(user.email, <span class="string">'Welcome!'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; logger &#125; <span class="keyword">from</span> <span class="string">'./logging'</span></span><br><span class="line"></span><br><span class="line">getUser()</span><br><span class="line">  .then(<span class="function">(<span class="params">user: User</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sendEmail(user.email, <span class="string">'Welcome!'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    logger.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> getUser();</span><br><span class="line">  <span class="keyword">await</span> sendEmail(user.email, <span class="string">'Welcome!'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  logger.log(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><p>格式化是主观的。 像这里的许多规则一样，没有必须遵循特定硬性规则。 重点是<em>不要过于格式化</em>格式化。 有很多工具可以实现自动化。 用一个就好！ 工程师争论格式化是浪费时间和金钱的。 遵循的一般规则是<em>保持一致的格式规则</em>就可以了。</p>
<p>TypeScript 有一个很强大的工具叫做 <a href="https://palantir.github.io/tslint/" target="_blank" rel="noopener">TSLint</a>. 它是一个静态分析工具，可以帮助您显着提高代码的可读性和可维护性。 下面是您可以在项目中引用的TSLint配置：</p>
<ul>
<li><p><a href="https://www.npmjs.com/package/tslint-config-standard" target="_blank" rel="noopener">TSLint Config Standard</a> - 标准风格规则</p>
</li>
<li><p><a href="https://www.npmjs.com/package/tslint-config-airbnb" target="_blank" rel="noopener">TSLint Config Airbnb</a> - Airbnb风格</p>
</li>
<li><p><a href="https://www.npmjs.com/package/tslint-clean-code" target="_blank" rel="noopener">TSLint Clean Code</a> - 代码整洁之道的规则</p>
</li>
<li><p><a href="https://www.npmjs.com/package/tslint-react" target="_blank" rel="noopener">TSLint react</a> - React 和 JSX 的规则</p>
</li>
<li><p><a href="https://www.npmjs.com/package/tslint-config-prettier" target="_blank" rel="noopener">TSLint + Prettier</a> -  <a href="https://github.com/prettier/prettier" target="_blank" rel="noopener">Prettier</a> 代码风格</p>
</li>
<li><p><a href="https://www.npmjs.com/package/tslint-eslint-rules" target="_blank" rel="noopener">ESLint rules for TSLint</a> - ESLint 规则</p>
</li>
</ul>
<h3 id="使用一致的写法"><a href="#使用一致的写法" class="headerlink" title="使用一致的写法"></a>使用一致的写法</h3><p>这些规则是主观的，所以你的团队可以选择按自己的风格制定。 关键是，无论你选择什么，只要<em>保持一致</em>。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> DAYS_IN_WEEK = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> daysInMonth = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> songs = [<span class="string">'Back In Black'</span>, <span class="string">'Stairway to Heaven'</span>, <span class="string">'Hey Jude'</span>];</span><br><span class="line"><span class="keyword">const</span> Artists = [<span class="string">'ACDC'</span>, <span class="string">'Led Zeppelin'</span>, <span class="string">'The Beatles'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eraseDatabase</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restore_database</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> animal = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">type</span> Container = &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> DAYS_IN_WEEK = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> DAYS_IN_MONTH = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SONGS = [<span class="string">'Back In Black'</span>, <span class="string">'Stairway to Heaven'</span>, <span class="string">'Hey Jude'</span>];</span><br><span class="line"><span class="keyword">const</span> ARTISTS = [<span class="string">'ACDC'</span>, <span class="string">'Led Zeppelin'</span>, <span class="string">'The Beatles'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eraseDatabase</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restoreDatabase</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Animal = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">type</span> Container = &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="调用者和被调用者的方法应该是相邻的"><a href="#调用者和被调用者的方法应该是相邻的" class="headerlink" title="调用者和被调用者的方法应该是相邻的"></a>调用者和被调用者的方法应该是相邻的</h3><p>如果函数调用另一个函数，请在源文件中设置这两个函数相邻。 理想情况下，将呼叫者保持在被叫者正上方。<br>我们倾向于从头到尾阅读代码，就像报纸一样。 因此，请以这种方式阅读您的代码。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> PerformanceReview &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly employee: Employee</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> lookupPeers() &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="keyword">this</span>.employee.id, <span class="string">'peers'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> lookupManager() &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="keyword">this</span>.employee, <span class="string">'manager'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> getPeerReviews() &#123;</span><br><span class="line">    <span class="keyword">const</span> peers = <span class="keyword">this</span>.lookupPeers();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  review() &#123;</span><br><span class="line">    <span class="keyword">this</span>.getPeerReviews();</span><br><span class="line">    <span class="keyword">this</span>.getManagerReview();</span><br><span class="line">    <span class="keyword">this</span>.getSelfReview();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> getManagerReview() &#123;</span><br><span class="line">    <span class="keyword">const</span> manager = <span class="keyword">this</span>.lookupManager();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> getSelfReview() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> review = <span class="keyword">new</span> PerformanceReview(employee);</span><br><span class="line">review.review();</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> PerformanceReview &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly employee: Employee</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  review() &#123;</span><br><span class="line">    <span class="keyword">this</span>.getPeerReviews();</span><br><span class="line">    <span class="keyword">this</span>.getManagerReview();</span><br><span class="line">    <span class="keyword">this</span>.getSelfReview();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> getPeerReviews() &#123;</span><br><span class="line">    <span class="keyword">const</span> peers = <span class="keyword">this</span>.lookupPeers();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> lookupPeers() &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="keyword">this</span>.employee.id, <span class="string">'peers'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> getManagerReview() &#123;</span><br><span class="line">    <span class="keyword">const</span> manager = <span class="keyword">this</span>.lookupManager();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> lookupManager() &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="keyword">this</span>.employee, <span class="string">'manager'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> getSelfReview() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> review = <span class="keyword">new</span> PerformanceReview(employee);</span><br><span class="line">review.review();</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="组织-imports"><a href="#组织-imports" class="headerlink" title="组织 imports"></a>组织 imports</h3><p>使用简洁易读的import语句，您可以快速查看当前代码的依赖关系。 确保对<code>import</code>语句应用以下良好实践：</p>
<ul>
<li>导入语句应按字母顺序排列并分组。</li>
<li>不需要的引用应该被移除。</li>
<li>命名导入必须按字母顺序排列 例如: <code>import {A, B, C} from &#39;foo&#39;;</code></li>
<li>导入源必须在组内按字母顺序排列, 例如: <code>import * as foo from &#39;a&#39;; import * as bar from &#39;b&#39;;</code></li>
<li>每一组引用之间用空行分隔。</li>
<li>分组之间需要遵循以下顺序:<ul>
<li>Polyfills (例如. <code>import &#39;reflect-metadata&#39;;</code>)</li>
<li>Node 内置模块 (例如. <code>import fs from &#39;fs&#39;;</code>)</li>
<li>外部模块 (例如. <code>import { query } from &#39;itiriri&#39;;</code>)</li>
<li>内部模块 (例如. <code>import { UserService } from &#39;src/services/userService&#39;;</code>)</li>
<li>来自父目录的模块 (例如. <code>import foo from &#39;../foo&#39;; import qux from &#39;../../foo/qux&#39;;</code>)</li>
<li>来自兄弟目录或同目录的模块 (例如. <code>import bar from &#39;./bar&#39;; import baz from &#39;./bar/baz&#39;;</code>)</li>
</ul>
</li>
</ul>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; TypeDefinition &#125; <span class="keyword">from</span> <span class="string">'../types/typeDefinition'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AttributeTypes &#125; <span class="keyword">from</span> <span class="string">'../model/attribute'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ApiCredentials, Adapters &#125; <span class="keyword">from</span> <span class="string">'./common/api/authorization'</span>;</span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ConfigPlugin &#125; <span class="keyword">from</span> <span class="string">'./plugins/config/configPlugin'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BindingScopeEnum, Container &#125; <span class="keyword">from</span> <span class="string">'inversify'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'reflect-metadata'</span>;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'reflect-metadata'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BindingScopeEnum, Container &#125; <span class="keyword">from</span> <span class="string">'inversify'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AttributeTypes &#125; <span class="keyword">from</span> <span class="string">'../model/attribute'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TypeDefinition &#125; <span class="keyword">from</span> <span class="string">'../types/typeDefinition'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ApiCredentials, Adapters &#125; <span class="keyword">from</span> <span class="string">'./common/api/authorization'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ConfigPlugin &#125; <span class="keyword">from</span> <span class="string">'./plugins/config/configPlugin'</span>;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="使用别名"><a href="#使用别名" class="headerlink" title="使用别名"></a>使用别名</h3><p>通过在<code>tsconfig.json</code>的compilerOptions部分中定义路径和baseUrl属性来创建更漂亮的导入。<br>这样可以在进行导入时避免长的相对路径。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">'../../../services/UserService'</span>;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">'@services/UserService'</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line">...</span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">"baseUrl"</span>: <span class="string">"src"</span>,</span><br><span class="line">    <span class="string">"paths"</span>: &#123;</span><br><span class="line">      <span class="string">"@services"</span>: [<span class="string">"services/*"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>当没有注释无法表达的时候，才使用注释</p>
<h3 id="更倾向于自解释代码而不是注释"><a href="#更倾向于自解释代码而不是注释" class="headerlink" title="更倾向于自解释代码而不是注释"></a>更倾向于自解释代码而不是注释</h3><p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检查订阅是否到期</span></span><br><span class="line"><span class="keyword">if</span> (subscription.endDate &gt; <span class="built_in">Date</span>.now) &#123;  &#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isSubscriptionActive = subscription.endDate &gt; <span class="built_in">Date</span>.now;</span><br><span class="line"><span class="keyword">if</span> (isSubscriptionActive) &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="不要在代码库中留下注释的代码"><a href="#不要在代码库中留下注释的代码" class="headerlink" title="不要在代码库中留下注释的代码"></a>不要在代码库中留下注释的代码</h3><p>版本控制的存在是有原因的。 在您的历史记录中保留旧代码。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  email: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">// age: number;</span></span><br><span class="line">  <span class="comment">// jobPosition: string;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  email: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="不要使用日记评论"><a href="#不要使用日记评论" class="headerlink" title="不要使用日记评论"></a>不要使用日记评论</h3><p>请记住，使用版本控制！ 不需要无用代码，注释代码，尤其是日记评论。 使用<code>git log</code>获取历史记录！</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2016-12-20: Removed monads, didn't understand them (RM)</span></span><br><span class="line"><span class="comment"> * 2016-10-01: Improved using special monads (JP)</span></span><br><span class="line"><span class="comment"> * 2016-02-03: Added type-checking (LI)</span></span><br><span class="line"><span class="comment"> * 2015-03-14: Implemented combine (JR)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="禁止位置分隔"><a href="#禁止位置分隔" class="headerlink" title="禁止位置分隔"></a>禁止位置分隔</h3><p>这会增加代码噪声，大多数IDE是支持代码折叠的，请使用。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// Client class</span></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">class</span> Client &#123;</span><br><span class="line">  id: <span class="built_in">number</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  address: Address;</span><br><span class="line">  contact: Contact;</span><br><span class="line"></span><br><span class="line">  <span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="comment">// public methods</span></span><br><span class="line">  <span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="keyword">public</span> describe(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="comment">// private methods</span></span><br><span class="line">  <span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="keyword">private</span> describeAddress(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> describeContact(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Client &#123;</span><br><span class="line">  id: <span class="built_in">number</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  address: Address;</span><br><span class="line">  contact: Contact;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> describe(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> describeAddress(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> describeContact(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
<h3 id="TODO-标记"><a href="#TODO-标记" class="headerlink" title="TODO 标记"></a>TODO 标记</h3><p>当您发现自己需要在代码中留下注释以进行后续改进时，使用<code>// TODO</code>注释来实现。 大多数IDE都支持这种注释，方便你可以快速浏览整个待办事项列表。</p>
<p><strong>不推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getActiveSubscriptions</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Subscription</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// ensure `dueDate` is indexed.</span></span><br><span class="line">  <span class="keyword">return</span> db.subscriptions.find(&#123; dueDate: &#123; $lte: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125; &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getActiveSubscriptions</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Subscription</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> ensure `dueDate` is indexed.</span></span><br><span class="line">  <span class="keyword">return</span> db.subscriptions.find(&#123; dueDate: &#123; $lte: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125; &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><a href="#目录">⬆ 回到顶部</a></strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>在Hexo博客上添加可爱的Live 2D模型</title>
    <url>/archives/59303.html</url>
    <content><![CDATA[<h2 id="第一步-安装Live2D"><a href="#第一步-安装Live2D" class="headerlink" title="第一步 安装Live2D"></a>第一步 安装Live2D</h2><p>安装 <a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">hexo-helper-live2d</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="第二步-修改配置文件"><a href="#第二步-修改配置文件" class="headerlink" title="第二步 修改配置文件"></a>第二步 修改配置文件</h2><p>在hexo的配置文件<code>_config.yml</code>中添加如下配置，详细配置可以参考项目文档：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: false</span><br><span class="line">  debug: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-hibiki</span><br><span class="line">  display:</span><br><span class="line">    position: left</span><br><span class="line">    width: 100</span><br><span class="line">    height: 210</span><br><span class="line">  mobile:</span><br><span class="line">    show: false</span><br></pre></td></tr></table></figure></p>
<h2 id="第三步-下载模型"><a href="#第三步-下载模型" class="headerlink" title="第三步 下载模型"></a>第三步 下载模型</h2><p>下载模型，模型名称如下，一些模型的预览可以访问<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">这里</a>。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-hibiki</span><br></pre></td></tr></table></figure></p>
<p>所有模型列表如下：</p>
<ul>
<li>live2d-widget-model-chitose</li>
<li>live2d-widget-model-epsilon2_1</li>
<li>live2d-widget-model-gf</li>
<li>live2d-widget-model-haru/01 (use npm install –save live2d-widget-model-haru)</li>
<li>live2d-widget-model-haru/02 (use npm install –save live2d-widget-model-haru)</li>
<li>live2d-widget-model-haruto</li>
<li>live2d-widget-model-hibiki</li>
<li>live2d-widget-model-hijiki</li>
<li>live2d-widget-model-izumi</li>
<li>live2d-widget-model-koharu</li>
<li>live2d-widget-model-miku</li>
<li>live2d-widget-model-ni-j</li>
<li>live2d-widget-model-nico</li>
<li>live2d-widget-model-nietzsche</li>
<li>live2d-widget-model-nipsilon</li>
<li>live2d-widget-model-nito</li>
<li>live2d-widget-model-shizuku</li>
<li>live2d-widget-model-tororo</li>
<li>live2d-widget-model-tsumiki</li>
<li>live2d-widget-model-unitychan</li>
<li>live2d-widget-model-wanko</li>
<li>live2d-widget-model-z16</li>
</ul>
<h2 id="第四步-配置模型"><a href="#第四步-配置模型" class="headerlink" title="第四步 配置模型"></a>第四步 配置模型</h2><p>下载完之后，在Hexo根目录中新建文件夹live2d_models，然后在node_modules文件夹中找到刚刚下载的live2d模型，将其复制到live2d_models中，然后编辑配置文件中的model.use项，将其修改为live2d_models文件夹中的模型文件夹名称。<br>然后重新发布博客即可。</p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>博客美化</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架生命周期总结</title>
    <url>/archives/46729.html</url>
    <content><![CDATA[<p>组件生命周期函数的定义：从组件被创建，到组件挂载到页面上运行，再到页面关闭组件被卸载，这三个阶段总是伴随着组件各种各样的事件，那么这些事件，统称为组件的生命周期函数</p>
<a id="more"></a>
<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p><img src="http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-11-18/73021707.jpg" alt></p>
<h3 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h3><p>说明：在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用<br>注意：此时，无法获取 data中的数据、methods中的方法</p>
<h3 id="created"><a href="#created" class="headerlink" title="created"></a>created</h3><p>注意：这是一个常用的生命周期，可以调用methods中的方法、改变data中的数据<br>使用场景：发送请求获取数据</p>
<h3 id="beforeMounted"><a href="#beforeMounted" class="headerlink" title="beforeMounted"></a>beforeMounted</h3><p>说明：在挂载开始之前被调用</p>
<h3 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h3><p>说明：此时，vue实例已经挂载到页面中，可以获取到el中的DOM元素，进行DOM操作</p>
<h3 id="beforeUpdated"><a href="#beforeUpdated" class="headerlink" title="beforeUpdated"></a>beforeUpdated</h3><p>说明：数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p>
<h3 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h3><p>说明：组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。</p>
<h3 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy"></a>beforeDestroy</h3><p>说明：实例销毁之前调用。在这一步，实例仍然完全可用。<br>使用场景：实例销毁之前，执行清理任务，比如：清除定时器等</p>
<h3 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed"></a>destroyed</h3><p>说明：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p>
<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p><img src="http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-11-18/61367412.jpg" alt></p>
<h3 id="getDefaultProps"><a href="#getDefaultProps" class="headerlink" title="getDefaultProps"></a>getDefaultProps</h3><p>初始化组件属性的默认值，只调用一次</p>
<h3 id="getInitialState"><a href="#getInitialState" class="headerlink" title="getInitialState"></a>getInitialState</h3><p>初始化每个实例的状态</p>
<h3 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount"></a>componentWillMount</h3><p>组件render之前，可以修改状态</p>
<h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p>渲染组件时</p>
<h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h3><p>在render完成后 组件渲染到页面时触发</p>
<h3 id="componentWillReceiveProps"><a href="#componentWillReceiveProps" class="headerlink" title="componentWillReceiveProps"></a>componentWillReceiveProps</h3><p>组件将要接受到属性时触发</p>
<h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h3><p>组件是否需要更新，返回false则阻止render调用</p>
<h3 id="componentWillUpdate"><a href="#componentWillUpdate" class="headerlink" title="componentWillUpdate"></a>componentWillUpdate</h3><p>组件接收到新的props或者state后，进行渲染之前触发，但它不能修改props和state</p>
<h3 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate"></a>componentDidUpdate</h3><p>在render完成后 组件完成更新渲染到页面时触发</p>
<h3 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h3><p>在销毁操作真正执行之前调用</p>
<h2 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h2><p><img src="http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-11-18/77536657.jpg" alt></p>
<h3 id="指令和组件"><a href="#指令和组件" class="headerlink" title="指令和组件"></a>指令和组件</h3><p><code>ngOnInit</code>：当Angular初始化完成数据绑定的输入属性后，用来初始化指令或者组件。<br><code>ngOnChanges</code>：当Angular设置了一个被绑定的输入属性后触发。该回调方法会收到一个包含当前值和原值的changes对象。<br><code>ngDoCheck</code>：用来检测所有变化（无论是Angular本身能检测还是无法检测的），并作出相应行动。在每次执行“变更检测”时被调用。<br><code>ngOnDestory</code>：在Angular销毁指令或组件之前做一些清理工作，比如退订可观察对象和移除事件处理器，以免导致内存泄漏。</p>
<h3 id="只适用于组件"><a href="#只适用于组件" class="headerlink" title="只适用于组件"></a>只适用于组件</h3><p><code>ngAfterContentInit</code>：当Angular把外来内容投影进自己的视图之后调用。<br><code>ngAfterContentChecked</code>：当Angular检查完那些投影到自己视图中的外来内容的数据绑定之后调用。<br><code>ngAfterViewInit</code>：在Angular创建完组件的视图后调用。<br><code>ngAfterViewChecked</code>：在Angular检查完组件视图中的绑定后调用。</p>
<h3 id="生命周期的顺序"><a href="#生命周期的顺序" class="headerlink" title="生命周期的顺序"></a>生命周期的顺序</h3><p><code>ngOnChanges</code>：当被绑定的输入属性的值发生变化时调用，首次调用一定会发生在ngOnInit之前。<br><code>ngOnInit</code>：在第一轮ngOnChanges完成之后调用。<br><code>ngDoCheck</code>：在每个Angular变更检测周期中调用。<br><code>ngAfterContentInit</code>：当把内容投影进组件之后调用。<br><code>ngAfterContentChecked</code>：每次完成被投影组件内容的变更检测之后调用。<br><code>ngAfterViewInit</code>：初始化完组件及其子视图之后调用。<br><code>ngAfterViewChecked</code>：每次做完组件视图和子视图的变更检测之后调用。<br><code>ngOnDestroy</code>：当Angular每次销毁指令/组件之前调用。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端目录结构约定</title>
    <url>/archives/56980.html</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-src</span><br><span class="line">  -components //Dumb 组件</span><br><span class="line">  -containers //Smart 组件</span><br><span class="line">  -models //数据模型及方法</span><br><span class="line">  -routes // 布局页</span><br><span class="line">  -screens //页面</span><br><span class="line">  -utils // 工具方法 </span><br><span class="line">  -store // 状态管理</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>在 WPF 上使用 log4net</title>
    <url>/archives/26244.html</url>
    <content><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>使用NuGet安装log4net<br><a id="more"></a></p>
<h2 id="第二部"><a href="#第二部" class="headerlink" title="第二部"></a>第二部</h2><p>新建 log4net.config 并编辑<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;configSections&gt;</span><br><span class="line">    &lt;section name=&quot;log4net&quot; type=&quot;log4net.Config.Log4NetConfigurationSectionHandler, log4net&quot;/&gt;</span><br><span class="line">  &lt;/configSections&gt;</span><br><span class="line">  &lt;log4net&gt;</span><br><span class="line">    &lt;!--错误日志--&gt;</span><br><span class="line">    &lt;appender name=&quot;RollingLogFileAppender&quot; type=&quot;log4net.Appender.RollingFileAppender&quot;&gt;</span><br><span class="line">      &lt;file value=&quot;log\\LogError\\&quot;/&gt;</span><br><span class="line">      &lt;appendToFile value=&quot;true&quot;/&gt;</span><br><span class="line">      &lt;rollingStyle value=&quot;Date&quot;/&gt;</span><br><span class="line">      &lt;datePattern value=&quot;yyyy\\yyyyMM\\yyyyMMdd&apos;.txt&apos;&quot;/&gt;</span><br><span class="line">      &lt;staticLogFileName value=&quot;false&quot;/&gt;</span><br><span class="line">      &lt;param name=&quot;MaxSizeRollBackups&quot; value=&quot;100&quot;/&gt;</span><br><span class="line">      &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt;</span><br><span class="line">        &lt;!--每条日志末尾的文字说明--&gt;</span><br><span class="line">        &lt;!--输出格式--&gt;</span><br><span class="line">        &lt;!--样例：2008-03-26 13:42:32,111 [10] INFO  Log4NetDemo.MainClass [(null)] - info--&gt;</span><br><span class="line">        &lt;conversionPattern value=&quot;%newline %n记录时间：%date %n线程ID:[%thread] %n日志级别：  %-5level %n错误描述：%message%newline %n&quot;/&gt;</span><br><span class="line">      &lt;/layout&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line">    &lt;!--Info日志--&gt;</span><br><span class="line">    &lt;appender name=&quot;InfoAppender&quot; type=&quot;log4net.Appender.RollingFileAppender&quot;&gt;</span><br><span class="line">      &lt;param name=&quot;File&quot; value=&quot;Log\\LogInfo\\&quot; /&gt;</span><br><span class="line">      &lt;param name=&quot;AppendToFile&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">      &lt;param name=&quot;MaxFileSize&quot; value=&quot;10240&quot; /&gt;</span><br><span class="line">      &lt;param name=&quot;MaxSizeRollBackups&quot; value=&quot;100&quot; /&gt;</span><br><span class="line">      &lt;param name=&quot;StaticLogFileName&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">      &lt;param name=&quot;DatePattern&quot; value=&quot;yyyy\\yyyyMM\\yyyyMMdd&apos;.txt&apos;&quot; /&gt;</span><br><span class="line">      &lt;param name=&quot;RollingStyle&quot; value=&quot;Date&quot; /&gt;</span><br><span class="line">      &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt;</span><br><span class="line">        &lt;conversionPattern value=&quot;%newline %n记录时间：%date %n线程ID:[%thread] %n日志级别：  %-5level %n日志描述：%message%newline %n&quot;/&gt;</span><br><span class="line">      &lt;/layout&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--Error日志--&gt;</span><br><span class="line">    &lt;logger name=&quot;logerror&quot;&gt;</span><br><span class="line">      &lt;level value=&quot;ERROR&quot; /&gt;</span><br><span class="line">      &lt;appender-ref ref=&quot;RollingLogFileAppender&quot; /&gt;</span><br><span class="line">    &lt;/logger&gt;</span><br><span class="line">    &lt;!--Info日志--&gt;</span><br><span class="line">    &lt;logger name=&quot;loginfo&quot;&gt;</span><br><span class="line">      &lt;level value=&quot;INFO&quot; /&gt;</span><br><span class="line">      &lt;appender-ref ref=&quot;InfoAppender&quot; /&gt;</span><br><span class="line">    &lt;/logger&gt;</span><br><span class="line">  &lt;/log4net&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>将 log4net.config 设置为复制到生成目录，采用较新则复制的规则</p>
<h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>在Properties -&gt; Assemblyinfo.cs 里添加一行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[assembly: log4net.Config.XmlConfigurator(ConfigFile = &quot;Log4Net.config&quot;, Watch = true)]</span><br></pre></td></tr></table></figure></p>
<h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>在app.xml.cs 里加入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected override void OnStartup(StartupEventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    log4net.Config.XmlConfigurator.Configure();</span><br><span class="line">    base.OnStartup(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>基于React的ant项目创建</title>
    <url>/archives/25352.html</url>
    <content><![CDATA[<h2 id="安装和初始化"><a href="#安装和初始化" class="headerlink" title="安装和初始化"></a>安装和初始化</h2><p>安装 create-react-app 工具 (已安装则跳过)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g create-react-app</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>然后新建一个项目。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create-react-app antd-demo</span><br></pre></td></tr></table></figure>
<p>安装并引入 antd。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd antd-demo</span><br><span class="line">npm add antd</span><br></pre></td></tr></table></figure></p>
<p>如果是 antd mobile，则引入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install antd-mobile --save</span><br></pre></td></tr></table></figure></p>
<h2 id="配置按需加载ant"><a href="#配置按需加载ant" class="headerlink" title="配置按需加载ant"></a>配置按需加载ant</h2><p>引入 react-app-rewired 并修改 package.json 里的启动配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm add react-app-rewired --dev</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* package.json */</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">-   &quot;start&quot;: &quot;react-scripts start&quot;,</span><br><span class="line">+   &quot;start&quot;: &quot;react-app-rewired start&quot;,</span><br><span class="line">-   &quot;build&quot;: &quot;react-scripts build&quot;,</span><br><span class="line">+   &quot;build&quot;: &quot;react-app-rewired build&quot;,</span><br><span class="line">-   &quot;test&quot;: &quot;react-scripts test --env=jsdom&quot;,</span><br><span class="line">+   &quot;test&quot;: &quot;react-app-rewired test --env=jsdom&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在项目根目录创建一个 <code>config-overrides.js</code> 用于修改默认配置。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports = function override(config, env) &#123;</span><br><span class="line">  // do stuff with the webpack config...</span><br><span class="line">  return config;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p><strong>使用 babel-plugin-import</strong></p>
<p>babel-plugin-import 是一个用于按需加载组件代码和样式的 babel 插件，现在我们尝试安装它并修改 <code>config-overrides.js</code> 文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm add babel-plugin-import --dev</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+ const &#123; injectBabelPlugin &#125; = require(&apos;react-app-rewired&apos;);</span><br><span class="line">  module.exports = function override(config, env) &#123;</span><br><span class="line">+   config = injectBabelPlugin([&apos;import&apos;, &#123; libraryName: &apos;antd&apos;, libraryDirectory: &apos;es&apos;, style: &apos;css&apos; &#125;], config);</span><br><span class="line">    return config;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<p>然后直接引用and的组件即可,例如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; Button &#125; from &apos;antd&apos;;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>将Excel的内容导出成sql语句</title>
    <url>/archives/7798218e.html</url>
    <content><![CDATA[<p>将Excel的内容导出成sql语句,Excel的文件名作为导入的表名，Excel的列名为导入数据库表的字段名。<br><a id="more"></a><br><a href="https://github.com/AlanLang/xls2sql" target="_blank" rel="noopener">源码</a></p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="1-准备一个excel"><a href="#1-准备一个excel" class="headerlink" title="1.准备一个excel"></a>1.准备一个excel</h3><p>文件名为到数据库的表名，内容为要生成的sql的数据，如下图：<br><img src="http://oqdzx28cd.bkt.clouddn.com/18-1-15/53958779.jpg" alt></p>
<h3 id="2-启动软件-xls2sql-exe"><a href="#2-启动软件-xls2sql-exe" class="headerlink" title="2.启动软件 xls2sql.exe"></a>2.启动软件 <code>xls2sql.exe</code></h3><p>点击<code>打开</code>按钮找到刚才的excel文件或直接将文件拖入应用程序中。<br><img src="http://oqdzx28cd.bkt.clouddn.com/18-1-15/75398211.jpg" alt></p>
<h3 id="3-应用程序完成excel解析并生成sql语句。"><a href="#3-应用程序完成excel解析并生成sql语句。" class="headerlink" title="3.应用程序完成excel解析并生成sql语句。"></a>3.应用程序完成excel解析并生成sql语句。</h3><p><img src="http://oqdzx28cd.bkt.clouddn.com/18-1-15/21174796.jpg" alt></p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序架构</title>
    <url>/archives/40517.html</url>
    <content><![CDATA[<p>其实小程序和 PWA，以及快应用有着类似的业务使用场景，感官上有着相似的地方。<br>尽管原理上有很大的差异。</p>
<p>本文以微信小程序为例，我们来讲解一下小程序的架构，其他的小程序，比如支付宝小程序，百度小程序都是类似的原理。<br><a id="more"></a></p>
<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>说到微信小程序就不得不提它的多线程模型，小程序有一个 JS 线程和若干个 webview，我们称之为 view 层，<br>view 不能够执行 JS 代码，而是负责 UI 显示，它由开发者编写的 wxml 和 wxss 转换后代码以及微信提供相关辅助模块组成。</p>
<p>一个 view 模块对应一个 webview 组件（也就是我们常规理解的一个页面）, 小程序支持同时多个 view 存在。view 模块通过 WeixinJSBridge 对象来跟后台通信。</p>
<p>微信 Native 程序会预先加载一个 WebView，当打开指定页面时，无需加载额外资源直接渲染，这样会感觉<br>小程序会很快。</p>
<p>JS 线程我们称之为 service，service 模块负责应用的后台逻辑，<br>它由小程序的 js 代码以及微信提供的相关辅助模块组成。<br>一个应用只有一个 service 进程<br>，它同样也是一个页面（至少在开发者工具内如此，上线后可能运行于 WeixinJSCore 之内），<br>与 view 模块不同的是，它在程序生命周期内后台运行，service 模块通过与 view 模块实现不同但接口格式一样的 WeixinJSBridge 对象跟后台通信。</p>
<p>多线程模型的原理图大概是这样的：</p>
<p><img src="http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1581918413429" alt><br>(图片来自 <a href="https://zhuanlan.zhihu.com/p/22754296" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/22754296</a>)</p>
<p>交互通过系统层的 JSBridge 进行，当用户进行操作触发了事件，通过 JSBridge 通知逻辑层，逻辑层执行对应逻辑并把数据通过 JSBridge 传递给视图层，视图层执行相应的操作。</p>
<p><img src="http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1581918441461" alt><br>（图片来自 <a href="https://www.jianshu.com/p/4e8ed26d3b7a）" target="_blank" rel="noopener">https://www.jianshu.com/p/4e8ed26d3b7a）</a></p>
<p>小程序也会与 CDN 和 web server 进行一些交互，具体为：<br>小程序初始化时，先从微信的 CDN 下载小程序的完整的包，然后在微信内部进行解包初始化。</p>
<p><img src="http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1581918457006" alt><br>（图片来自 <a href="https://www.jianshu.com/p/4e8ed26d3b7a）" target="_blank" rel="noopener">https://www.jianshu.com/p/4e8ed26d3b7a）</a></p>
<h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><p>json 格式的数据传递和解析相比与原生 API 都是损耗不菲的，如果频繁调用很可能损耗 过多性能，进而影响用户体验。</p>
<p>而支付宝小程序也看到了这一点，他们也做了一些自己的尝试来解决这个问题，主要原理图：</p>
<p><img src="http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1581918472365" alt><br>(图片来自 <a href="https://www.infoq.cn/article/ullETz7q_Ue4dUptKgKC" target="_blank" rel="noopener">https://www.infoq.cn/article/ullETz7q_Ue4dUptKgKC</a>)</p>
<p>感兴趣的可以读一下文末的参考链接</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>提前新建 Web View，准备新页面渲染</p>
</li>
<li><p>View 层和逻辑层分离，通过数据驱动，不直接操作 DOM</p>
</li>
<li><p>使用 Virtual DOM，进行局部更新</p>
</li>
<li><p>全部使用 https，确保传输过程中安全</p>
</li>
<li><p>前端组件化开发</p>
</li>
<li><p>加入 rpx 单位，隔离设备尺寸，方便开发</p>
</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.jianshu.com/p/4e8ed26d3b7a" target="_blank" rel="noopener">《微信小程序架构解析》</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/22754296" target="_blank" rel="noopener">微信小程序架构分析 (上)</a></li>
<li><a href="https://www.infoq.cn/article/ullETz7q_Ue4dUptKgKC" target="_blank" rel="noopener">独家！支付宝小程序技术架构全解析</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>基于阿里云api的动态域名解析服务</title>
    <url>/archives/62468.html</url>
    <content><![CDATA[<p>基于阿里云解析服务API的DDNS服务。将本机IP更新至指定域名的DNS A记录，可以达到花生壳动态域名解析的效果。</p>
<a id="more"></a>
<p><a href="https://github.com/AlanLang/aliyun-ddns-server" target="_blank" rel="noopener">源码地址</a></p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol>
<li>在阿里云申请一个域名，将此域名添加一个子域（如www），并设置为A类型记录，IP地址随便填写一个（程序会自动修改）</li>
<li>到阿里云域名控制台申请AccessId Key和Secrect</li>
<li>Clone本项目代码到本机，使用VS2013或更高版本编译 (或直接下载release)</li>
<li>将生成的debug目录拷贝到服务器上，修改config.yml文件，然后用管理员权限运行install.bat</li>
</ol>
<h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><p><code>config.yml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 检测外网ip地址的网站</span><br><span class="line">IPUrl: http://2018.ip138.com/ic.asp</span><br><span class="line"># 阿里云接口地址</span><br><span class="line">APIUrl: http://alidns.aliyuncs.com</span><br><span class="line">DomainName: 域名 例如 google.com</span><br><span class="line">FirstName: 前缀，例如www,空则为 @</span><br><span class="line">AccessKey: Access Id Key</span><br><span class="line">AccessKeySecret: Access Id Secret</span><br></pre></td></tr></table></figure>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>使用 vs2015+C# 开发 .NET 4.0</p>
<h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>首先下载并引用阿里云sdk<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 域名解析帮助类</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDomainHelper</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DefaultAliyunClient aliyunClient;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CDomainHelper</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        aliyunClient = <span class="keyword">new</span> DefaultAliyunClient(CGlobalConfig.APIUrl, CGlobalConfig.AccessKey, CGlobalConfig.AccessKeySecret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 获取当前的解析值</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Record <span class="title">DescribeDomains</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        var req = <span class="keyword">new</span> DescribeDomainRecordsRequest() &#123; DomainName = CGlobalConfig.DomainName &#125;;</span><br><span class="line">        var response = aliyunClient.Execute(req);</span><br><span class="line"></span><br><span class="line">        var updateRecord = response.DomainRecords.FirstOrDefault(rec =&gt; rec.RR == CGlobalConfig.FirstName &amp;&amp; rec.Type == <span class="string">"A"</span>);</span><br><span class="line">        <span class="keyword">return</span> updateRecord;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 更新域名解析值</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name="ipaddr"&gt;新的ip地址&lt;/param&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name="recordId"&gt;解析条目的主键&lt;/param&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdateDomainRecords</span><span class="params">(<span class="built_in">string</span> ipaddr,<span class="built_in">string</span> recordId)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        var changeValueRequest = <span class="keyword">new</span> UpdateDomainRecordRequest()</span><br><span class="line">        &#123;</span><br><span class="line">            RecordId = recordId,</span><br><span class="line">            Value = ipaddr,</span><br><span class="line">            Type = <span class="string">"A"</span>,</span><br><span class="line">            RR = CGlobalConfig.FirstName</span><br><span class="line">        &#125;;</span><br><span class="line">        aliyunClient.Execute(changeValueRequest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 获取外网ip地址</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetIpAddr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        HttpWebRequest request = HttpWebRequest.Create(CGlobalConfig.IPUrl) as HttpWebRequest;</span><br><span class="line">        <span class="keyword">using</span> (HttpWebResponse response = request.GetResponse() as HttpWebResponse)</span><br><span class="line">        &#123;</span><br><span class="line">            StreamReader reader = <span class="keyword">new</span> StreamReader(response.GetResponseStream(), Encoding.GetEncoding(<span class="string">"GB2312"</span>));</span><br><span class="line">            <span class="built_in">string</span> str = reader.ReadToEnd();</span><br><span class="line">            reader.Close();</span><br><span class="line">            reader.Dispose();</span><br><span class="line">            <span class="keyword">int</span> start = str.IndexOf(<span class="string">"["</span>);</span><br><span class="line">            <span class="keyword">int</span> end = str.IndexOf(<span class="string">"]"</span>);</span><br><span class="line">            <span class="keyword">if</span> (start &gt; <span class="number">-1</span> &amp;&amp; end &gt; <span class="number">-1</span> &amp;&amp; end &gt; start)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> ip = str.Substring(start + <span class="number">1</span>, end - start - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> ip;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>如何像程序员一样思考[英文翻译]</title>
    <url>/archives/30325.html</url>
    <content><![CDATA[<h2 id="如何像程序员一样思考"><a href="#如何像程序员一样思考" class="headerlink" title="如何像程序员一样思考"></a>如何像程序员一样思考</h2><p>一堂教你解决问题的课程<br>原文链接：<a href="https://medium.freecodecamp.org/how-to-think-like-a-programmer-lessons-in-problem-solving-d1d8bf1de7d2" target="_blank" rel="noopener">How to think like a programmer — lessons in problem solving</a><br>原文作者：<a href="https://medium.freecodecamp.org/@richardreeze" target="_blank" rel="noopener">Richard Reis</a></p>
<p>如果你对编程感兴趣，那你之前一定听说过这句话:</p>
<blockquote>
<p>世界上的每个人都应该去学习电脑编程，因为它可以教给你如何去思考   –史蒂夫·乔布斯</p>
</blockquote>
<a id="more"></a>
<p>你一定想知道这句话究竟是什么意思，准确的来说，什么叫像程序员一样思考？我们又如何去做到？<br>归根结底，这都是想用更有效的办法去解决问题。在这篇文章中，我将会教给你这种方法，通读这篇文章之后，你将会确切的知道如果去做才能成为一个解决问题的能手。</p>
<h3 id="为什么这很重要？"><a href="#为什么这很重要？" class="headerlink" title="为什么这很重要？"></a>为什么这很重要？</h3><p>因为解决问题是一种必备技能，我们每个人都会遇到大大小小的各种问题，我们平时都是怎么解决它们的呢？嗯。。。很随意。<br>除非你拥有一套系统，一套可能会帮你解决问题的系统。（正如我刚开始编程时所作的一样）：</p>
<ol>
<li>尝试一种解决方案</li>
<li>如果不起作用，尝试另一种解决方案</li>
<li>如果不起作用，重复第二步直到你运气好解决了问题</li>
</ol>
<p>看吧，有时候你会因为运气好解决了问题，但是这是一种特别糟糕的方式，既繁琐又浪费时间。<br>所以做好的方法是首先有个要有个系统规划然后开始去做。</p>
<blockquote>
<p>几乎所有的老板都会重视解决问题的能力，比起编程语言的数量程度，调试和系统设计的能力，老板们可能更加重视解决问题的能力。展示计算思维或分解大型复杂问题的能力与工作所需的技术技能相比一样有价值<br>— 黑客等级（2018年开发人员技能报告）</p>
</blockquote>
<h3 id="拥有一个框架"><a href="#拥有一个框架" class="headerlink" title="拥有一个框架"></a>拥有一个框架</h3><p>为了找到合适的框架，我遵循了Tim Ferriss关于学习的书“4小时厨师”的建议，去采访了两位十分令人印象深刻的人：C.Jordan Ball(在Coderbyte的65,000多名用户中排名第一或第二的人)，和 V.Anton Spraul(“像程序员一样思考：一个创造性解决问题的介绍”一书的作者)，我问了他们相同的问题，猜猜是什么？他们给我的回答非常相似，很快你就会知道是什么。<br>旁注：这并不意味着他们用同一种方式做所有的事，每个人都是与众不同的，包括你。如果你有信念去开始我们会十分赞同，而且你很快就回收获更多。</p>
<blockquote>
<p>我看到新的程序员犯的最大的错误就是专注于学习语法而不是去学习如何去解决问题。<br>— V.Anton Spraulr</p>
</blockquote>
<p>那么遇到新的问题的应该怎么做呢？<br>下面是步骤：</p>
<h4 id="1-理解"><a href="#1-理解" class="headerlink" title="1.理解"></a>1.理解</h4><p>明确的知道遇到的问题是什么，很多难题之所以难是因为你不理解他们(这就是为什么这是第一步的原因)。如何知道你什么时候能够理解这个问题？答案是当你能用英语解释他们的时候。你是否还记得当你困在某个问题的时候，你尝试去解释他，你立马看到了你之前没有发现的逻辑漏洞吗？大多数程序员都有过这种感觉，这就是为什么你要写下你的问题、绘制涂鸦图或者告诉别人它的信息(或者用涂鸦图)。</p>
<blockquote>
<p>如果你不能用简单的术语来解释，你就不会理解它。<br>— Richard Feynman</p>
</blockquote>
<h4 id="2-计划"><a href="#2-计划" class="headerlink" title="2.计划"></a>2.计划</h4><p>如果你没有计划就不要去开始解决，请开始为你们解决方案制定计划，如果你不能写下确切的步骤，没有什么可以帮助你。在编程领域，这意味着不要立即开始黑客攻击。 首先请让你的大脑有时间分析问题并处理信息。为了拥有一个好的计划，请回答下面的问题：“给定输入X，返回输出Y所需的步骤是什么？”。<br>旁注：程序员有一个很好的工具来帮助他们…期待你的评论！</p>
<h4 id="3-划分"><a href="#3-划分" class="headerlink" title="3.划分"></a>3.划分</h4><p>请注意，这是最重要的一步，不要尝试去解决一个大的问题，那样你会哭的！相反，将其分解成一个个子问题，这些小问题相较而言会更加容易去解决。然后逐个去解决每个子问题，先从最简单的开始，最简单意思就是那些你知道答案(或更加接近答案)问题。在此之后，简单的问题代表不依赖于其他问题的子问题。一旦你解决了所有的子问题，把他们连接起来。连接所有“子解决方案”将为您提供原始问题的解决方案。恭喜！<br>这种能力是解决问题的基石。 记住它（如果必须，请再次阅读此步骤）。</p>
<blockquote>
<p>如果我可以教给每个初学程序员一个解决问题的技能，那就是“减少问题技巧”。例如，假设您是一名新程序员，并且您被要求编写一个读取十个数字的程序，并确定哪个数字是第三大的。这对于一个全新的程序员来说，这可能是一个艰难的任务，即使它只需要基本的编程语法。如果你遇到困难，你应该把问题简化为更简单的问题。 找到最高的总数，而不是第三高的数字？ 还是太难了？ 如何找到三个数字中最大的一个？ 还是两个中较大的一个？将问题减少到您知道如何解决问题并编写解决方案的程度。 然后稍微扩展问题并重写解决方案以匹配，并继续前进，直到您回到开始的位置<br>— V.Anton Spraul</p>
</blockquote>
<h4 id="4-困住"><a href="#4-困住" class="headerlink" title="4.困住"></a>4.困住</h4><p>到现在为止，你可能正坐在那里思考 “嘿理查德……这很酷，但是如果我被困住甚至无法解决一个子问题怎么办？”。首先，请深吸一口气，然后，这是公平的，不要担心朋友，这种情况会发生在每个人的身上！不同之处在于最好的程序员/问题解决者相对于恼火更加对错误感兴趣。事实上，当你面对一场打击时，你有三件事需要尝试：<br>Debug：逐步完成您的解决方案，试图找到出错的地方。 程序员称之为’debugging’（事实上，这都是调试器所做的）。</p>
<blockquote>
<p>“调试的艺术是弄清楚你真正告诉你的程序要做什么，而不是你认为你告诉它要做的事情。”<br>— Andrew Singer</p>
</blockquote>
<p>Reassess:退后一步。 从另一个角度看问题。 是否有任何东西可以抽象为更一般的方法？</p>
<blockquote>
<p>“有时我们会在问题的细节上迷失方向，而忽略了在更一般的层面上解决问题的一般原则。[…]<br>当然，这个经典的例子是一长串连续整数的总和，1 + 2 + 3 + … + n，一个非常年轻的高斯很快就认识到它只是n（n + 1）/ 2，从而避免了不得不做的事情。”<br>— C.Jordan Ball</p>
</blockquote>
<p>旁注：另一种重新评估方式是重新开始。 删除所有内容，然后重新开始。 我是认真的。 你会惊讶于这是多么有效。</p>
<p>搜索：啊，好吧，谷歌一下。不管你有什么问题，有人可能已经解决了。找到那个人/解决方案。事实上，即使您解决了问题，也要这样做！（你可以从其他人的解决方案中学到很多东西）。<br>警告：不要寻找解决这个大问题的方法。 只寻找子问题的解决方案。 为什么？ 因为除非你有奋斗精神（甚至一点点），否则你将无法学到任何东西。 如果你什么都不学，那你浪费了你的时间。</p>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>短时间内不要期望变得更好。如果你想成为一个好的问题解决者，去解决更多问题！实践。实践。实践。在你意识到这个问题可以通过“&lt;在这里插入概念&gt;”轻松解决之前，这只是一个时间问题。怎么练习？ wazoo里有各种选择！国际象棋谜题，数学问题，数独，围棋，大富翁，视频游戏，密码，bla … bla … bla ….事实上，成功人士的共同模式是他们练习“解决微观问题”的习惯。例如，Peter Thiel下棋，Elon Musk扮演视频游戏。</p>
<blockquote>
<p>“拜伦里夫斯说：’如果你想看看三到五年里的商业领导力是什么样的，那就看看网络游戏中发生了什么。’快进到今天。Elon [Musk],Reid [Hoffman],Mark Zuckerberg以及其他许多人都认为游戏是他们在建立公司方面取得成功的基础。”<br>— Mary Meeker（2017年互联网趋势报告）</p>
</blockquote>
<p>这是否意味着您应该只玩游戏？ 一点也不。但是游戏意味着什么？没错，解决问题！所以，你应该做的是找到练习的出路。可以让你解决许多微观问题的东西（理想情况下，你喜欢的东西）。例如，我喜欢编码挑战。 每天，我都尝试解决至少一个挑战（通常在Coderbyte上）。就像我说的，所有问题都有相似的模式。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这就是所有的内容了，现在，你更清楚“像程序员一样思考”意味着什么。你也知道解决问题是一项令人难以置信的培养技能（元技能）。好像这还不够，请注意您如何知道如何练习解决问题的技巧！这很酷吧，最后，我希望你们能够很多问题，你读这篇文章是正确的。 至少现在你知道如何解决它们了！（另外，您将了解到每个解决方案，您都会改进）。</p>
<blockquote>
<p>“就在你认为自己已成功驾驭一个障碍时，另一个障碍就出现了。 但这就是让生活变得有趣的原因。[…]<br>生命是一个突破这些障碍的过程 - 我们必须突破的一系列强化路线。<br>每一次，你都会学到一些东西。<br>每一次，你都会提升力量，智慧和观点。<br>每一次，竞争的一点点都会消失。 直到剩下的就是最好的你。”<br>— 瑞安假日（障碍就是道路）</p>
</blockquote>
<p>现在，去解决一些问题！<br>祝你好运🙂<br>特别感谢C. Jordan Ball和V. Anton Spraul。 这里所有好的建议都来自他们。<br>而且，如果没有Lambda School，我在短时间内获得的所有编程知识都不会发生。 十分感谢/推荐他们。<br>谢谢阅读！ 😊如果你喜欢它，测试你能在5秒内击中点赞多少次。 这对你的手指有很好的有氧运动，并有助于其他人看到这个故事。</p>
]]></content>
      <categories>
        <category>英文翻译</category>
      </categories>
      <tags>
        <tag>英文翻译</tag>
      </tags>
  </entry>
  <entry>
    <title>在 TypeScript 中使用 ESLint</title>
    <url>/archives/30810.html</url>
    <content><![CDATA[<h3 id="使用eslint而不使用tslint"><a href="#使用eslint而不使用tslint" class="headerlink" title="使用eslint而不使用tslint"></a>使用eslint而不使用tslint</h3><p>由于性能问题，TypeScript 官方决定全面采用 ESLint，甚至把仓库（Repository）作为测试平台，而 ESLint 的 TypeScript 解析器也成为独立项目，专注解决双方兼容性问题。</p>
<p>JavaScript 代码检验工具 ESLint 在 TypeScript 团队发布全面采用 ESLint 之后，发布 typescript-eslint 项目，以集中解决 TypeScript 和 ESLint 兼容性问题。而 ESLint 团队将不再维护 typescript-eslint-parser，也不会在 Npm 上发布，TypeScript 解析器转移至Github 的 typescript-eslint/parser。<br><a id="more"></a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add --dev eslint</span><br><span class="line">yarn add --dev @typescript-eslint/eslint-plugin</span><br><span class="line">yarn add --dev @typescript-eslint/parser</span><br></pre></td></tr></table></figure>
<h3 id="配置-eslint"><a href="#配置-eslint" class="headerlink" title="配置 eslint"></a>配置 eslint</h3><p>新建文件<code>.eslintrc.js</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  parser: &apos;@typescript-eslint/parser&apos;,</span><br><span class="line">  plugins: [&apos;@typescript-eslint&apos;],</span><br><span class="line">  extends: [&apos;plugin:@typescript-eslint/recommended&apos;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置-VScode"><a href="#配置-VScode" class="headerlink" title="配置 VScode"></a>配置 VScode</h3><p>下载<code>eslint</code>插件，设置保存修改时自动修复：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;eslint.validate&quot;: [</span><br><span class="line">  &quot;javascript&quot;,</span><br><span class="line">  &quot;javascriptreact&quot;,</span><br><span class="line">  &quot;typescriptreact&quot;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;language&quot;: &quot;typescript&quot;,</span><br><span class="line">    &quot;autoFix&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line">&quot;eslint.enable&quot;: true,</span><br><span class="line">&quot;eslint.autoFixOnSave&quot;: true</span><br></pre></td></tr></table></figure>
<h3 id="常用规则"><a href="#常用规则" class="headerlink" title="常用规则"></a>常用规则</h3><p>控制缩进为两个空格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;@typescript-eslint/indent&quot;: [&quot;error&quot;, 2]</span><br></pre></td></tr></table></figure>
<p>字符串总为一个单引号包裹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;quotes&quot;: [1, &quot;single&quot;]</span><br></pre></td></tr></table></figure>
<p>只要求自定义的方法设置返回类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;@typescript-eslint/explicit-function-return-type&quot;: [&quot;warn&quot;, &#123;</span><br><span class="line">  allowExpressions: true</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>
<p>关闭<code>any</code>类型时的警告</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;@typescript-eslint/no-explicit-any&quot;: [&quot;off&quot;]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>开源项目收集</title>
    <url>/archives/11895.html</url>
    <content><![CDATA[<p>以下为本人收集的开源项目，文章将会不定期更新。<br><a id="more"></a></p>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><ul>
<li><a href="https://github.com/gongwen/MarqueeViewLibrary" target="_blank" rel="noopener">MarqueeViewLibrary</a> 快速实现跑马灯</li>
<li><a href="https://github.com/scwang90/SmartRefreshLayout" target="_blank" rel="noopener">SmartRefreshLayout</a> 下拉刷新</li>
<li><a href="https://github.com/afollestad/material-dialogs" target="_blank" rel="noopener">material-dialogs</a> 弹窗</li>
<li><a href="https://github.com/yanzhenjie/NoHttp" target="_blank" rel="noopener">NoHttp</a> Http标准协议框架</li>
<li><a href="https://github.com/liuguangli/FloatUtil" target="_blank" rel="noopener">FloatUtil</a> 浮窗</li>
<li><a href="https://github.com/Tapadoo/Alerter" target="_blank" rel="noopener">Alerter</a> 窗帘式提醒</li>
<li><a href="https://github.com/medyo/android-about-page" target="_blank" rel="noopener">android-about-page</a> 关于页面</li>
<li><a href="https://github.com/czy1121/update" target="_blank" rel="noopener">update</a> 检查更新</li>
<li><a href="https://github.com/Yalantis/Context-Menu.Android" target="_blank" rel="noopener">Context-Menu.Android</a> 侧边菜单</li>
<li><a href="https://github.com/daimajia/NumberProgressBar" target="_blank" rel="noopener">NumberProgressBar</a> 进度条</li>
<li><a href="https://github.com/Jude95/EasyRecyclerView/blob/master/README_ch.md" target="_blank" rel="noopener">EasyRecyclerView</a> RecyclerView</li>
<li><a href="https://github.com/ForgetAll/LoadingDialog" target="_blank" rel="noopener">LoadingDialog</a> 带成功和失败动画的loading</li>
<li><a href="https://github.com/gittjy/LoadingDialog" target="_blank" rel="noopener">LoadingDialog</a> 仿ios的loading</li>
</ul>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ul>
<li><a href="https://github.com/Yixiaohan/show-me-the-code" target="_blank" rel="noopener">show-me-the-code</a> Python 练习册</li>
<li><a href="https://github.com/wangshub/wechat_jump_game" target="_blank" rel="noopener">wechat_jump_game</a> python 微信《跳一跳》辅助</li>
</ul>
<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><ul>
<li><a href="https://github.com/0xE8551CCB/serial-assistant" target="_blank" rel="noopener">serial-assistant</a> C# 及 WPF 框架编写的串口调试助手</li>
<li><a href="https://github.com/1217950746/Arthas-WPFUI" target="_blank" rel="noopener">Arthas-WPFUI</a> WPF的UI库</li>
<li><a href="https://github.com/zzzprojects/EntityFramework.Extended" target="_blank" rel="noopener">EntityFramework.Extended</a> EF 拓展库</li>
<li><a href="https://github.com/sunkaixuan/SqlSugar" target="_blank" rel="noopener">SqlSugar</a> ORM框架</li>
<li><a href="https://github.com/xoofx/SharpYaml" target="_blank" rel="noopener">SharpYaml</a> yaml序列化与反序列化</li>
</ul>
<h1 id="js"><a href="#js" class="headerlink" title="js"></a>js</h1><ul>
<li><a href="https://github.com/TerryZ/SelectPage" target="_blank" rel="noopener">SelectPage</a> 下拉选择器</li>
<li><a href="https://github.com/sentsin/layui/" target="_blank" rel="noopener">Layui</a> ui</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><a href="https://github.com/github/gitignore" target="_blank" rel="noopener">gitignore</a> gitignore 集合</li>
<li><a href="https://github.com/dcloudio/mui" target="_blank" rel="noopener">mui</a> h5 开发 mobile app</li>
<li><a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">frp</a> 内网穿透工具</li>
</ul>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>收藏</tag>
      </tags>
  </entry>
  <entry>
    <title>批量移动文件</title>
    <url>/archives/a142eb14.html</url>
    <content><![CDATA[<p><code>files-move.exe</code>可以批量更新上传的压缩包里面的所有文件，根据一个配置文件来分配目录，如果目标目录里已有该文件则先把文件移动到备份文件夹里，避免丢失原文件。<br><a href="https://github.com/AlanLang/files-move" target="_blank" rel="noopener">GitHub</a><br><a id="more"></a></p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="1-新建配置文件-config-json-配置要移动的文件和目标路径"><a href="#1-新建配置文件-config-json-配置要移动的文件和目标路径" class="headerlink" title="1. 新建配置文件 config.json 配置要移动的文件和目标路径"></a>1. 新建配置文件 <code>config.json</code> 配置要移动的文件和目标路径</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">     &quot;person&quot;: &quot;开发者&quot;,</span><br><span class="line">    &quot;basepath&quot;:&quot;E:\test&quot;,</span><br><span class="line">    &quot;files&quot;:[</span><br><span class="line">        &#123;&quot;name&quot;:&quot;text1.txt&quot;,&quot;path&quot;:&quot;&quot;&#125;,</span><br><span class="line">        &#123;&quot;name&quot;:&quot;text2.txt&quot;,&quot;path&quot;:&quot;demo&quot;&#125;,</span><br><span class="line">        &#123;&quot;name&quot;:&quot;text3.txt&quot;,&quot;path&quot;:&quot;demo\\demo1&quot;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-将配置文件和其他要移动的文件放在一起"><a href="#2-将配置文件和其他要移动的文件放在一起" class="headerlink" title="2. 将配置文件和其他要移动的文件放在一起"></a>2. 将配置文件和其他要移动的文件放在一起</h3><p><img src="http://oqdzx28cd.bkt.clouddn.com/18-1-10/77737370.jpg" alt></p>
<h3 id="3-将文件们压缩成-zip"><a href="#3-将文件们压缩成-zip" class="headerlink" title="3. 将文件们压缩成 zip"></a>3. 将文件们压缩成 <code>zip</code></h3><p>目前系统只支持zip类型的压缩文件</p>
<h3 id="4-运行本项目或者打开项目生成的-exe-文件"><a href="#4-运行本项目或者打开项目生成的-exe-文件" class="headerlink" title="4. 运行本项目或者打开项目生成的 exe 文件"></a>4. 运行本项目或者打开项目生成的 <code>exe</code> 文件</h3><p>点击 <code>打开</code> 按钮，选择刚才配置的压缩文件即可。</p>
<h3 id="5-备注"><a href="#5-备注" class="headerlink" title="5. 备注"></a>5. 备注</h3><p>本项目已引用 <code>Costura.Fody</code>，即生成的可执行文件为绿色单文件，可以随意拿到任何地方使用（仅限Windows）。</p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义停留时间的Toast</title>
    <url>/archives/21309.html</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 弹出一个Toast</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> msg toast显示的消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cnt 持续的时间（秒）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMyToast</span><span class="params">(String msg, <span class="keyword">final</span> <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Toast toast=Toast.makeText(MainActivity.<span class="keyword">this</span>,msg, Toast.LENGTH_LONG);</span><br><span class="line">    <span class="keyword">final</span> Timer timer =<span class="keyword">new</span> Timer();</span><br><span class="line">    timer.schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            toast.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">0</span>,<span class="number">3000</span>);</span><br><span class="line">    <span class="keyword">new</span> Timer().schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            toast.cancel();</span><br><span class="line">            timer.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, cnt );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>我不是一名前端</title>
    <url>/archives/25393.html</url>
    <content><![CDATA[<p>既然标题是前端，那话题就从前端开始，2018年前端界的事儿特别多，从 React v16 普及，到 jQuery 被 GitHub 下掉完成阶段性历史使命，在唏嘘之外，版本帝 AngularJS 又发布了 v6 和 v7 两个版本，Vue.js 也在高歌猛进，一路赶超队友。这些其实都不算啥大新闻，反观三大框架，写法越来越像，越来越贴近 WebComponents 标准，而周边应用层面的封装已经开始指数级增长。小程序是今年最火的技术，接连出现，快应用也想分一杯羹。PWA 进入稳定期，尤其是 PWA 桌面版，可以让我们更好的看清楚 PC 桌面版开发的全貌。移动端还是以强运营为主，各大公司都开始不再 all in 移动，开始重视多端并进，到了开始拼细节的阶段了。TypeScript 全面开花，GraphQL 蠢蠢欲动，WebAssembly 更是打开了浏览器上多语言的大门。<br><a id="more"></a></p>
<p>另外，这个娱乐圈也贡献了许多茶余饭后的谈资，从大漠穷秋与尤雨溪的论战，到著名npm库被发现植入后门，再到阿里开源框架antd的圣诞节菜单，前端这两个字一直被放在了聚光灯下，既照出了光彩，也照出了阴暗。得益于 Node.js 的辅助加成，前端的发展得到爆炸式增长，曾几何时还有人在互联网声嘶力竭得咆哮着：求求你们不要再更新了，我真得学不动了！！！，这真真应了那句古话：学如逆水行舟，不进则退。</p>
<p>不过我觉得，最为一名前端工程师，仅仅这些还远远不够，一名前端工程师发展到最后还是要成为全栈工程师，我们还有后端知识，我们还有数据结构，我们还有操作系统，这些都应该去掌握，不止拘泥眼前，还要拓宽视野；不止总结过去，还要看向未来，我不是一名前端，因为我不只是一名前端。</p>
<h2 id="能力模型"><a href="#能力模型" class="headerlink" title="能力模型"></a>能力模型</h2><p><img src="https://i.loli.net/2019/03/28/5c9c43543f349.png" alt><br>一个人能力很强，我们称他为大佬，一个人能力不行，我们称他为菜鸟。但是为什么会存在这样的区别，同样是经历了9年义务教育，为什么有的人就能如此优秀？其实，能力的高低只是结果，而造成结果的条件却有很多，但是我们往往只看到了结果，却看不到造成结果的原因。最近有人在github上开源了一个名为 996.ICU 的仓库，短时间就收到了36k的start，而这个仓库的目的只是在控诉996这种工作制度，从 2016 年 9 月初起，就陆续有网友爆料称，58同城实行全员“996”工作制,且周末加班没有工资。2019 年杭州电商公司有赞在公司年会宣布未来执行 996 工作制， CEO 白鸦回应“几年后回看，这次绝对是好事”。但是我认为，除非是生产型企业和某些特种行业，对于其余大部分企业来说，并不会因为平常工作时间比别人更长而获得更明显的收益。为什么大多有名的框架和厉害的技术往往都是出在国外，因为我们实在是太忙了，忙着每天工作而没有一点自己的时间，忙到每天只是机械式得搬运代码而没有时间停下来去好好想想其中的道理。而且大多数的工作都只是单纯的重复劳动，所以一个人的提升还是要靠他自己的自由时间。靠自由时间去拓宽眼界，去提升思维，去锻炼心态。</p>
<h3 id="眼界"><a href="#眼界" class="headerlink" title="眼界"></a>眼界</h3><h4 id="好奇心是技术进步的原动力"><a href="#好奇心是技术进步的原动力" class="headerlink" title="好奇心是技术进步的原动力"></a>好奇心是技术进步的原动力</h4><p>如果想成为一名资深程序员，去看看 Java 世界、Go 的世界、Python 的世界。谁再跟你说前端开发不需要后端那一套，请呵呵他一脸。抬高视角，世界则大不同。闲来无事逛逛知乎，看看掘金，浏览下GitHub，但是碎片化的阅读只能提升知识广度，真正想深入还是需要集中式的探索。</p>
<h4 id="不过分沉迷于具体技术"><a href="#不过分沉迷于具体技术" class="headerlink" title="不过分沉迷于具体技术"></a>不过分沉迷于具体技术</h4><p>前端的发展过快带来的弊端就是技术太过于纷繁杂乱，知乎上每周都会有一些引战帖想要把React、Angular、Vue来区分个高低贵贱。不止前端，程序员的世界都是这样，只要你敢在某论坛说一句 C# 是世界上最好的语言，后面便开始了第N次世界大战。何苦呢，这样喷来喷去有什么意义，大家都是图灵完备，然而此之蜜糖，彼之砒霜。还不如大家能停下来想想所谓的 ”A 技术比 B 技术牛逼“ 背后到底是在争些什么，我们使用这些技术的初衷又是什么。很多时候你说这方面，他说那方面，鸡同鸭讲，即使说到一起去，也往往缺乏对等的信息量或者基础共识，只是各自表达主观看法，最后变成两个阵营各自抱团取暖… 说到底，就算你证明了 A 比 B 牛逼，也不意味着你或者你的项目就牛逼了… 比起争这个，不如多想想怎么让自己变得更牛逼。面向框架的学习不可取，因为到最后会发现，看似纷繁复杂的技术背后，是对称与统一。</p>
<h4 id="跟上时代，避免降维打击"><a href="#跟上时代，避免降维打击" class="headerlink" title="跟上时代，避免降维打击"></a>跟上时代，避免降维打击</h4><p>前端也是这几年才发展起来的，之前都没有前端工程师这个称呼，那时都叫”切图仔”，jq从兴起到落寞也不过短短几年，即使是天下大势，也会是分久必合合久必分，有一些新的技术甚至是颠覆性的，比如数码相机相对于胶卷，不如手机相对于mp3,前端领域的技术更新相对于其他领域要快很多，原因大概也是因为这个领域离用户最近吧。所以前端工程师必须要跟上时代的步伐，如果直9012年了现在你还只依恋于jq而不去接纳新的技术，那基本上已经被这个时代淘汰了。后人哀之而不鉴之，亦使后人而复哀后人也。</p>
<h3 id="思维"><a href="#思维" class="headerlink" title="思维"></a>思维</h3><h4 id="学会思考"><a href="#学会思考" class="headerlink" title="学会思考"></a>学会思考</h4><p>知其然还要知其所以然，单纯的面向框架的学习是不可取的，因为这样你仅仅只是学了框架的用法，对内部的实现一概不知，而框架又那么多，怎么可能全都去学一遍？所以我们更应该学习的是思想，万变不离其宗，一通则百通。</p>
<h4 id="抽象思维"><a href="#抽象思维" class="headerlink" title="抽象思维"></a>抽象思维</h4><p>给定一个问题，抽象就是去掉纷繁芜杂的与计算无关的部分，用规约（Reduction）的方法还原到问题的本质。所谓本质即把原来的问题转换为一个或几个可以使用计算机描述并解决的问题，进一步讲也就是转换为在算法上可计算的（algorithmically computable）一个或几个问题，更准确更理论化更上档次的描述是转换为邱奇-图灵论题（TChurch-Turing thesis）可计算的可数个问题。一般在实际工作中，常常需要把问题的实体对象根据需求表示为各种数据结构如树、堆、栈等，而业务逻辑（Business Logic）过程表示为各种算法如排序和查找等。表示（Presentation）是解决问题的第一步，也是关键的一步。在程序员的实践中，我们都有很深的体会，一旦问题被准确的无歧义表示出来了，解决方案就烘云托月般地呈现出来了。</p>
<h4 id="大局观"><a href="#大局观" class="headerlink" title="大局观"></a>大局观</h4><p>一个优秀的程序员不只需要掌握扎实的技术、写好每一个函数，还需要有大局观、有宏观规划项目的能力、有敏锐的视角察觉到什么问题是迫切的什么问题可以缓一缓、当程序员有问题的时候优秀的程序员有清晰的分析问题能力。这种宏观规划，把握宏观方向，抓大放小，清晰地认识 ‘high level picture’ 的能力，是非常重要的。培养这种能力，需要经验，需要思考，还需要天赋。</p>
<h3 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h3><h4 id="兴趣是最好的老师"><a href="#兴趣是最好的老师" class="headerlink" title="兴趣是最好的老师"></a>兴趣是最好的老师</h4><p>古人云：“知之者不如好之者，好知者不如乐之者。”，兴趣是你成为程序员的一个内在驱动力，这种力量很神奇，可化不可能成可能，可化腐朽为神奇。不断的、创造性的给自己一些个好奇心，欲望无限，你的动力就无限。在信息时代，客观障碍已不复存在，所谓障碍都是主观上的。如果你想动手开发什么全新的技术，你不需要几百万美元的资金，你只需要在冰箱里放满披萨和可乐，再有一台便宜的计算机，和为之献身的决心。</p>
<h4 id="热爱自己的职业"><a href="#热爱自己的职业" class="headerlink" title="热爱自己的职业"></a>热爱自己的职业</h4><p>生活推着我们所有的人，一些人在生活推着他转的同时，抓住生活赐予的每个机会；而另一些人则非常生气，去与生活抗争。他们与老板抗争，与工作抗争，甚至与自己的配偶抗争，他们不知道生活同时也给了他们机会。如果热爱工作热爱生活，你就会成为一个聪明、富有和快乐的人。如果你没有学会，你就只会终生抱怨工作、低报酬和老板，终其一生仅希望有个大机会能够把你所有的钱的问题都解决。而每天因为这些琐事而劳心伤神，有怎么有时间和经历去学习，去提升自己的能力。</p>
<h4 id="技术固然重要，但是为人处世更重要。"><a href="#技术固然重要，但是为人处世更重要。" class="headerlink" title="技术固然重要，但是为人处世更重要。"></a>技术固然重要，但是为人处世更重要。</h4><p>虽然是程序员，但是大多数还是和人打交道，我们还是要与人沟通，与人合作的，要谦逊，要礼貌，要有涵养，要谦谦君子，要温润如玉。君子敬而无失,与人恭而有礼，四海之内皆兄弟。</p>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>文章</tag>
      </tags>
  </entry>
  <entry>
    <title>Git进阶操作</title>
    <url>/archives/27737.html</url>
    <content><![CDATA[<h2 id="回退本地修改"><a href="#回退本地修改" class="headerlink" title="回退本地修改"></a>回退本地修改</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard &lt;需要回退到的版本号（只需输入前几位）&gt;</span><br></pre></td></tr></table></figure>
<p><code>hard</code>和<code>soft</code>还有<code>mixed</code> 的区别可以看<a href="https://stackoverflow.com/questions/3528245/whats-the-difference-between-git-reset-mixed-soft-and-hard" target="_blank" rel="noopener">这里</a></p>
<h2 id="强制将本地版本覆盖要远端"><a href="#强制将本地版本覆盖要远端" class="headerlink" title="强制将本地版本覆盖要远端"></a>强制将本地版本覆盖要远端</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin &lt;分支名&gt; --force</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="撤销远程版本的某一次提交"><a href="#撤销远程版本的某一次提交" class="headerlink" title="撤销远程版本的某一次提交"></a>撤销远程版本的某一次提交</h2><p>比如<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A1–A2–B1</span><br></pre></td></tr></table></figure></p>
<p>如果想撤销A2的提交<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git revert HEAD                     //撤销最近一次提交</span><br><span class="line">git revert HEAD~1                   //撤销上上次的提交，注意：数字从0开始</span><br><span class="line">git revert 0ffaacc                  //撤销0ffaacc这次提交</span><br></pre></td></tr></table></figure></p>
<p>git revert 命令意思是撤销某次提交。它会产生一个新的提交，虽然代码回退了，但是版本依然是向前的，所以，当你用revert回退之后，所有人pull之后，他们的代码也自动的回退了。<br>但是，要注意以下几点：</p>
<h2 id="从一个分支合并特定的commits到另一个分支"><a href="#从一个分支合并特定的commits到另一个分支" class="headerlink" title="从一个分支合并特定的commits到另一个分支"></a>从一个分支合并特定的commits到另一个分支</h2><h3 id="单个commit"><a href="#单个commit" class="headerlink" title="单个commit"></a>单个commit</h3><p>比如<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dd2e86 - 946992 -9143a9 - a6fd86 - 5a6057 [master]</span><br><span class="line">           \</span><br><span class="line">            76cada - 62ecb3 - b886a0 [feature]</span><br></pre></td></tr></table></figure></p>
<p>比如，feature 分支上的commit 62ecb3 非常重要，它含有一个bug的修改，或其他人想访问的内容。无论什么原因，你现在只需要将62ecb3 合并到master，而不合并feature上的其他commits，所以我们用git cherry-pick命令来做：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git cherry-pick 62ecb3</span><br></pre></td></tr></table></figure></p>
<p>这样就好啦。现在62ecb3 就被合并到master分支，并在master中添加了commit（作为一个新的commit）。<br>cherry-pick 和merge比较类似，如果git不能合并代码改动（比如遇到合并冲突），git需要你自己来解决冲突并手动添加commit。</p>
<h3 id="多个commit"><a href="#多个commit" class="headerlink" title="多个commit"></a>多个commit</h3><p>还以上例为例，假设你需要合并feature分支的commit 76cada ~62ecb3 到master分支。<br>首先需要基于feature创建一个新的分支，并指明新分支的最后一个commit：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b newbranch 62ecb3</span><br></pre></td></tr></table></figure></p>
<p>然后，rebase这个新分支的commit到master（–ontomaster）。76cada^ 指明你想从哪个特定的commit开始。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rebase --onto master 76cada^</span><br></pre></td></tr></table></figure></p>
<p>得到的结果就是feature分支的commit 76cada ~62ecb3 都被合并到了master分支。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>DockerCompose使用教程</title>
    <url>/archives/60376.html</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>参考官网:<a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">https://docs.docker.com/compose/install/</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>以构建jenkins为例<br>新建 Dockerfile<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi Dockerfile</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM jenkins/jenkins:lts</span><br><span class="line"></span><br><span class="line">USER root</span><br><span class="line"></span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y libltdl-dev</span><br></pre></td></tr></table></figure>
<p>新建 docker-compose.yml<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi docker-compose.yml</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line"> jenkins:</span><br><span class="line">  build: .</span><br><span class="line">  image: my_jenkins</span><br><span class="line">  ports:</span><br><span class="line">    - &quot;8090:8080&quot;</span><br><span class="line">    - &quot;50000:50000&quot;</span><br><span class="line">  container_name: my_jenkins</span><br><span class="line">  volumes:</span><br><span class="line">    - &quot;/home/jenkins_home:/var/jenkins_home&quot;</span><br><span class="line">    - &quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span><br><span class="line">    - &quot;/usr/bin/docker:/usr/bin/docker&quot;</span><br></pre></td></tr></table></figure>
<p>执行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 常用命令整理</title>
    <url>/archives/16101.html</url>
    <content><![CDATA[<p><a href="https://www.runoob.com/docker/docker-command-manual.html" target="_blank" rel="noopener">命令大全</a></p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull $&#123;CONTAINER NAME&#125;                    #拉取镜像</span><br><span class="line">docker images                                    #查看本地所有镜像</span><br><span class="line">docker ps                                        #查看所有正在运行的容器，加-q返回id</span><br><span class="line">docker ps -a                                     #查看所有容器，加-q返回id</span><br><span class="line">docker rmi $&#123;IMAGE NAME/ID&#125;                      #删除镜像</span><br><span class="line">docker rm $&#123;CONTAINER NAME/ID&#125;                   #删除容器</span><br><span class="line">docker save $&#123;IMAGE NAME&#125; &gt; $&#123;FILE NAME&#125;.tar     #将镜像保存成文件</span><br><span class="line">docker load &lt; $&#123;FILE NAME&#125;.tar                   #从文件加载镜像</span><br><span class="line">docker start $&#123;CONTAINER NAME/ID&#125;                #运行一个以前运行过的容器</span><br><span class="line">docker stop $&#123;CONTAINER NAME/ID&#125;                 #停止一个正在运行的容器</span><br><span class="line">docker logs $&#123;CONTAINER NAME/ID&#125;                 #显示运行容器的日志</span><br><span class="line">docker run...                                    #运行一个容器</span><br><span class="line">    --name $&#123;container name&#125;                          #设置容器名称</span><br><span class="line">    -p $&#123;host port&#125;:$&#123;container port&#125;                 #映射主机和容器内的端口</span><br><span class="line">    -e $&#123;env name&#125;=$&#123;env value&#125;                       #添加环境变量</span><br><span class="line">    -d                                                #后台运行</span><br><span class="line">    -v $&#123;host folder path&#125;:$&#123;container folder path&#125;   #将主机目录挂在到容器内</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="高级命令"><a href="#高级命令" class="headerlink" title="高级命令"></a>高级命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Advance use </span><br><span class="line">docker ps -f &quot;status=exited&quot;                                   #显示所有退出的容器</span><br><span class="line">docker ps -a -q                                                #显示所有容器id</span><br><span class="line">docker ps -f &quot;status=exited&quot; -q                                #显示所有退出容器的id</span><br><span class="line">docker restart $(docker ps -q)                                 #重启所有正在运行的容器</span><br><span class="line">docker stop $(docker ps -a -q)                                 #停止所有容器</span><br><span class="line">docker rm $(docker ps -a -q)                                   #删除所有容器</span><br><span class="line">docker rm $(docker ps -f &quot;status=exited&quot; -q)                   #删除所有退出的容器</span><br><span class="line">docker rm $(docker stop $(docker ps -a -q))                    #停止并删除所有容器</span><br><span class="line">docker start $(docker ps -a -q)                                #启动所有容器</span><br><span class="line">docker rmi $(docker images -a -q)                              #删除所有镜像</span><br><span class="line">docker exec -it $&#123;CONTAINER NAME/ID&#125; /bin/bash                 #进入容器内</span><br><span class="line">docker exec -it $&#123;CONTAINER NAME/ID&#125; ping $&#123;CONTAINER NAME/ID&#125; #一个容器ping另外一个容器</span><br><span class="line">docker top $&#123;CONTAINER NAME/ID&#125;                                #显示一个容器的top信息</span><br><span class="line">docker stats                                                   #显示容器统计信息(正在运行)</span><br><span class="line">    docker stats -a                                            #显示所有容器的统计信息(包括没有运行的)</span><br><span class="line">    docker stats -a --no-stream                                #显示所有容器的统计信息(包括没有运行的) ，只显示一次</span><br><span class="line">    docker stats --no-stream | sort -k8 -h                     #统计容器信息并以使用流量作为倒序</span><br><span class="line">docker system </span><br><span class="line">      docker system df           #显示硬盘占用</span><br><span class="line">      docker system events       #显示容器的实时事件</span><br><span class="line">      docker system info         #显示系统信息</span><br><span class="line">      docker system prune        #清理文件</span><br><span class="line">docker ps -a | grep &quot;Exited&quot; | awk &apos;&#123;print $1 &#125;&apos;|xargs docker stop #停止状态为Exited的容器</span><br><span class="line">docker ps -a | grep &quot;Exited&quot; | awk &apos;&#123;print $1 &#125;&apos;|xargs docker rm #删除状态为Exited的容器</span><br><span class="line">docker images|grep none|awk &apos;&#123;print $3 &#125;&apos;|xargs docker rmi 删除名称为&lt;none&gt;的镜像</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins使用webhooks</title>
    <url>/archives/38539.html</url>
    <content><![CDATA[<p>jenkins原生支持webhoos触发，无需安装任何插件，但是有权限验证，所以需要给用户生成一个token，<br>触发地址为：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://username:token@jenkinshost:port/job/任务名称/build</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Docker部署Drone</title>
    <url>/archives/20196.html</url>
    <content><![CDATA[<h2 id="新建-GitHub-应用"><a href="#新建-GitHub-应用" class="headerlink" title="新建 GitHub 应用"></a>新建 GitHub 应用</h2><p>登录 GitHub，在 <a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a> 新建一个应用。<br><img src="https://alan-picpack.oss-cn-hangzhou.aliyuncs.com/github_application_create.png" alt><br>接下来查看这个应用的详情，记录 Client ID 和 Client Secret，之后配置 Drone 会用到。</p>
<a id="more"></a>
<h2 id="配置-Drone"><a href="#配置-Drone" class="headerlink" title="配置 Drone"></a>配置 Drone</h2><p>我们通过使用<code>Docker Compose</code>来启动 Drone，编写<code>docker-compose.yml</code>文件。<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">drone-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">drone/drone</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8005:80"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"7003:443"</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">my_drone</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"/volume1/docker/drone:/data"</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_AGENTS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_SERVER_HOST=$&#123;DRONE_SERVER_HOST:-https://drone.yeasy.com&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_SERVER_PROTO=$&#123;DRONE_SERVER_PROTO:-https&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_SECRET=$&#123;DRONE_RPC_SECRET:-secret&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GITHUB_SERVER=https://github.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GITHUB_CLIENT_ID=$&#123;DRONE_GITHUB_CLIENT_ID&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GITHUB_CLIENT_SECRET=$&#123;DRONE_GITHUB_CLIENT_SECRET&#125;</span></span><br><span class="line">	    <span class="bullet">-</span> <span class="string">DRONE_USER_CREATE=username:alanlang,admin:true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">drone-agent:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">drone/drone-runner-docker:1</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"3000:3000"</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">drone-server</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"/var/run/docker.sock:/var/run/docker.sock"</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_PROTO=http</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_HOST=drone-server</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_SECRET=$&#123;DRONE_RPC_SECRET:-secret&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RUNNER_NAME=$&#123;HOSTNAME:-demo&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RUNNER_CAPACITY=2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DOCKER_API_VERSION=1.39</span></span><br><span class="line">    <span class="attr">dns:</span> <span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span></span><br></pre></td></tr></table></figure></p>
<p>新建 .env 文件，输入变量及其值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 必填 服务器地址，例如 drone.domain.com</span><br><span class="line">DRONE_SERVER_HOST=</span><br><span class="line">DRONE_SERVER_PROTO=https</span><br><span class="line">DRONE_RPC_SECRET=secret</span><br><span class="line">HOSTNAME=demo</span><br><span class="line"># 必填 在 GitHub 应用页面查看</span><br><span class="line">DRONE_GITHUB_CLIENT_ID=</span><br><span class="line"># 必填 在 GitHub 应用页面查看</span><br><span class="line">DRONE_GITHUB_CLIENT_SECRET=</span><br></pre></td></tr></table></figure>
<h2 id="启动-Drone"><a href="#启动-Drone" class="headerlink" title="启动 Drone"></a>启动 Drone</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<h2 id="使用Drone本地部署docker应用"><a href="#使用Drone本地部署docker应用" class="headerlink" title="使用Drone本地部署docker应用"></a>使用Drone本地部署docker应用</h2><p>编写<code>.drone.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">pipeline</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">cicd</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker/compose</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">docker_socket</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/var/run/docker.sock</span></span><br><span class="line">    <span class="attr">commands:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">docker-compose</span> <span class="string">up</span> <span class="string">-d</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">docker_socket</span></span><br><span class="line">    <span class="attr">host:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/var/run/docker.sock</span></span><br></pre></td></tr></table></figure>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="无法使用docker"><a href="#无法使用docker" class="headerlink" title="无法使用docker"></a>无法使用docker</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Couldn&apos;t connect to Docker daemon at http+docker://localhost - is it running?</span><br><span class="line">If it&apos;s at a non-standard location, specify the URL with the DOCKER_HOST environment variable.</span><br></pre></td></tr></table></figure>
<p>解决<br>需要挂载docker环境 <a href="https://discourse.drone.io/t/solved-run-docker-compose-within-drone-yml/6563" target="_blank" rel="noopener">https://discourse.drone.io/t/solved-run-docker-compose-within-drone-yml/6563</a></p>
<h3 id="无法使用本地挂载"><a href="#无法使用本地挂载" class="headerlink" title="无法使用本地挂载"></a>无法使用本地挂载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cicd: linter: untrusted repositories cannot mount host volumes</span><br></pre></td></tr></table></figure>
<p>解决<br>手动开启项目的Trusted<br><img src="https://img-blog.csdnimg.cn/20200618013525763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NDI1MDcw,size_16,color_FFFFFF,t_70" alt></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>常用工具安装脚本</title>
    <url>/archives/53812.html</url>
    <content><![CDATA[<h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><p><a href="https://nodejs.org/" target="_blank" rel="noopener">官网</a></p>
<p><a href="https://github.com/nodesource/distributions" target="_blank" rel="noopener">https://github.com/nodesource/distributions</a><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> Using Ubuntu</span><br><span class="line">curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Using Debian, as root</span><br><span class="line">curl -sL https://deb.nodesource.com/setup_10.x | bash -</span><br><span class="line">apt-get install -y nodejs</span><br></pre></td></tr></table></figure></p>
<h3 id="croc"><a href="#croc" class="headerlink" title="croc"></a>croc</h3><p><a href="https://github.com/schollz/croc" target="_blank" rel="noopener">https://github.com/schollz/croc</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https://getcroc.schollz.com | bash</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>收藏</category>
      </categories>
      <tags>
        <tag>收藏</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖 MariaDB10 开启远程登录</title>
    <url>/archives/8645.html</url>
    <content><![CDATA[<p>群晖安装 MariaDB10 后，默认仅支持本机连接，也就是说，你的局域网电脑是连接不上的，如果需要局域网连接，需要做处理。<br>首先使用 ssh 连接到群晖，进入 MariaDB 默认安装目录<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /volume1/@appstore/MariaDB10/usr/local/mariadb10/bin</span><br></pre></td></tr></table></figure></p>
<p>使用 root 登录 MariaDB，输入密码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./mysql -u root -p</span><br></pre></td></tr></table></figure></p>
<p>切换 mysql 数据库<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; use mysql</span><br></pre></td></tr></table></figure></p>
<p>更新user表<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [mysql]&gt; update user set host = &apos;%&apos; where user = &apos;root&apos;;</span><br></pre></td></tr></table></figure></p>
<p>刷新权限<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [mysql]&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>黑群晖安装教程</title>
    <url>/archives/55166.html</url>
    <content><![CDATA[<h2 id="配置清单"><a href="#配置清单" class="headerlink" title="配置清单"></a>配置清单</h2><table>
<thead>
<tr>
<th>硬件配置</th>
<th>选型</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU</td>
<td>i3-6100</td>
</tr>
<tr>
<td>主板</td>
<td>华硕 B150M-A/M.2</td>
</tr>
<tr>
<td>内存</td>
<td>两根8G垃圾内存条</td>
</tr>
<tr>
<td>机箱</td>
<td>淘宝买的6盘位MATX机箱</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="制作引导U盘"><a href="#制作引导U盘" class="headerlink" title="制作引导U盘"></a>制作引导U盘</h2><ol>
<li>插入U盘，打开DiskGenius分区助手工具，找到刚刚插入的U盘，右键删除所有分区，保存。</li>
<li>点击快速分区按钮，设置MBR分区表、自定1个分区，然后点击确定。</li>
<li>U盘格式化完成后，关闭DiskGenius工具。</li>
<li>打开ChipGenius芯片无忧工具，找到刚刚格式化了的U盘盘符，记录VID和PID里面的数值。</li>
<li>打开Win32DiskImager写盘工具，选择映像文件为DS918固件的引导文件：synoboot.img，盘符选择U盘的盘符，然后点击写入。</li>
<li>完成后关闭Win32DiskImager软件。</li>
<li>再次打开DiskGenius分区助手工具，点击U盘的这个盘符前面的小+号，找到grub这个盘符。</li>
<li>将grub.cfg复制到桌面，修改VID和PIN的为刚才记录的值，然后替换源文件。</li>
<li>将U盘插入黑群晖，开机。</li>
</ol>
<p><img src="https://qnam.smzdm.com/202004/04/5e8839f9538ad7276.jpg_e680.jpg" alt></p>
<h2 id="安装群晖系统"><a href="#安装群晖系统" class="headerlink" title="安装群晖系统"></a>安装群晖系统</h2><ol>
<li>打开Synology Assistant 群晖查找工具，查看新群晖的ip地址</li>
<li>输入ip地址，跳转到安装页面</li>
<li>选择手动安装，找到之前下载的固件进行安装</li>
<li>等待安装完成后刷新页面，进入群晖系统配置页面。</li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>判断是否支持硬件解码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls /dev/dri</span><br></pre></td></tr></table></figure></p>
<h2 id="升级到最新系统-6-2-3-25426-update2"><a href="#升级到最新系统-6-2-3-25426-update2" class="headerlink" title="升级到最新系统(6.2.3 25426 update2)"></a>升级到最新系统(6.2.3 25426 update2)</h2><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>直接在系统里点击升级即可</p>
<h3 id="解决ssd缓存无法识别的问题"><a href="#解决ssd缓存无法识别的问题" class="headerlink" title="解决ssd缓存无法识别的问题"></a>解决ssd缓存无法识别的问题</h3><p>下载<a href="https://alan-files.oss-cn-hangzhou.aliyuncs.com/%E6%8A%98%E8%85%BE%E4%B8%8D%E6%AD%A2/%E9%BB%91%E7%BE%A4%E6%99%96/libsynonvme.so.1" target="_blank" rel="noopener">libsynonvme.so.1</a><br>将<code>libsynonvme.so.1</code>替换到/usr/lib64, 注意是/usr/lib64, 不是/lib64<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 644 /usr/lib64/libsynonvme.so.1</span><br></pre></td></tr></table></figure></p>
<h3 id="解决硬件解码失效的问题"><a href="#解决硬件解码失效的问题" class="headerlink" title="解决硬件解码失效的问题"></a>解决硬件解码失效的问题</h3><p>下载 <code>DS918-6.23_1.04b的扩展驱动0.13.3</code>, 替换引导驱动 <a href="https://alan-files.oss-cn-hangzhou.aliyuncs.com/%E6%8A%98%E8%85%BE%E4%B8%8D%E6%AD%A2/%E9%BB%91%E7%BE%A4%E6%99%96/DS918-6.23_1.04b%E7%9A%84%E6%89%A9%E5%B1%95%E9%A9%B1%E5%8A%A80.13.3.zip" target="_blank" rel="noopener">下载地址</a><br><img src="https://s1.ax1x.com/2020/07/26/a96ZGt.md.jpg" alt></p>
]]></content>
      <categories>
        <category>黑群晖</category>
      </categories>
      <tags>
        <tag>黑群晖</tag>
      </tags>
  </entry>
</search>
